

.\public\index.html
-------------------
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/x-icon" href="%PUBLIC_URL%/images/logoMini.svg">
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Speech UP project"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />    
    <title>Speech Up</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>


.\src\App.tsx
-------------
import { Routes, Route, Navigate} from "react-router-dom";

import HomePage from "./pages/HomePage";
import DiaryPage from "./pages/DiaryPage";
import ImprovisationPage from "./pages/ImprovisationPage";
import LearningPage from "./pages/LearningPage";
import RepetitionPage from "./pages/RepetitionPage";
import SettingsPage from "./pages/SettingsPage";
import LoginPage from "./pages/EntryPage/LoginPage";
import RegisterPage from "./pages/EntryPage/RegisterPage";
import PasswordRestorePage from "./pages/EntryPage/PasswordRestorePage";
import ActivationPage from "./pages/EntryPage/ActivationPage";
import LandingPage from "./pages/LandingPage";
import AuthorizedRoute from "./components/tools/AuthorizedRoute";
import UnauthorizedRoute from "./components/tools/UnauthorizedRoute";
import RoutesEnum from "./models/routes";

import TestPage from "./pages/TestPage";

import SurveyPage from "./pages/SurveyPage";
import RepetitionStart from "./components/RepetitionComponents/RepetitionStart";
import About from "./components/About";
import RecodingSetup from "./components/RepetitionComponents/Setup";
import RecodingPage from "./pages/RecodingPage";
import DiaryStart from "./components/DiaryStart";
import AnalysisReport from "./components/Report";
import SettingsStart from "./components/SettingsStart";
import ScrollToTop from "./tools/ScrollToTop";

export default function App() {
    return (
        <div className="wrapper">
            <ScrollToTop />
            <Routes>
                <Route path={RoutesEnum.LANDING} element={<LandingPage />} />
                <Route element={<UnauthorizedRoute />}>
                    <Route path={RoutesEnum.LOGIN} element={<LoginPage />} />
                    <Route
                        path={RoutesEnum.REGISTER}
                        element={<RegisterPage />}
                    />
                    <Route
                        path={RoutesEnum.ACTIVATION}
                        element={<ActivationPage />}
                    />
                    <Route
                        path={RoutesEnum.RESTORE}
                        element={<PasswordRestorePage />}
                    />
                </Route>

                <Route
                    element={
                        // process.env.NODE_ENV === "production" ? (
                        <AuthorizedRoute />
                        // ) : (
                        //     <Outlet />
                        // )
                    }
                >
                    <Route path={RoutesEnum.SURVEY} element={<SurveyPage />} />
                    <Route path={RoutesEnum.ROOT} element={<HomePage />} />
                    <Route path={RoutesEnum.HOME} element={<HomePage />} />

                    <Route path={RoutesEnum.DIARY} element={<DiaryPage />}>

                        <Route index={true} element={<DiaryStart />} />
                        <Route
                            index={false}
                            path=":id"
                            element={<AnalysisReport />}
                        />
                    </Route>
                    <Route
                        path={RoutesEnum.IMPROVISATION}
                        element={<ImprovisationPage />}
                    />
                    <Route
                        path={RoutesEnum.LEARNING}
                        element={<LearningPage />}
                    />

                    <Route
                        path={RoutesEnum.RECODING}
                        element={<RecodingPage />}
                    />

                    <Route
                        path={RoutesEnum.REPETITION}
                        element={<RepetitionPage />}
                    >
                        <Route index={true} element={<RepetitionStart />} />
                        <Route index={false} path="about" element={<About />} />
                        <Route
                            index={false}
                            path="setup"
                            element={<RecodingSetup />}
                        />
                    </Route>
                    <Route
                        path={RoutesEnum.SETTINGS}
                        element={<SettingsPage />}
                    >
                        <Route index={true} element={<SettingsStart />} />
                        {/* <Route index={false} element={<SettingsStart />} /> */}
                    </Route>
                </Route>

                <Route
                    path={RoutesEnum.ALL}
                    element={<Navigate to={RoutesEnum.ROOT} />}
                />

                <Route path={RoutesEnum.TEST_GRAPH} element={<TestPage />} />
            </Routes>
        </div>
    );
}


.\src\index.tsx
---------------
import React from "react";
import ReactDOM from "react-dom/client";

import "./fonts";
import "./styles/index.scss";

import App from "./App";

import { BrowserRouter } from "react-router-dom";
import { Provider } from "react-redux";
import { store } from "./store";

import AuthMiddleware from "./components/tools/AuthMiddleware";

const root = ReactDOM.createRoot(
    document.getElementById("root") as HTMLElement
);
root.render(
    <React.StrictMode>
        <Provider store={store}>
            <BrowserRouter>
                <AuthMiddleware>
                    <App />
                </AuthMiddleware>
            </BrowserRouter>
        </Provider>
    </React.StrictMode>
);


.\src\react-app-env.d.ts
------------------------



.\src\setupTests.ts
-------------------




import "@testing-library/jest-dom";


.\src\@adapters\Graphs\clarity.ts
---------------------------------
import { off } from "process";
import GraphColor from "../../models/graph/_colors";
import { BrickedGraphItem } from "../../models/graph/bricked";
import { ClarityDataItem } from "../../models/graph/clarity";

const convertClarityData = (raws: ClarityDataItem[]): BrickedGraphItem[] => {
    const result = [] as BrickedGraphItem[];

    let middleOffset: number = 50; // middle of graph

    for (let i = 0; i < raws.length; i++) {
        const raw = raws[i];
        const type = raw.type === "basic" ? "solid" : "thin";
        const offset = type === "solid" ? -8 : -3; // for center on center line

        if (i !== 0) {
            middleOffset =
                middleOffset -
                raw.value * (raws[i - 1].type === "basic" ? 16 : 11);
        }
        const diff = middleOffset + offset;
        const top = `${diff < 0 ? 0 : diff > 74 ? 74 : diff}%`;

        const color =
            raw.type === "basic"
                ? GraphColor.DARKGRAY
                : raw.type === "sounds"
                ? GraphColor.RED
                : GraphColor.BLUE;

        const item = {
            id: raw.seq_number,
            text: raw.text,
            startTime: raw.time_start,
            endTime: raw.time_end,
            top,
            type,
            color,
        } as BrickedGraphItem;

        result.push(item);
    }
    return result;
};

export default convertClarityData;


.\src\@adapters\Graphs\confidence.ts
------------------------------------
import GraphColor from "../../models/graph/_colors";
import { BrickedGraphItem } from "../../models/graph/bricked";
import { ConfidenceDataItem } from "../../models/graph/confidence";

const getColor = (value: number) => {
    switch (value) {
        case 0:
            return GraphColor.RED;
        case 1:
            return GraphColor.GRAY;
        case 2:
            return GraphColor.GREEN;
        default:
            return GraphColor.GRAY;
    }
};

const getTop = (value: number) => {
    const OFFSET = 14;
    const INIT = 28;
    switch (value) {
        case 2:
            return INIT;
        default:
            return INIT + OFFSET;
        case 1:
            return OFFSET * 2 + INIT;
    }
};

const convertConfidenceData = (raw: ConfidenceDataItem): BrickedGraphItem => ({
    // id: raw.seq_number,
    id: raw.time_sec,
    text: raw.text,
    // value: raw.value, /// REMOVE THIS
    // top: `${getTop(raw.value)}%`,
    top: `${getTop(raw.confidence)}%`,
    // startTime: raw.time_start,
    startTime: raw.time_sec,
    // endTime: raw.time_end,
    endTime: raw.time_sec + 10,
    // color: getColor(raw.value),
    color: getColor(raw.confidence),
});
export default convertConfidenceData;


.\src\@adapters\Graphs\congruence.ts
------------------------------------
import { CongruenceItem } from "../../models/graph/congruence";

export enum EMOTION {
    ANGRY = "angry",
    HAPPINESS = "happiness",
    NEUTRAL = "neutral",
}

/**
 * Fills time gaps in data received from the server
 * @param values - array of CongruenceItem( time_start: number, value: number,type: string, time_end:number)
 * @returns CongruenceItem[] without time gaps
 */
function convertCongruenceValues(values: CongruenceItem[]) {
    let previosTime = 0;
    const step = 10;

    return values
        .map((el) => {
            if (el.time_start === previosTime) {
                previosTime = el.time_end;
                return el;
            } else {
                let diff = previosTime - el.time_start;
                if (diff === step) {
                    previosTime = el.time_end;
                    return el;
                } else if (el.type === EMOTION.NEUTRAL) {
                    const tempElem = {
                        time_start: previosTime,
                        value: 0,
                        type: EMOTION.NEUTRAL,
                        time_end: el.time_end,
                    };
                    previosTime = el.time_end;
                    return tempElem;
                } else {
                    const tempElem = [
                        {
                            time_start: previosTime,
                            value: 0,
                            type: EMOTION.NEUTRAL,
                            time_end: el.time_start,
                        },
                        el,
                    ];
                    previosTime = el.time_end;
                    return tempElem;
                }
            }
        })
        .flat(2);
}

/**
 * Removes duplicates of elements with the neutral type, combining time intervals
 * @param values - array of CongruenceItem( time_start: number, value: number,type: string, time_end:number)
 * @returns CongruenceItem[] without neutral duplicates
 */
function combiningNeutralTypes(values: CongruenceItem[]) {
    let previousType: string = EMOTION.NEUTRAL;
    let previousTimeStart = 0;
    let resultArray: CongruenceItem[] = [];

    const lastTimeStart = values.at(-1)!.time_start;

    let tempItem = {
        time_start: 0,
        value: 0,
        type: EMOTION.NEUTRAL as string,
        time_end: 0,
    };

    values.forEach((el) => {
        if (el.type === EMOTION.NEUTRAL) {
            let tempTimeStart =
                previousType === EMOTION.NEUTRAL
                    ? previousTimeStart
                    : el.time_start;
            previousTimeStart = tempTimeStart;

            tempItem = {
                time_start: tempTimeStart,
                value: el.value,
                type: el.type,
                time_end: el.time_end,
            };

            if (el.time_start === lastTimeStart) resultArray.push(tempItem);
        } else {
            if (
                previousType !== el.type &&
                previousType === EMOTION.NEUTRAL &&
                tempItem.time_end !== 0
            ) {
                resultArray.push(tempItem);
                tempItem = {
                    time_start: 0,
                    value: 0,
                    type: EMOTION.NEUTRAL as string,
                    time_end: 0,
                };
            }
            resultArray.push(el);
            previousTimeStart = el.time_start;
        }
        previousType = el.type;
    });
    return resultArray;
}

export default function convertDataCongruenceFromBackIntoGraph(values: CongruenceItem[]) {
    let resultArray = convertCongruenceValues(values);
    return combiningNeutralTypes(resultArray);
}

.\src\@adapters\Graphs\connectivity.ts
--------------------------------------
import GraphColor from "../../models/graph/_colors";
import { BrickedGraphItem } from "../../models/graph/bricked";
import { ConnectivityDataItem } from "../../models/graph/connectivity";

const getColor = (value: number) => {
    switch (value) {
        case 0:
            return GraphColor.RED;
        case 1:
            return GraphColor.GRAY;
        case 2:
            return GraphColor.GREEN;
        default:
            return GraphColor.GRAY;
    }
};

const getTop = (value: number) => {
    const OFFSET = 14;
    const INIT = 28;
    switch (value) {
        case 2:
            return INIT;
        case 0:
            return OFFSET * 2 + INIT;
        default:
            return INIT + OFFSET;
    }
};

const convertConnectivityData = (
    raw: ConnectivityDataItem
): BrickedGraphItem => ({
    id: raw.seq_number,
    text: raw.text,
    // value: raw.value, /// REMOVE THIS
    top: `${getTop(raw.value)}%`,
    startTime: raw.time_start,
    endTime: raw.time_end,
    color: getColor(raw.value),
});
export default convertConnectivityData;


.\src\@adapters\Graphs\emotionality.ts
--------------------------------------
import {
    EmotionalityChannel,
    EmotionalityDataItem,
    EmotionalityItem,
} from "../../models/graph/emotionality";

const convertEmotionalityData = (
    items: EmotionalityDataItem[],
    channel: EmotionalityChannel,
    emotions: EmotionalityItem[]
) =>
    items.map((item) =>
        Object.fromEntries(
            /* Формируем новый объект из списка требуемых эмоций */
            emotions.map((emotion) => [emotion, item[channel][emotion]])
            /* [channel]: Берем значение только выбранного канала */
        )
    );

export default convertEmotionalityData;


.\src\@adapters\Graphs\energy.ts
--------------------------------
import { EnergyDataItem, EnergyType } from "../../models/graph/energy";

export default function convertEnergyData(
    items: EnergyDataItem[],
    param: EnergyType | null = null
) {
    const filterList = param ? [param] : Object.values(EnergyType);

    return items.map((el) =>
        Object.fromEntries(filterList.map((type) => [type, el[type]]))
    );
}


.\src\@adapters\Graphs\expressiveness.ts
----------------------------------------
import {
    ExpressivenessDataItem,
    ExpressivenessType,
} from "../../models/graph/expressiveness";

export default function convertExpressivenessData(
    items: ExpressivenessDataItem[],
    param: ExpressivenessType | ExpressivenessType[] | null
) {
    const filterList = Array.isArray(param)
        ? param
        : param !== null
        ? [param]
        : Object.values(ExpressivenessType);

    return items.map((el) =>
        Object.fromEntries(filterList.map((type) => [type, el[type]]))
    );
}


.\src\@adapters\Graphs\informative.ts
-------------------------------------
import GraphColor from "../../models/graph/_colors";
import { BrickedGraphItem } from "../../models/graph/bricked";
import { InformativeDataItem } from "../../models/graph/informative";

const convertInformativeData = (
    raw: InformativeDataItem
): BrickedGraphItem => ({
    id: raw.seq_number,
    text: raw.text === 'Text for sounds' ? "неречевые звуки" : raw.text === 'Text for pauses' ? "пустые паузы" : raw.text,
    top: "42%",
    startTime: raw.time_start,
    endTime: raw.time_end,
    /// ["main-text","unconfirmed","non-speech","parasite-words",]
    color:
        raw.type === "main-text"
            ? GraphColor.DARKGRAY
            : raw.type === "unconfirmed"
                ? GraphColor.ORANGE
                : raw.type === "parasite-words"
                    ? GraphColor.BLUE
                    : raw.type === "parasite"
                        ? GraphColor.PURPLE
                        : raw.type === "informative"
                            ? GraphColor.GRAY
                            : raw.type === "empty"
                                ? GraphColor.ORANGE
                                : raw.type === "sounds"
                                    ? GraphColor.RED
                                    : raw.type === "pauses"
                                    ? GraphColor.ORANGE
                                    : GraphColor.GRAY,
});

export default convertInformativeData;


.\src\@adapters\Graphs\monotony.ts
----------------------------------
import {
    NonMonotonyDataItem,
    NonMonotonyType,
} from "../../models/graph/monotony";

export function convertMonotonyData(
    items: NonMonotonyDataItem[],
    param: NonMonotonyType | null = null
) {
    const filterList = param ? [param] : Object.values(NonMonotonyType);

    return items.map((el) =>
        Object.fromEntries(filterList.map((type) => [type, el[type]]))
    );
}

export function dependenceMonotonyData(
    param: NonMonotonyType | null = null,
    average: number
): {
    withMedian: boolean;
    min: number;
    max: number;
    descriptionY: number[];
    average: number;
} {
    if (param === NonMonotonyType.RATE) {
        return {
            withMedian: true,
            min: 0,
            max: 250,
            descriptionY: [0, 42, 83, 167, 208, 250],
            average: 100 - average,
        };
    } else if (param === NonMonotonyType.VOLUME) {
        return {
            withMedian: true,
            min: 0,
            max: 120,
            descriptionY: [0, 30, 60, 90, 120],
            average: 100 - average,
        };
    } else if (param === NonMonotonyType.TONE) {
        return {
            withMedian: false,
            min: -1,
            max: 1,
            descriptionY: [-1, -0.5, 0, 0.5, 1],
            average: 100 - average,
        };
    } else {
        return {
            withMedian: false,
            min: 0,
            max: 1,
            descriptionY: [0, 0.2, 0.4, 0.6, 0.8, 1],
            average: 100 - average,
        };
    }
}


.\src\@adapters\Graphs\total.ts
-------------------------------
import { TotalDataItem, TotalType } from "../../models/graph/total";

export default function convertTotalData(
    values: TotalDataItem,
    param: TotalType | null = null
) {
    return Object.values(TotalType);
}


.\src\@adapters\Time\convertDays.ts
-----------------------------------
export const addDaysToDate = function (days: number, date = new Date()) {
    var newDate = new Date(date.valueOf());
    newDate.setDate(date.getDate() + days);
    return newDate;
};

.\src\@adapters\Time\convertSeconds.ts
--------------------------------------
export default function convertSecondsIntoTime(seconds: number): string {
    if (seconds < 10) {
        return `00:0${seconds.toFixed(0)}`;
    } else if (seconds < 60) {
        return `00:${seconds.toFixed(0)}`;
    } else if (seconds < 600 && seconds % 60 !== 0) {
        return `0${Math.floor(seconds / 60)}:${
            seconds % 60 < 10
                ? "0" + (seconds % 60).toFixed(0)
                : (seconds % 60).toFixed(0)
        }`;
    } else if (seconds < 600 && seconds % 60 === 0) {
        return `0${Math.floor(seconds / 60)}:${(seconds % 60).toFixed(0)}0`;
    } else {
        return `${Math.floor(seconds / 60)}:${(seconds % 60).toFixed(0)}`;
    }
}

export function convertSecondIntoPrettyDuration(seconds: number): string {
    return `${Math.floor((seconds) / 60)} минут ${Math.floor(seconds % 60)} секунд`;
}


.\src\components\About\index.tsx
--------------------------------

import { useParams } from 'react-router-dom'
import AnalysisReport from '../Report';

export default function About() {
  const params = useParams();
  const idVideo = params.id;
  return (
    <div>
    <div>video: {idVideo}</div>
    <div><AnalysisReport></AnalysisReport></div>
    </div>
  )
}


.\src\components\AimBlock\index.tsx
-----------------------------------
import { Fragment, createContext, useEffect, useRef, useState } from "react";
import { useAppDispatch, useAppSelector } from "../../hooks/redux";
import "react-tooltip/dist/react-tooltip.css";

import AimItem from "./AimItem";
import ModalWindow from "../ModalWindow/ModalWindow";

import Button from "../ui-kit/Button";
import { ForwardedCheckBoxItem } from "../CheckboxQuestion/CheckboxItem";
import {
    useGetUserPurposesQuery,
    useLazyGetUserPurposesQuery,
    useSendUserPurposeMutation,
} from "../../store/api/diary";
import { AIM_PARAMETERS, IAimItem, ISendUserPurpose } from "../../models/aim";

import { updateUserAims } from "../../store/slices/diary";

import { cn } from "@bem-react/classname";
import { ReactSVG } from "react-svg";

import addIcon from "./icons/add-square.svg";
import gpsIcon from "./icons/gps.svg";

import "./style.scss";

export const NewAimContext = createContext({
    hasNewAim: false,
    updateAims: (() => {}) as Function,
});

export default function AimBlock() {
    const cnAimBlock = cn("AimBlock");
    const dispatch = useAppDispatch();

    /* ------------------------------ AIMS ------------------------------ */

    const allUsersPurposes = useGetUserPurposesQuery();
    const [allPurposes, setAllPurposes] = useState<IAimItem[]>();

    const countPurposes: number = allPurposes ? allPurposes.length : 0;

    const storePurposes = useAppSelector((state) => state.diary.userAims);

    useEffect(() => {
        if (
            allUsersPurposes &&
            allUsersPurposes.data &&
            allUsersPurposes.data.data
        ) {
            console.log("allUsersPurposes",allUsersPurposes)
            if (storePurposes.length > 0) {
                if (storePurposes[0].title.length === 0) {
                    const purposes = [
                        ...allUsersPurposes.data!.data!.purposes,
                    ].reverse();
                    setAllPurposes(purposes);
                    dispatch(updateUserAims(purposes));
                } else {
                    setAllPurposes(storePurposes);
                }
            }
        }
    }, [allUsersPurposes]);

    /* ------------------------------ AIMS FOR MODAL WINDOW ------------------------------ */
    const existedPurposes = [
        {
            id: "1",
            title: "Повысить уверенность в себе и в своих навыках публичного выступления",
            isExist: false,
            another: false,
            params: [
                AIM_PARAMETERS.confidence,
                AIM_PARAMETERS.energy,
                AIM_PARAMETERS.eloquence,
                AIM_PARAMETERS.informative,
                AIM_PARAMETERS.expressiveness,
            ],
        },
        {
            id: "2",
            title: "Улучшить качество презентаций в рамках учебных и профессиональных мероприятий",
            isExist: false,
            another: false,
            params: [
                AIM_PARAMETERS.consistency,
                AIM_PARAMETERS.informative,
                AIM_PARAMETERS.non_monotony,
                AIM_PARAMETERS.clarity,
                AIM_PARAMETERS.parasite_words,
            ],
        },
        {
            id: "3",
            title: "Подготовиться к важному профессиональному или личному мероприятию, такому как конференция, выставка, презентация проекта",
            isExist: false,
            another: false,
            params: [
                AIM_PARAMETERS.consistency,
                AIM_PARAMETERS.unity_of_style,
                AIM_PARAMETERS.non_monotony,
                AIM_PARAMETERS.confidence,
                AIM_PARAMETERS.aggressiveness_coefficient,
            ],
        },
        {
            id: "4",
            title: "Опишите цель использования сервиса",
            isExist: false,
            another: true,
            params: [],
        },
    ];

    const [standartPurposes, setStandertPurposes] = useState(existedPurposes);

    useEffect(() => {
        if (allPurposes) {
            const userAimTitles = allPurposes.map((el) => el.title);
            // const existedAimsTitles = existedAims.map(el=>el.title);
            setStandertPurposes(
                existedPurposes.map((el) => {
                    return { ...el, isExist: userAimTitles.includes(el.title) };
                }),
            );
        }
    }, [allPurposes]);

    const [choosenAim, setChoosenAim] = useState(0);

    /* ------------------------------ UPDATING AIMS AFTER ADDING NEW AIMS ------------------------------ */

    const [hasNewAim, setHasNewAim] = useState(false); // добавить реверс для массива

    const [getNewAims, newAims] = useLazyGetUserPurposesQuery();

    const updateAims = async () => {
        setHasNewAim(false);
        await getNewAims();
    };

    useEffect(() => {
        if (newAims && newAims.data && newAims.isSuccess) {
            if (newAims.data.success && newAims.data.data) {
                const purposes = [...newAims.data!.data!.purposes].reverse();
                setAllPurposes(purposes);
                dispatch(updateUserAims(purposes));
            }
        }
    }, [newAims]);

    /* ------------------------------ MODAL WINDOW ------------------------------ */

    const [isModal, setIsModal] = useState(false);

    const closeModal = () => {
        setCheckedState(new Array(existedPurposes.length).fill(false));
        setIsModal(false);
    };

    const showModal = () => {
        setIsModal(true);
    };

    const textRef = useRef<HTMLInputElement>(null);

    /* ------------------------------ MODAL WINDOW VALUE ------------------------------ */

    const [sendPurposeRequest, sendPurposeResponse] =
        useSendUserPurposeMutation();

    const { isSuccess, isError } = sendPurposeResponse;

    const [checkedState, setCheckedState] = useState<Array<boolean>>(
        new Array(existedPurposes.length).fill(false),
    );

    const changeCheckedState = (position: number) => {
        const updatedCheckedState = checkedState.map((item, index) =>
            index === position ? !item : item,
        );
        setCheckedState(updatedCheckedState);
    };

    // Добавить определенные параметры
    const saveChoosedAims = () => {
        let userAimTitle: string = "";
        let commonAims: ISendUserPurpose[] = [];

        checkedState.forEach((el, idx) => {
            if (el) {
                if (
                    existedPurposes[idx].title === existedPurposes.at(-1)?.title
                ) {
                    // опишите цель использования сервиса
                    userAimTitle =
                        textRef && textRef.current
                            ? textRef.current!.value
                            : "";
                } else {
                    commonAims.push({
                        title: existedPurposes[idx].title,
                        params: existedPurposes[idx].params as AIM_PARAMETERS[],
                    });
                }
            }
        });

        console.log("send commonAims", commonAims)

        if (userAimTitle.length > 0) {

            console.log("userAimTitle.length > 0", userAimTitle)
            const resultAims = {
                title: userAimTitle,
                is_done: false,
                progress: 0,
                created_at: "",
                tasks: [],
                parameters: [],
            };

            dispatch(
                updateUserAims(
                    allPurposes ? [resultAims, ...allPurposes] : [resultAims],
                ),
            );

            setAllPurposes((prev) =>
                prev ? [resultAims, ...prev] : [resultAims],
            );

            setHasNewAim(true);
        }

        if (commonAims.length > 0) {
            commonAims.forEach(
                async (purpose) => await sendPurposeRequest(purpose),
            );
        }

        setChoosenAim(0);
        setCheckedState(new Array(existedPurposes.length).fill(false));
        closeModal();
    };

    useEffect(() => {
        if (isSuccess) {
            console.log("isSuccess")
            console.log( sendPurposeResponse)
            const getData = async () => await getNewAims();
            getData();
        }
    }, [isSuccess]);

    /* ------------------------------ CODE ------------------------------ */

    return (
        <div className={cnAimBlock()}>
            <div className={cnAimBlock("row")}>
                <div className={cnAimBlock("title")}>
                    <ReactSVG src={gpsIcon} />
                    Цели
                </div>
                <div className={cnAimBlock("aims-count")}>
                    {countPurposes > 0 &&
                        new Array(countPurposes).fill(1).map((el, i) => (
                            <div
                                key={el + i}
                                className={cnAimBlock("aims-count-circle", {
                                    active: choosenAim === el + i - 1,
                                })}
                                onClick={() => setChoosenAim(el + i - 1)}
                            >
                                {el + i}
                            </div>
                        ))}
                </div>
                <div className={cnAimBlock("grow")}></div>
                <div className={cnAimBlock("btn")} onClick={showModal}>
                    <ReactSVG src={addIcon} />
                    Добавить цель
                </div>
            </div>

            <NewAimContext.Provider value={{ hasNewAim, updateAims }}>
                {allPurposes &&
                    allPurposes.map((el, i) => (
                        <Fragment key={i}>
                            {i === choosenAim ? <AimItem purpose={el} /> : null}
                        </Fragment>
                    ))}
            </NewAimContext.Provider>

            {countPurposes === 0 && (
                <span className={cnAimBlock("empty-msg")}>Целей еще нет</span>
            )}
            <ModalWindow
                title="Выберите цель или введите собственную"
                icon={gpsIcon}
                isVisible={isModal}
                onClose={() => closeModal()}
            >
                <div className={cnAimBlock("modal")}>
                    {standartPurposes.map((el, idx) => (
                        <ForwardedCheckBoxItem
                            key={idx + el.title}
                            id={"" + idx}
                            value={""}
                            name={""}
                            checked={checkedState[idx]}
                            handleOnChange={() => changeCheckedState(idx)}
                            isAnother={el.another}
                            title={el.title}
                            disabled={el.isExist}
                            ref={el.another ? textRef : undefined}
                        >
                            <span>
                                <span
                                    className={cnAimBlock(
                                        "modal-checkbox-text",
                                        { strikethrough: el.isExist },
                                    )}
                                >
                                    {el.title}
                                </span>
                                {el.isExist && (
                                    <span
                                        className={cnAimBlock(
                                            "modal-checkbox-text-blue",
                                        )}
                                    >
                                        Цель уже добавлена
                                    </span>
                                )}
                            </span>
                        </ForwardedCheckBoxItem>
                    ))}
                    <Button
                        className={cnAimBlock("modal-btn")}
                        onClick={saveChoosedAims}
                    >
                        <ReactSVG src={addIcon} />
                        <span className={cnAimBlock("modal-btn-text")}>
                            Добавить цель
                        </span>
                    </Button>
                </div>
            </ModalWindow>
        </div>
    );
}


.\src\components\AimBlock\style.scss
------------------------------------
.AimBlock {
    &-row {
        display: flex;
        flex-flow: row nowrap;
        gap: 10px;
        align-items: center;
        justify-content: start;
        margin: 10px 0;
    }

    &-title {
        display: flex;
        flex-flow: row nowrap;
        gap: 8px;
        align-items: center;
        justify-content: center;
        margin-right: 10px;
        color: #37476A;
        font-weight: 600;
        font-size: 16px;
        font-family: "Montserrat Alternates";
    }

    &-aims-count {
        display: flex;
        flex-flow: row nowrap;
        gap: 10px;

        &-circle {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 30px;
            height: 30px;
            color: #7C8EB5;
            font-weight: 600;
            font-size: 20px;
            font-family: "Montserrat Alternates";
            background: rgb(173 185 212 / 50%);
            border-radius: 70px;
            cursor: pointer;

            &_active {
                color: #fff;
                background: #2477F4;
            }
        }
    }

    &-grow {
        flex-grow: 1;

    }

    &-btn {
        display: flex;
        flex-flow: row nowrap;
        gap: 10px;
        align-items: center;
        justify-content: center;
        padding: 6px 8px 6px 12px;
        color: #FFF;
        font-weight: 600;
        font-size: 14px;
        font-family: "Montserrat Alternates";
        background: #FFB800;
        border-radius: 8px;
        cursor: pointer;

    }



    &-steps {
        display: flex;
        flex-flow: row nowrap;
        gap: 10px;
        justify-content: space-around;
        width: 100%;
        margin: 10px 0;

        &-item {
            flex-grow: 1;
            padding: 4px;
            color: #7C8EB5;
            font-weight: 500;
            font-size: 20px;
            font-family: "Onest";
            text-align: center;
            border-radius: 8px;

            &_active {
                color: #2477F4;
                background: rgb(36 119 244 / 10%);
            }
        }
    }

    &-modal {
        display: flex;
        flex-flow: column nowrap;
        gap: 10px;
        align-items: center;
        justify-content: center;
        max-width: 800px;
        padding: 0 16px;

        &-checkbox {
            &-text {
                color: #7C8EB5;
                font-weight: 500;
                font-size: 16px;
                font-family: "Montserrat Alternates";
                font-style: normal;
                line-height: normal;

                &_strikethrough {
                    text-decoration: line-through;
                    opacity: 0.5;
                }

                &-blue {
                    padding: 5px;
                    color: #2477F4;
                    font-weight: 500;
                    font-size: 12px;
                    font-family: "Montserrat Alternates";
                    font-style: normal;
                    line-height: normal;
                    text-decoration: none !important;
                    opacity: 1;
                }
            }


        }

        &-btn {
            display: flex;
            flex-flow: row nowrap;
            gap: 8px;
            align-items: center;
            justify-content: center;
            width: 100%;
            height: 40px;
            border-radius: 9px;

            svg {
                display: flex;
                flex-flow: row nowrap;
                align-items: center;
                justify-content: center;
            }


            &-text {
                font-weight: 500;
                font-size: 16px;
                font-family: "Montserrat Alternates";
            }

        }
    }

    &-empty-msg {
        padding: 12px;
        color: #7C8EB5;
        font-weight: 500;
        font-size: 16px;
        font-family: "Montserrat Alternates";
        font-style: normal;
        line-height: normal;
    }

}

.\src\components\AimBlock\AimItem\index.tsx
-------------------------------------------
import { Fragment, useContext, useEffect, useMemo, useState } from "react";

import { Tooltip } from "react-tooltip";

import "react-tooltip/dist/react-tooltip.css";
import "./style.scss";
import { cn } from "@bem-react/classname";

import { ReactSVG } from "react-svg";

import arrowThin from "../icons/chevron-down.svg";
import arrowNorm from "../icons/arrow-down.svg";
import worningIcon from "../icons/danger.svg";
import tickIcon from "../icons/more-circle.svg";
import tickDone from "../icons/tick-circle.svg";
import trashIcon from "../icons/trash.svg";
import {
    useDeleteUserPurposeMutation,
    useLazyGetParamsQuery,
    useSendUserPurposeMutation,
} from "../../../store/api/diary";
import {
    AIM_PARAMETERS,
    IAimItem,
    IAimParameters,
    ITaskItem,
} from "../../../models/aim";
import ProgressBar from "../../Graphs/Progressbar";
import { NewAimContext } from "..";

import ModalWindow from "../../ModalWindow/ModalWindow";
import Button from "../../ui-kit/Button";


type Props = {
    purpose: IAimItem;
};

function getCurrentStep(tasks: ITaskItem[]): number {
    let maxStep = 0;
    let minStep = tasks.length;
    let outstandingTasks: number[] = [];

    tasks.forEach((el) => {
        if (!el.is_done && !outstandingTasks.includes(el.step)) {
            minStep = el.step < minStep ? el.step : minStep;
            outstandingTasks.push(el.step);
        }
        maxStep = el.step > maxStep ? el.step : maxStep;
    });
    return outstandingTasks.length > 0 ? minStep : maxStep;
}

const MAX_PARAMS = 5; // maximum parameters that can be tracked for a purpose

export default function AimItem({ purpose }: Props) {
    const cnAimItem = cn("AimItem");

    const { hasNewAim, updateAims } = useContext(NewAimContext);

    /* ------------------------------ AIM ------------------------------ */

    const statusAim = purpose
        ? purpose.is_done
            ? "завершено"
            : "в процессе"
        : "";
    const typeAim = "личная цель";
    const messageAim = "выберите параметры для оценки цели";

    const titleAim = purpose ? purpose.title : "";
    const phraseAim = "Мотивирующая фраза, зависящая от прогресса!";

    const [sendPurposeRequest, sendPurposeResponse] =
        useSendUserPurposeMutation();

    const { isSuccess, isError } = sendPurposeResponse;

    /* ------------------------------ DELETED ------------------------------ */

    const [deleteModal, setDeleteModal] = useState(false);
    const [continueDeleting, setContinueDeleting] = useState(false);

    const showDeleteModal = () => {
        setDeleteModal(true);
    };
    const closeDeleteModal = () => {
        setDeleteModal(false);
    };

    const [deletePurposeRequest, deletePurposeResponse] =
        useDeleteUserPurposeMutation();

    // const { isSuccess, isError } = sendPurposeResponse;

    const deleteAim = async () => {
        if (purpose.id) {
            await deletePurposeRequest(purpose.id);
        }
        window.location.reload();
    };

    useEffect(() => {
        if (deletePurposeResponse.isSuccess) {
            console.log(deletePurposeResponse);
        }
        if (deletePurposeResponse.isError) {
            console.log(deletePurposeResponse);
        }
    }, [deletePurposeResponse]);

    /* ------------------------------ STEPS ------------------------------ */

    const count_steps = useMemo(
        () =>
            purpose
                ? purpose.tasks
                      .map((el) => el.step)
                      .filter((el, i, ar) => ar.indexOf(el) === i)
                      .sort()
                : [],
        [purpose],
    );

    const choosedStep = getCurrentStep(purpose.tasks);

    /* ------------------------------ TASKS ------------------------------ */

    const allTasks = purpose ? purpose.tasks : [];

    const [isShowTasks, setIsShowTasks] = useState(false);
    const titleForBtn = isShowTasks ? "Свернуть" : "Развернуть цель";

    /* ------------------------------ PARAMS ------------------------------ */

    const [getParams, resultParams] = useLazyGetParamsQuery();
    const [listParams, setListParams] = useState<IAimParameters>();

    useEffect(() => {
        if (resultParams && resultParams.data) {
            
            setListParams(resultParams.data!.data!);
            setCheckedParams([]);
        }
    }, [resultParams]);

    /* ------------------------------ SAVED PARAMS ------------------------------ */

    const [canSave, setCanSave] = useState(
        count_steps.length > 0 ? false : true,
    );

    useEffect(() => {
        if (count_steps && count_steps.length === 0) return setCanSave(true);
        return setCanSave(false);
    }, [count_steps]);

    const [isShowParams, setIsShowParams] = useState(true);

    const [checkedParams, setCheckedParams] = useState<Array<string>>([]);

    // for existed params from user aim
    useEffect(() => {
        if (listParams) {
            Object.entries(listParams).forEach(([key, value]) => {
                const rest = purpose.parameters.filter(
                    (el) => el.title === value.title,
                );
                if (rest.length > 0) {
                    setCheckedParams((prev) => [...prev, key]);
                }
            });
        }
    }, [listParams]);

    const changeCheckedState = (el: string) => {
        const indexParam = checkedParams.findIndex((purpose) => purpose === el);
        if (indexParam !== -1) {
            const updatedCheckedState = [
                ...checkedParams.slice(0, indexParam),
                ...checkedParams.slice(indexParam + 1),
            ];
            setCheckedParams(updatedCheckedState);
        } else {
            if (checkedParams.length < MAX_PARAMS) {
                setCheckedParams([...checkedParams, el]);
            }
        }
    };

    const handleOnChange = (elem: string) => {
        if (canSave) changeCheckedState(elem);
    };

    const saveParams = async () => {
        await sendPurposeRequest({
            title: purpose.title,
            params: checkedParams as AIM_PARAMETERS[],
        });
    };

    useEffect(() => {
        if (isSuccess) {
            updateAims();
        }
    }, [isSuccess]);

    useEffect(() => {
        if (isError) alert("Something was wrong!");
    }, [isError]);

    useEffect(() => {
        if (hasNewAim) {
            setIsShowTasks(false);
            setCheckedParams([]);
        }
    }, [hasNewAim]);

    return (
        <div className={cnAimItem()}>
            <div className={cnAimItem("header")}>
                <div className={cnAimItem("row")}>
                    <div className={cnAimItem("header-status")}>
                        {statusAim}
                    </div>
                    <div className={cnAimItem("header-type")}>{typeAim}</div>
                    {count_steps.length < 1 && (
                        <div className={cnAimItem("header-message")}>
                            <span className={cnAimItem("header-message-text")}>
                                <ReactSVG src={worningIcon} />
                                {messageAim}
                            </span>
                        </div>
                    )}

                    <div
                        className={cnAimItem("header-btn-show")}
                        onClick={() => {
                            setIsShowTasks((prev) => !prev);
                            getParams(null, true);
                        }}
                    >
                        {titleForBtn}
                        <ReactSVG
                            src={arrowThin}
                            className={cnAimItem("header-btn-show-icon", {
                                rotated: isShowTasks,
                            })}
                        />
                    </div>
                    <div
                        className={cnAimItem("header-btn-trash")}
                        onClick={() => showDeleteModal()}
                    >
                        <ReactSVG
                            src={trashIcon}
                            className={cnAimItem("header-btn-trash-icon")}
                        />
                    </div>
                </div>
                <div className={cnAimItem("row")}>
                    <div className={cnAimItem("header-title")}>{titleAim}</div>
                </div>
                <div className={cnAimItem("row")}>
                    <div className={cnAimItem("header-phrase")}>
                        {phraseAim}
                    </div>
                </div>
                <div className={cnAimItem("row")}>
                    {purpose &&
                        count_steps.length > 0 &&
                        count_steps.map((el, idx) => {
                            const maxForStep = Math.floor(
                                100 / count_steps.length,
                            );
                            const prevMax = maxForStep * idx;
                            const currentMax = maxForStep * (idx + 1);
                            const currentProgress = purpose.progress;

                            return (
                                <ProgressBar
                                    completed={Math.ceil(
                                        currentProgress >= currentMax
                                            ? maxForStep
                                            : currentProgress - prevMax > 0
                                            ? currentProgress - prevMax
                                            : 0,
                                    )}
                                    maxValue={maxForStep}
                                    key={idx}
                                />
                            );
                        })}
                </div>
            </div>
            {isShowTasks && (
                <>
                    {count_steps.length > 0 && (
                        <div>
                            <div className={cnAimItem("row")}>
                                <div className={cnAimItem("steps")}>
                                    {count_steps.map((el, idx) => (
                                        <div
                                            key={idx}
                                            className={cnAimItem("steps-item", {
                                                active: choosedStep === el,
                                            })}
                                        >
                                            {el} шаг
                                        </div>
                                    ))}
                                </div>
                            </div>
                            <div className={cnAimItem("row")}>
                                <div className={cnAimItem("warning")}>
                                    <ReactSVG src={worningIcon} />
                                    Все что не тренируется, то отмирает! Имей в
                                    виду, твой уровень будет понижаться без
                                    регулярных репетиций.
                                </div>
                            </div>
                            <div className={cnAimItem("task-block")}>
                                <span className={cnAimItem("header-phrase")}>
                                    Задачи:
                                </span>
                                {allTasks &&
                                    allTasks.map((el, idx) => (
                                        <Fragment key={idx}>
                                            {choosedStep === el.step ? (
                                                <div
                                                    className={cnAimItem(
                                                        "task-block-item",
                                                        {
                                                            done: el.is_done,
                                                        },
                                                    )}
                                                >
                                                    <ReactSVG
                                                        src={
                                                            el.is_done
                                                                ? tickDone
                                                                : tickIcon
                                                        }
                                                    />
                                                    <span>
                                                        {el.description}
                                                    </span>
                                                </div>
                                            ) : undefined}
                                        </Fragment>
                                    ))}
                            </div>
                        </div>
                    )}
                    {count_steps.length === 0 && (
                        <div className={cnAimItem("error-block")}>
                            <span className={cnAimItem("header-phrase")}>
                                Задачи:
                            </span>
                            <div className={cnAimItem("error-block-text")}>
                                Для формирования задач необходимо выбрать
                                параметры, на которых они основаны.
                            </div>
                        </div>
                    )}
                    <div
                        className={
                            cnAimItem("row") + " " + cnAimItem("padding")
                        }
                    >
                        <div
                            className={cnAimItem("params-block-title")}
                            onClick={() => setIsShowParams((prev) => !prev)}
                        >
                            <ReactSVG
                                src={arrowNorm}
                                className={cnAimItem("params-block-arrow", {
                                    rotated: isShowParams,
                                })}
                            />
                            Параметры цели
                        </div>
                        <div className={cnAimItem("params-block-grow")}>
                            {""}
                        </div>

                        {canSave ? (
                            <div
                                className={cnAimItem("params-block-btn")}
                                onClick={saveParams}
                            >
                                Сохранить
                            </div>
                        ) : (
                            <div className={cnAimItem("params-block-message")}>
                                Параметры этой цели изменить нельзя
                            </div>
                        )}
                    </div>
                    {isShowParams && listParams && (
                        <div className={cnAimItem("params-block-grid")}>
                            {listParams &&
                                Object.entries(listParams).map(
                                    ([key, value], idx) => {
                                        return (
                                            <div
                                                key={idx}
                                                className={cnAimItem(
                                                    "params-block-grid-item",
                                                )}
                                            >
                                                <label
                                                    className={cnAimItem(
                                                        "params-block-grid-item-label",
                                                        {
                                                            active: !canSave,
                                                        },
                                                    )}
                                                    data-tooltip-id={
                                                        "params-input-" + key
                                                    }
                                                >
                                                    <input
                                                        type="checkbox"
                                                        className={cnAimItem(
                                                            "params-block-grid-item-input",
                                                        )}
                                                        checked={checkedParams.includes(
                                                            key,
                                                        )}
                                                        name={key}
                                                        value={key}
                                                        onChange={() =>
                                                            handleOnChange(key)
                                                        }
                                                    ></input>
                                                    <span
                                                        className={cnAimItem(
                                                            "params-block-grid-item-span",
                                                        )}
                                                    >
                                                        {value.title}
                                                    </span>
                                                </label>
                                                <Tooltip
                                                    id={"params-input-" + key}
                                                    place={"right-start"}
                                                    noArrow={true}
                                                    className={cnAimItem(
                                                        "tooltip",
                                                    )}
                                                >
                                                    {value.description}
                                                </Tooltip>
                                            </div>
                                        );
                                    },
                                )}
                        </div>
                    )}
                </>
            )}
            <ModalWindow
                isVisible={deleteModal}
                title={"Подтверждение удаления"}
                icon={trashIcon}
                onClose={() => closeDeleteModal()}
            >
                <div className={cnAimItem("modal-title")}>
                    Удалить цель: {purpose.title}?
                </div>
                <div className={cnAimItem("modal-row")}>
                    <Button
                        className={cnAimItem("modal-btn-delete")}
                        onClick={() => deleteAim()}
                    >
                        Удалить
                    </Button>
                    <Button
                        className={cnAimItem("modal-btn-cancel")}
                        onClick={() => closeDeleteModal()}
                    >
                        Отмена
                    </Button>
                </div>
            </ModalWindow>
        </div>
    );
}


.\src\components\AimBlock\AimItem\style.scss
--------------------------------------------
.AimItem {
    width: 100%;
    padding: 16px;
    background-color: #FFF;
    border-radius: 16px;

    &-header {
        display: flex;
        flex-flow: column nowrap;
        gap: 10px;

        &-status {
            padding: 4px 12px;
            color: #FFF;
            font-weight: 700;
            font-size: 16px;
            font-family: "Onest";
            background: #7C8EB5;
            border-radius: 6px;

        }

        &-type {
            padding: 4px 12px;
            color: #7C8EB5;
            font-weight: 500;
            font-size: 16px;
            font-family: "Onest";
            background: rgb(124 142 181 / 20%);
            border-radius: 6px;
        }

        &-message {
            flex-grow: 1;


            &-text {
                display: flex;
                flex-flow: row nowrap;
                gap: 6px;
                padding: 4px 12px;
                color: #F35B60;
                font-size: 16px;
                font-family: "Onest";
                background: rgb(243 91 96 / 5%);
                border-radius: 6px;


            }

        }

        &-btn-trash {
            cursor: pointer;

            &-icon {
                svg {
                    display: flex;
                    align-items: flex-start;
                    justify-content: start;
                }
            }
        }

        &-btn-show {
            display: flex;
            flex-flow: row nowrap;
            flex-grow: 1;
            gap: 10px;
            align-items: center;
            justify-content: flex-end;
            padding: 4px 12px;
            color: #7C8EB5;
            font-weight: 500;
            font-size: 14px;
            font-family: "Montserrat Alternates";
            cursor: pointer;

            &-icon {
                svg {
                    display: flex;
                    align-items: flex-start;
                    justify-content: start;
                }

                &_rotated {
                    transform: rotate(-180deg);


                }

            }

        }

        &-title {
            color: #37476A;
            font-weight: 600;
            font-size: 20px;
            font-family: "Montserrat Alternates";
        }

        &-phrase {
            color: #7C8EB5;
            font-size: 16px;
            font-family: "Onest";
        }

    }

    &-row {
        display: flex;
        flex-flow: row nowrap;
        gap: 10px;
        align-items: flex-start;
        justify-content: start;
    }

    &-padding {
        align-items: center;
        margin: 40px 0 10px;
    }

    &-steps {
        display: flex;
        flex-flow: row nowrap;
        gap: 10px;
        justify-content: space-around;
        width: 100%;
        margin: 10px 0;

        &-item {
            flex-grow: 1;
            padding: 4px;
            color: #7C8EB5;
            font-weight: 500;
            font-size: 20px;
            font-family: "Onest";
            text-align: center;
            border-radius: 8px;

            &_active {
                color: #2477F4;
                background: rgb(36 119 244 / 10%);
            }
        }
    }

    &-warning {
        display: flex;
        flex-flow: row nowrap;
        gap: 6px;
        margin: 8px 0;
        padding: 4px 12px;
        color: #D69C09;
        font-size: 16px;
        font-family: "Onest";
        background: rgb(255 184 0 / 5%);
        border-radius: 6px;
    }

    &-error-block {
        display: flex;
        flex-direction: column;
        gap: 10px;
        align-self: center;
        justify-content: center;
        margin-top: 15px;

        &-text {
            color: #F35B60;
            font-size: 20px;
            font-family: "Onest";
            text-align: center;
        }
    }

    &-task-block {
        display: flex;
        flex-flow: column nowrap;
        gap: 10px;
        align-items: flex-start;
        margin: 15px 0;

        &-item {
            display: flex;
            flex-flow: row nowrap;
            gap: 10px;
            color: #37476A;
            font-size: 20px;
            font-family: "Onest";

            &_done {
                color: #07D07C;
                font-size: 20px;
                font-family: "Onest";
                text-decoration: line-through;
            }

            svg {
                display: flex;
                align-items: flex-start;
                justify-content: start;
                width: 20px;
            }
        }
    }

    &-params-block {
        width: 400px;

        &-arrow {
            svg {
                display: flex;
                align-items: flex-start;
                justify-content: start;
            }

            &_rotated {
                transform: rotate(-180deg);
            }
        }

        &-grow {
            flex-grow: 1;
        }

        &-title {
            display: flex;
            flex-flow: row nowrap;
            gap: 10px;
            align-items: center;
            justify-content: center;
            color: #7C8EB5;
            font-weight: 600;
            font-size: 16px;
            font-family: "Montserrat Alternates";
            cursor: pointer;
        }

        &-message {
            color: #37476A;
            font-weight: 500;
            font-size: 16px;
            font-family: "Montserrat Alternates";
        }

        &-grid {
            display: grid;
            grid-template-rows: repeat(6, 1fr);
            grid-template-columns: 1fr 1fr 1fr;
            gap: 10px 20px;
            align-items: stretch;
            justify-items: start;

            &-item {
                color: #37476A;
                font-weight: 500;
                font-size: 14px;
                font-family: "Montserrat Alternates";
                cursor: pointer;



                &-label {
                    display: inline-block;
                    font-size: 14px;
                    line-height: 21px;
                    vertical-align: top;

                    &_active {
                        cursor: default;
                    }
                }

                &-input {
                    --active: #37476A;
                    --active-inner: #fff;
                    --border: #BBC1E1;
                    --border-hover: #275EFE;
                    --background: #fff;
                    --disabled: #F6F8FF;
                    --disabled-inner: #E1E6F9;

                    position: relative;
                    display: inline-block;
                    width: 21px;
                    height: 21px;
                    margin-right: 8px;
                    vertical-align: top;
                    background: var(--b, var(--background));
                    border: 1px solid var(--bc, var(--border));
                    outline: none;
                    transition: background .3s, border-color .3s, box-shadow .2s;
                    appearance: none;
                    appearance: none;

                    &::after {
                        position: absolute;
                        top: 0;
                        left: 0;
                        display: block;
                        opacity: var(--o, 0);
                        transition: transform var(--d-t, .3s) var(--d-t-e, ease), opacity var(--d-o, .2s);
                        content: '';
                    }

                    &:checked {
                        --o: 1;
                        --b: var(--active);
                        --bc: var(--active);
                        --d-o: .3s;
                        --d-t: .6s;
                        --d-t-e: cubic-bezier(.2, .85, .32, 1.2);
                    }

                    &:disabled {
                        --b: var(--disabled);

                        cursor: not-allowed;
                        opacity: .9;

                        &:checked {
                            --b: var(--disabled-inner);
                            --bc: var(--border);
                        }

                        &+label {
                            cursor: not-allowed;
                        }
                    }
                }

                // внутренности
                &-input {
                    border: 2px solid #B2C2E4;
                    border-radius: 4px;

                    &::after {
                        top: 3px;
                        left: 5px;
                        width: 5px;
                        height: 9px;
                        border: 2px solid var(--active-inner);
                        border-top: 0;
                        border-left: 0;
                        transform: rotate(var(--r, 20deg));
                    }

                    &:checked {
                        --r: 45deg;
                    }
                }

            }
        }

        &-btn {
            gap: 10px;
            padding: 6px 8px 6px 12px;
            color: #FFF;
            font-weight: 600;
            font-size: 14px;
            font-family: "Montserrat Alternates";
            background: #FFB800;
            border-radius: 8px;
            cursor: pointer;
        }
    }

    &-tooltip {
        z-index: 1;
        max-width: 450px;
        padding: 8px 12px;
        color: #37476A;
        font-weight: 500;
        font-size: 12px;
        font-family: "Onest";
        background: #FFF;
        border: 1px solid #7C8EB5;
        border-radius: 12px;
        box-shadow: 2px 2px 12px 0 rgb(173 185 212 / 30%);
    }

    &-modal {
        &-title {
            max-width: 500px;
            font-size: 18px;
            font-style: normal;
            font-weight: 400;
            line-height: normal;
            font-family: Onest;
        }

        &-row {
            display: flex;
            flex-flow: row nowrap;
            padding-top: 20px;
        }

        &-btn {
            font-family: Montserrat Alternates;

            &-delete {
                flex-grow: 1;
                border-radius: 10px;
                background: #F3F5F9;
                padding: 10px 32px;
                color: #37476A;

                font-size: 16px;
                font-style: normal;
                font-weight: 600;
                line-height: normal;
            }

            &-cancel {
                flex-grow: 1;
                border-radius: 10px;
                padding: 10px 32px;
                color: #FFF;

                font-size: 16px;
                font-style: normal;
                font-weight: 600;
                line-height: normal;
            }

        }
    }

}

.\src\components\Analytics\helpers.ts
-------------------------------------
import { Dispatch, SetStateAction, createContext } from "react";
import { ClarityDataItem } from "../../models/graph/clarity";
import { ConnectivityDataItem } from "../../models/graph/connectivity";
import GraphColor from "../../models/graph/_colors";
import { ExpressivenessDataItem } from "../../models/graph/expressiveness";
import { ConfidenceDataItem } from "../../models/graph/confidence";

export const ValueTime = createContext({
    currentTime: {} as number,
    setCurrentTime: (() => {}) as Dispatch<SetStateAction<number>>,
    updateTime: (() => {}) as Dispatch<SetStateAction<number>>,
});

const getColorClarityLine = (value: string) => {
    switch (value) {
        case "sounds":
            return GraphColor.RED;
        case "basic":
            return GraphColor.DARKGRAY;
        case "trembling":
            return GraphColor.BLUE;
        default:
            return GraphColor.DARKGRAY;
    }
};

export const convertClarityDataLine = (
    raw: ClarityDataItem
): BrickedGraphItem => ({
    id: raw.seq_number,
    text: raw.text,
    // value: raw.value, /// REMOVE THIS
    time: raw.time_start,
    color: getColorClarityLine(raw.type),
});

type BrickedGraphItem = {
    id: number;
    text: string;
    time: number;
    color: string;
};

export const convertConnectivityDataLine = (
    raw: ConnectivityDataItem
): BrickedGraphItem => ({
    id: raw.seq_number,
    text: raw.text,
    // value: raw.value, /// REMOVE THIS
    time: raw.time_start,
    color: getColor(raw.value),
});

const getColor = (value: number) => {
    switch (value) {
        case 0:
            return GraphColor.RED;
        case 1:
            return GraphColor.GRAY;
        case 2:
            return GraphColor.GREEN;
        default:
            return GraphColor.GRAY;
    }
};

const getMaxExpressivenessValueForColor = (
    anger: number,
    neutral: number,
    happiness: number
) => {
    return anger > neutral && anger > happiness
        ? GraphColor.RED
        : neutral > anger && neutral > happiness
        ? GraphColor.GRAY
        : GraphColor.GREEN;
};

export const convertExpressivenessDataLine = (
    raw: ExpressivenessDataItem
): BrickedGraphItem => ({
    id: raw.seq_number,
    text: raw.text === null ? "" : raw.text,
    // value: raw.value, /// REMOVE THIS
    time: raw.time_start,
    color: getMaxExpressivenessValueForColor(
        raw.anger,
        raw.neutral,
        raw.happiness
    ),
});



type ConvertArr = {
    value: number;
    color: string;
    position: string | number;
    width: number;
    desc?: string;
};
export const convertConfidenceArr = (
    items: ConfidenceDataItem[]
): ConvertArr[] => {
    const highLevel: number = 0.8;
    const lowLevel: number = 0.5;
    const resArr: ConvertArr[] = [];

    const getColor = (value: number) => {
        if (value > highLevel) {
            return {
                color: GraphColor.LIGHTGREEN,
                position: "10px",
                desc: "Высокая уверенность",
            };
        } else if (value > lowLevel) {
            return {
                color: GraphColor.YELLOW,
                position: "25px",
                desc: "Средняя уверенность",
            };
        } else {
            return {
                color: GraphColor.LIGHTRED,
                position: "38px",
                desc: "Низкая уверенность",
            };
        }
    };

    items.forEach((el, ind) => {
        if (ind === 0) {
            // resArr.push({ value: el.value, ...getColor(el.value), width: 1 });
            resArr.push({
                value: el.confidence,
                ...getColor(el.confidence),
                width: 1,
            });
        } else if (
            // (el.value < lowLevel &&
            (el.confidence < lowLevel &&
                resArr[resArr.length - 1].value < lowLevel) ||
            // (el.value > highLevel &&
            (el.confidence > highLevel &&
                resArr[resArr.length - 1].value > highLevel) ||
            // (el.value < highLevel &&
            (el.confidence < highLevel &&
                // el.value > lowLevel &&
                el.confidence > lowLevel &&
                resArr[resArr.length - 1].value < highLevel &&
                resArr[resArr.length - 1].value > lowLevel)
        ) {
            resArr[resArr.length - 1].width += 1;
        } else {
            // resArr.push({ value: el.value, ...getColor(el.value), width: 1 });
            resArr.push({
                value: el.confidence,
                ...getColor(el.confidence),
                width: 1,
            });
        }
    });
    return resArr;
};


.\src\components\Analytics\-Block\index.tsx
-------------------------------------------
import { cn } from "@bem-react/classname";
import { ReactNode, useState } from "react";

import "./style.scss";
import { ValueTime } from "../helpers";

type Props = {
    name?: string;
    block?: ReactNode;
};
const cnBlock = cn("analitics-block");

const ValueTimeProvider = ({ children }: any) => {
    const [currentTime, setCurrentTime] = useState(0);
    const updateTime = (v: any) => {
        setCurrentTime(v);
    };
    return (
        <ValueTime.Provider
            value={{
                currentTime,
                updateTime,
                setCurrentTime,
            }}
        >
            {children}
        </ValueTime.Provider>
    );
};
export default function AnalyticsBlock(props: Props) {
    return (
        // прокидывать колбеком
        <div className={`${cnBlock()}`}>
            <ValueTimeProvider>{props.block}</ValueTimeProvider>
        </div>
    );
}


.\src\components\Analytics\-Block\style.scss
--------------------------------------------
.analitics-block {
    //надо поменять на 100%
    width: 1248px;
}


.\src\components\Analytics\-Block\-Recomendation\index.tsx
----------------------------------------------------------
import React, { useState } from "react";
import { cn } from "@bem-react/classname";
import { ReactSVG } from "react-svg";

import LampCharge from "./icons/lamp-charge.svg";

import "./style.scss";

type Props = {
    recomendation?: string;
};

const cnRecomendation = cn("recomendation");

export default function Recomendation({ recomendation }: Props) {
    const [active, setActive] = useState("");

    const unfold = () => {
        if (active) {
            setActive("");
        } else {
            setActive("active");
        }
    };
    return (
        <div className={cnRecomendation()}>
            <div className={cnRecomendation("header")}>
                <ReactSVG
                    className={cnRecomendation("icon")}
                    src={LampCharge}
                />
                <div className={cnRecomendation("title")}>{"Рекомендации"}</div>
                <div onClick={unfold} className={cnRecomendation("link")}>
                    {"Развернуть"}
                </div>
            </div>
            <div className={cnRecomendation("content")}>
                <p className={`${active}`}>{recomendation}</p>
            </div>
        </div>
    );
}


.\src\components\Analytics\-Block\-Recomendation\style.scss
-----------------------------------------------------------
.recomendation {
    position: relative;
    display: flex;
    flex-direction: column;
    gap: 16px;
    align-items: flex-start;
    width: 100%;
    height: 100%;
    margin-top: 1rem;
    padding: 16px;
    font-family: "Onest";

    // width: 1216px;
    // height: 88px;

    background: #f7faff;
    border-radius: 12px;

    &-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        width: 100%;
        font-family: "Montserrat Alternates";

        & > div:last-child {
            margin-left: auto;
        }
    }

    &-icon {
        margin-right: 4px;
    }

    &-title {
        color: #37476a;
        font-weight: 600;
        font-size: 16px;
        line-height: 20px;
    }

    &-link {
        color: #2477f4;
        font-weight: 500;
        font-size: 16px;
        line-height: 20px;
        cursor:default;

    }

    &-content {
        width: 100%;
        color: #17282f;
        font-weight: 400;
        font-size: 16px;
        line-height: 20px;
        transition: 0.5s;

        & > p {
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
        }

        & > .active {
            white-space: normal;
        }
    }
}


.\src\components\Analytics\-Block\-Recomendation\recHandler\style.scss
----------------------------------------------------------------------
.recomendation {
    position: relative;
    display: flex;
    flex-direction: column;
    gap: 16px;
    align-items: flex-start;
    width: 100%;
    height: 100%;
    padding: 16px;
    font-family: "Onest";

    // width: 1216px;
    // height: 88px;

    background: #f7faff;
    border-radius: 12px;

    &-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        width: 100%;
        font-family: "Montserrat Alternates";

        & > div:last-child {
            margin-left: auto;
        }
    }

    &-icon {
        margin-right: 4px;
    }

    &-title {
        color: #37476a;
        font-weight: 600;
        font-size: 16px;
        line-height: 20px;
    }

    &-link {
        color: #2477f4;
        font-weight: 500;
        font-size: 16px;
        line-height: 20px;
        cursor:default;
    }

    &-content {
        width: 100%;
        color: #17282f;
        font-weight: 400;
        font-size: 16px;
        line-height: 20px;
        transition: 0.5s;

        & > p {
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
        }

        & > .active {
            white-space: wrap;
        }
    }
}



.\src\components\Analytics\-Block\Argumentation\index.tsx
---------------------------------------------------------
import { ReactNode } from "react";
import { cn } from "@bem-react/classname";
import { ReactSVG } from "react-svg";

import "./style.scss";

import Dropdown from "../../../Dropdown";
import Recomendation from "../-Recomendation";

import { IComp } from "../models/IComp";

type Props = {
    component: IComp;
};
const cnArgumentation = cn("argumentation");

export default function ArgumentationBlock(props: Props) {
    return (
        <div className={`${cnArgumentation()}`}>
            <div className={cnArgumentation("content")}>
                <p>
                    {
                        "Способность выступающего подтверждать свои утверждения обоснованными фактами, доказательствами, примерами и логическими операциями, умение логически связывать свои мысли со свидетельствами и доказательствами."
                    }
                </p>
            </div>
            {/* <Dropdown component={props.component} /> */}
            {props.component.child.map((el, ind) => (
                <Dropdown
                    key={ind}
                    title={el.childTitle}
                    subtitle={el.childSubtitle}
                    visible={el.visible}
                    invisible={el.invisible}
                />
            ))}
            <Recomendation />
        </div>
    );
}


.\src\components\Analytics\-Block\Argumentation\style.scss
----------------------------------------------------------
.argumentation {
    position: relative;
    display: flex;
    flex-direction: column;
    gap: 16px;
    align-items: flex-start;
    width: 100%;
    height: 100%;
    padding: 16px;
    font-family: "Onest";
    background: #fff;
    border-radius: 12px;

    &-content {
        width: 100%;
        color: #37476a;
        font-weight: 400;
        font-size: 16px;
        line-height: 20px;
    }
}


.\src\components\Analytics\-Block\Argumentation\Originally\index.tsx
--------------------------------------------------------------------
import React from "react";
import { cn } from "@bem-react/classname";

import "./style.scss";
import MainOriginally from "./Main";
import SecondaryOriginally from "./Secondary";
import { IComponents } from "../../models/IComponents";
import { IBreakdown } from "../../models/IBreakdown";

type Props = {
    name?: string;
    title: string;
    subtitle: string;
    info: IComponents[];
    breakdown: IBreakdown[];
    // state: string;
};
const cnOriginally = cn("originally");

export default function Originally(props: Props) {
    return (
        <></>
        // тебя чтоль вообще убрать
    );
}


.\src\components\Analytics\-Block\Argumentation\Originally\style.scss
---------------------------------------------------------------------



.\src\components\Analytics\-Block\Argumentation\Originally\Main\index.tsx
-------------------------------------------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";

import ProgressLine from "../ProgressLine";
import Visible from "../../../../../Dropdown/-Visible";

type Props = {
    info: IComponents[];
    positions: number[];
};

interface IComponents {
    title?: string;
    subtitle?: string;
    result?: string;
    fill?: string;
    dotfill?: string;
    shadow?: string;
    img?: string;
    value: number;
}

const cnProgressLine = cn("progress-line_block");

export default function MainOriginally(props: Props) {
    return (
        <>
            <div className={cnProgressLine()}>
                {props.info.map((el, ind) => (
                    <ProgressLine
                        key={ind}
                        info={el}
                        // на тест убрать
                        // value={props.positions[ind]}
                        value={props.positions[ind] !== 0 ? 0 : 0}
                    />
                ))}
            </div>
        </>
    );
}


.\src\components\Analytics\-Block\Argumentation\Originally\Main\style.scss
--------------------------------------------------------------------------
.progress-line_block {
    display: flex;
    flex-wrap: nowrap;
    gap: 2.625rem;
    width: 100%;
}


.\src\components\Analytics\-Block\Argumentation\Originally\ProgressLine\index.tsx
---------------------------------------------------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";

import { IComponents } from "../../../../../Analytics/-Block/models/IComponents";

type Props = {
    info: IComponents;
    value: number;
};
const cnProgressLine = cn("progress");

export default function ProgressLine(props: Props) {
    return (
        <div className={cnProgressLine("item")}>
            <div className={cnProgressLine("bar-title")}>
                {props.info.title}
            </div>
            <div className={cnProgressLine("bar")}>
                <div
                    className={cnProgressLine("bar-fill")}
                    style={{
                        width: `${props.value}%`,
                        background: props.info.fill,
                    }}
                >
                    <div
                        className={cnProgressLine("bar-dot")}
                        style={{
                            background: props.info.dotfill,
                            boxShadow: props.info.shadow,
                        }}
                    >
                        <div className={cnProgressLine("img")}>
                            {/* прокинуть сюда SVG */}
                            <img
                                src={props.info.img}
                                alt={props.info.img}
                            ></img>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}


.\src\components\Analytics\-Block\Argumentation\Originally\ProgressLine\style.scss
----------------------------------------------------------------------------------
.progress {
    flex-grow: 1;

    &-item {
        position: relative;
        width: 100%;
        margin-bottom: 0.375rem;
    }

    &-bar-title {
        margin-top: 0.375rem;
        margin-bottom: 1rem;
        font-weight: 600;
        font-size: 16px;
        font-family: "Montserrat Alternates";
        line-height: 20px;
    }

    &-bar {
        width: 100%;
        height: 12px;
        background-color: #d4dff4;
        border-radius: 20px;

        &-fill {
            position: relative;
            height: 100%;
            border-radius: 20px;
            transition: width 0.5s ease-out;
        }

        &-dot {
            position: absolute;
            top: 0;
            right: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 2.5rem;
            height: 2.5rem;
            border-radius: 50%;
            transform: translate(1rem, -0.875rem);
        }
    }

    &-img {
        width: 1.5rem;
        height: 1.5rem;
    }
}


.\src\components\Analytics\-Block\Argumentation\Originally\Secondary\index.tsx
------------------------------------------------------------------------------
/* eslint-disable jsx-a11y/anchor-is-valid */
import { cn } from "@bem-react/classname";

import "./style.scss";

import { IСitation } from "../../../models/ICitation";


type Props = {
    breakdown: IBreakdown[];
    state: string;
};

interface IBreakdown {
    seq_number: number;
    time_start: string;
    text: string;
    value: number;
    link: string;
    allocated: string;
}

const cnBreakdown = cn("breakdown_block");
const cnCitation = cn("citation");

type propsCitation = {
    typeCitation: IСitation[];
};
let citations: propsCitation = {
    typeCitation: [
        {
            type: "заимствования",
            color: "linear-gradient(32.08deg, #2477F4 0%, #3A86FA 100%)",
        },
        {
            type: "цитирование",
            color: "linear-gradient(45deg, #FFB800 0%, #FF9900 100%)",
        },
        {
            type: "самоцитирование",
            color: "linear-gradient(45deg, #8540FD 0%, #AF1FF2 100%)",
        },
    ],
};

export default function SecondaryOriginally(props: Props) {
    function determ(el: IBreakdown, str: string, s: string, index: number) {
        if (str.includes(s) && s.length > 0) {
            let t = str.split(s);
            return (
                <>
                    {t[0]}
                    {/* нужно подкинуть класс на ссылку */}
                    <a
                        href={el.link}
                        className={cnCitation("link")}
                        style={{
                            color:
                                el.value !== 0
                                    ? citations.typeCitation[el.value - 1].color
                                    : "",
                            position: "relative",
                        }}
                    >
                        {s}
                        <div
                            className={cnCitation("help-content")}
                            style={{
                                borderColor:
                                    el.value !== 0
                                        ? citations.typeCitation[el.value - 1]
                                              .color
                                        : "",
                                top:
                                    index === props.breakdown?.length - 1
                                        ? "-40px"
                                        : "20px",
                                left: "0px",
                            }}
                        >
                            {el.link}
                        </div>
                    </a>
                    {t[1]}
                </>
            );
        } else {
            return str;
        }
    }

    return (
        <>
            <div className={cnCitation()}>
                {citations.typeCitation.map((el, index) => (
                    <div key={index} className={cnCitation("marker")}>
                        <div style={{ background: el.color }}></div>
                        <div className={cnCitation("title")}>{el.type}</div>
                    </div>
                ))}
            </div>
            <div className={cnBreakdown()}>
                {props.breakdown?.map((el: IBreakdown, index: number) => (
                    <div key={index} className={cnCitation("item")}>
                        <div
                            className={cnCitation(
                                "time",
                                cnCitation(
                                    `${
                                        el.value === 1
                                            ? "borrowing"
                                            : el.value === 2
                                            ? "citation"
                                            : el.value === 3
                                            ? "selfCitation"
                                            : "original"
                                    }`
                                )
                            )}
                        >
                            {el.time_start}
                        </div>
                        <div
                            className={`${cnCitation(
                                "description"
                            )} ${cnCitation(
                                `${
                                    el.value === 1
                                        ? "borrowing"
                                        : el.value === 2
                                        ? "citation"
                                        : el.value === 3
                                        ? "selfCitation"
                                        : "original"
                                }`
                            )}_text`}
                        >
                            {determ(el, el.text, el.allocated, index)}
                        </div>
                    </div>
                ))}
            </div>
        </>
    );
}


.\src\components\Analytics\-Block\Argumentation\Originally\Secondary\style.scss
-------------------------------------------------------------------------------
.breakdown_block {
    display: flex;
    flex-flow: column nowrap;
    gap: 0.25rem;
    width: 100%;
    max-height: 320px;
    margin-bottom: 16px;
    overflow: auto;
}

.citation {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    margin-bottom: 8px;
    padding: 1rem 1.5rem;
    background: #f7faff;
    border-radius: 12px;

    &-marker {
        display: flex;
        flex-direction: row;
        gap: 10px;

        & > div:first-child {
            width: 20px;
            height: 20px;
            border-radius: 4px;
        }
    }

    &-title {
        color: #37476a;
        font-weight: 400;
        font-size: 14px;
        line-height: 18px;
    }

    &-item {
        display: flex;
        gap: 8px;
        align-items: center;
    }

    &-time {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 50px;
        height: 20px;
        font-weight: 700;
        font-size: 12px;
        line-height: 15px;
        border-radius: 4px;
    }

    &-original {
        color: #7c8eb5;
        background: #f7faff;
    }

    &-citation {
        color: #fff;
        background: linear-gradient(48.4deg, #ffb800 -18.18%, #f90 105.3%);
    }

    &-selfCitation {
        color: #fff;
        background: linear-gradient(42.13deg, #8540fd -25.36%, #af1ff2 130.25%);
    }

    &-borrowing {
        color: #fff;
        background: linear-gradient(
            32.08deg,
            rgb(36 119 244) 0%,
            rgb(58 134 250) 100%
        );
    }

    &-description {
        width: 100%;
        padding: 10px;
        color: #37476a;
        font-weight: 400;
        font-size: 14px;
        line-height: 18px;
        background: #f7faff;
        border-radius: 8px;

        & > a {
            font-weight: 500;
            text-decoration: none;
        }
    }

    &-original_text {
        & > a {
            color: #37476a;
        }
    }

    &-citation_text {
        & > a {
            color: #f5b40c;
        }
    }

    &-selfCitation_text {
        & > a {
            color: #9532f8;
        }
    }

    &-borrowing_text {
        & > a {
            color: #2477f4;
        }
    }

    &-help-content {
        position: absolute;
        display: none;
        gap: 16px;
        padding: 8px 12px;
        background: #fff;
        border: 1px solid;
        border-radius: 12px;
        box-shadow: 2px 2px 12px 0 rgb(173 185 212 / 30%);
    }

    &-link:hover {
        .citation-help-content {
            display: inline-flex;
        }
    }
}


.\src\components\Analytics\-Block\Clarity\index.tsx
---------------------------------------------------
import { cn } from "@bem-react/classname";
import { ReactSVG } from "react-svg";

import "./style.scss";

import Dropdown from "../../../Dropdown";
import Recomendation from "../-Recomendation";

import Note2 from "../../icons/note-2.svg";
import { IComp } from "../models/IComp";

type Props = {
    component: IComp;
};
const cnDefinition = cn("definition");

export default function ClarityBlock(props: Props) {
    return (
        <div className={`${cnDefinition()}`}>
            <div className={cnDefinition("content")}>
                <p>
                    Способность выразить свои мысли в ясной, доходчивой и
                    понятной форме.
                </p>
            </div>
            {/* <Dropdown component={props.component} /> */}
            {props.component.child.map((el, ind) => (
                <Dropdown
                    key={ind}
                    title={el.childTitle}
                    subtitle={el.childSubtitle}
                    visible={el.visible}
                    invisible={el.invisible}
                />
            ))}
            <Recomendation />
        </div>
    );
}


.\src\components\Analytics\-Block\Clarity\style.scss
----------------------------------------------------
.definition {
    position: relative;
    display: flex;
    flex-direction: column;
    gap: 16px;
    align-items: flex-start;
    width: 100%;
    height: 100%;
    padding: 16px;
    background: #fff;
    border-radius: 12px;

    &-content > p {
        width: 100%;
        color: #37476a;
        font-weight: 400;
        font-size: 16px;
        font-family: "Onest";
        line-height: 20px;
    }
}


.\src\components\Analytics\-Block\Clarity\Definition\Main\index.tsx
-------------------------------------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";

import TimelineGraph from "../../../../../Graphs/Timeline";

type Props = {
    startTime?: number;
    endTime?: number;
    data: TimelineItem[];
};

type TimelineItem = {
    id?: number;
    text?: string;
    time: number;
    color?: string;
};

const cnProgressLine = cn("progress-time-line");

export default function MainDefinition(props: Props) {
    return (
        <div className={cnProgressLine()}>
            <TimelineGraph
                data={props.data}
                startTime={props.startTime}
                endTime={props.endTime}
            />
        </div>
    );
}


.\src\components\Analytics\-Block\Clarity\Definition\Main\style.scss
--------------------------------------------------------------------


.\src\components\Analytics\-Block\Clarity\Definition\Secondary\index.tsx
------------------------------------------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";

import ClarityGraph from "../../../../../Graphs/Clarity";
import { ClarityDataItem } from "../../../../../../models/graph/clarity";

type Props = {
    data: ClarityDataItem[];
    state: string;
    counts: number[];
};

interface IDefinition {
    type: string;
    color: string;
}

const cnDefinition = cn("definition-description");

type propsDefinition = {
    typeDefinition: IDefinition[];
};
const definition: propsDefinition = {
    typeDefinition: [
        {
            type: "основная речь",
            color: "#ADB9D4",
        },
        {
            type: "неречевые звуки",
            color: "linear-gradient(78.41deg, #FE6972 0%, #FF4E78 100%)",
        },
        {
            type: "дрожание голоса",
            color: "linear-gradient(32.08deg, #2477F4 0%, #3A86FA 100%)",
        },
    ],
};

export default function SecondaryDefinition(props: Props) {
    return (
        <>
            <div className={cnDefinition()}>
                <p className={cnDefinition("description")}>
                    <b className={cnDefinition("description-bold")}>Четкость</b>{" "}
                    речи снижают нарушения фонетических стандартов (неречевые
                    звуки, дрожание голоса) и резкие (на 20 и более процентов)
                    изменения темпа речи.
                </p>
                <div className={cnDefinition("list")}>
                    {definition.typeDefinition.map((el, index) => (
                        <div key={index} className={cnDefinition("marker")}>
                            <div style={{ background: el.color }}></div>
                            <div className={cnDefinition("title")}>
                                {el.type}
                            </div>
                            <div className={cnDefinition("title-count")}>
                                {props.counts[index]}
                            </div>
                        </div>
                    ))}
                </div>
            </div>
            <ClarityGraph data={props.data} />
        </>
    );
}


.\src\components\Analytics\-Block\Clarity\Definition\Secondary\style.scss
-------------------------------------------------------------------------
.definition-description {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    margin-bottom: 8px;
    padding: 1rem 1.5rem;
    background: #f7faff;
    border-radius: 12px;

    &-description {
        display: inline-block;
        // надо сделать динамически
        width: 80%;
        overflow: auto;
        color: #17282f;
        font-weight: 400;
        font-size: 16px;
        font-family: "Onest";
        line-height: 20px;

        &-bold {
            font-weight: 500;
        }
    }

    &-list {
        display: flex;
        flex-direction: column;
        gap: 6px;
        padding: 0 0.5rem;
    }

    &-marker {
        display: flex;
        flex-direction: row;
        gap: 10px;

        & > div:first-child {
            width: 20px;
            height: 20px;
            border-radius: 4px;
        }
    }

    &-title {
        color: #37476a;
        font-weight: 400;
        font-size: 14px;
        font-family: "Onest";
        line-height: 18px;

        &-count {
            color: #37476a;
            font-weight: 700;
            font-size: 14px;
            line-height: 18px;
        }
    }

    &-item {
        display: flex;
        gap: 8px;
        align-items: center;
    }

    &-time {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 50px;
        height: 20px;
        font-weight: 700;
        font-size: 12px;
        line-height: 15px;
        border-radius: 4px;
    }

    &-original {
        color: #7c8eb5;
        background: #f7faff;
    }

    &-citation {
        color: #fff;
        background: linear-gradient(48.4deg, #ffb800 -18.18%, #f90 105.3%);
    }

    &-selfCitation {
        color: #fff;
        background: linear-gradient(42.13deg, #8540fd -25.36%, #af1ff2 130.25%);
    }

    &-borrowing {
        color: #fff;
        background: linear-gradient(
            32.08deg,
            rgb(36 119 244) 0%,
            rgb(58 134 250) 100%
        );
    }

    &-citation_text {
        & > a {
            color: #f5b40c;
        }
    }

    &-selfCitation_text {
        & > a {
            color: #9532f8;
        }
    }

    &-borrowing_text {
        & > a {
            color: #2477f4;
        }
    }
}


.\src\components\Analytics\-Block\Clarity\Expressiveness\Main\index.tsx
-----------------------------------------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";

import TimelineGraph from "../../../../../Graphs/Timeline";

type Props = {
    startTime?: number;
    endTime?: number;
    data: TimelineItem[];
};

type TimelineItem = {
    id?: number;
    text?: string;
    time: number;
    color?: string;
};

const cnProgressLine = cn("progress-time-line");

export default function MainExpressiveness(props: Props) {
    return (
        <>
            <div className={cnProgressLine()}>
                <TimelineGraph
                    data={props.data}
                    startTime={props.startTime}
                    endTime={props.endTime}
                />
            </div>
        </>
    );
}


.\src\components\Analytics\-Block\Clarity\Expressiveness\Main\style.scss
------------------------------------------------------------------------


.\src\components\Analytics\-Block\Clarity\Expressiveness\Secondary\index.tsx
----------------------------------------------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";

import {
    ExpressivenessDataItem,
    ExpressivenessType,
} from "../../../../../../models/graph/expressiveness";
import ExpressivenessGraph from "../../../../../Graphs/Expressiveness";
import { useEffect, useState } from "react";

type Props = {
    data: ExpressivenessDataItem[];
    state: string;
    graphs: string[];
};

interface IExpressiveness {
    type: string;
    color: string;
}

const cnExpressiveness = cn("expressiveness");

type propsExpressiveness = {
    typeExpressiveness: IExpressiveness[];
};
let expressiveness: propsExpressiveness = {
    typeExpressiveness: [
        {
            type: "нейтральная",
            color: "#ADB9D4",
        },
        {
            type: "радость",
            color: "linear-gradient(32.08deg, #24F19B 0%, #51F976 100%)",
        },
        {
            type: "злость",
            color: "linear-gradient(78.41deg, #FE6972 0%, #FF4E78 100%)",
        },
    ],
};

export default function SecondaryExpressiveness(props: Props) {
    // 0 - ExpressivenessType.ANGER
    // 1 - ExpressivenessType.HAPPINESS
    // 2 - ExpressivenessType.NEUTRAL + ANGER
    // any > 2 - ExpressivenessType.NEUTRAL + HAPPINESS
    const [graph, setGraph] = useState(2);
    const [choosedEmotion, setChoosedEmotion] = useState(0); // 0 - ANGER or 1 - HAPPINESS
    const [onNeutral, setOnNeutral] = useState(false);

    useEffect(() => {
        if (choosedEmotion % 2 === 0) {
            setGraph(onNeutral ? 2 : 0);
        } else setGraph(onNeutral ? 3 : 1);
    }, [choosedEmotion, onNeutral]);

    return (
        <>
            {/* <ConnectivityGraph items={[]} /> */}
            <div className={cnExpressiveness()}>
                <p className={cnExpressiveness("descript")}>
                    <span>
                        <b className={cnExpressiveness("descript-bold")}>
                            {"Экспрессивность"}
                        </b>{" "}
                        {
                            "- придание средства аудиовизуальной речи эмоциональной (как положительной, так и отрицательной) окраски произносимым словам."
                        }
                    </span>
                </p>
                <div className={cnExpressiveness("list")}>
                    {expressiveness.typeExpressiveness.map((el, index) => (
                        <div key={index} className={cnExpressiveness("marker")}>
                            <div style={{ background: el.color }}></div>
                            <div className={cnExpressiveness("title")}>
                                {el.type}
                            </div>
                        </div>
                    ))}
                </div>
            </div>
            <div className={cnExpressiveness("analysis")}>
                <span className={cnExpressiveness("set")}>Параметры:</span>
                <ul className={cnExpressiveness("menu")}>
                    {props.graphs.map((el, ind) => (
                        <li
                            key={ind}
                            className={cnExpressiveness("item", {
                                choised: ind === choosedEmotion,
                            })}
                        >
                            <div
                                className={cnExpressiveness("link")}
                                onClick={() => {
                                    setChoosedEmotion(ind);
                                }}
                            >
                                {el}
                            </div>
                        </li>
                    ))}
                </ul>
                <div className={cnExpressiveness("analysis-open")}>
                    <span className={cnExpressiveness("set")}>
                        Нейтральная эмоция в текстовом канале:
                    </span>
                    <ul className={cnExpressiveness("menu")}>
                        <li
                            className={cnExpressiveness("item-open", {
                                choised: onNeutral,
                            })}
                        >
                            <div
                                className={cnExpressiveness("link")}
                                onClick={() => {
                                    setOnNeutral((prev) => !prev);
                                }}
                            >
                                {onNeutral ? "Вкл" : "Выкл"}
                            </div>
                        </li>
                    </ul>
                </div>
            </div>
            <div className={cnExpressiveness("graph")}>
                <ExpressivenessGraph
                    data={props.data}
                    param={
                        graph === 0
                            ? ExpressivenessType.ANGER
                            : graph === 1
                            ? ExpressivenessType.HAPPINESS
                            : graph === 2
                            ? [
                                  ExpressivenessType.NEUTRAL,
                                  ExpressivenessType.ANGER,
                              ]
                            : [
                                  ExpressivenessType.NEUTRAL,
                                  ExpressivenessType.HAPPINESS,
                              ]
                    }
                />
            </div>
        </>
    );
}


.\src\components\Analytics\-Block\Clarity\Expressiveness\Secondary\style.scss
-----------------------------------------------------------------------------
.expressiveness {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    margin-bottom: 8px;
    padding: 1rem 1.5rem;
    background: #f7faff;
    border-radius: 12px;

    &-descript {
        // надо сделать динамически
        display: flex;
        flex-direction: column;
        overflow: auto;
        color: #17282f;
        font-weight: 400;
        font-size: 16px;
        line-height: 20px;

        &-bold {
            font-weight: 500;
        }
    }

    &-list {
        display: flex;
        flex-direction: column;
        gap: 6px;
        padding: 0 0.5rem;
    }

    &-marker {
        display: flex;
        flex-direction: row;
        gap: 10px;

        & > div:first-child {
            width: 20px;
            height: 20px;
            border-radius: 4px;
        }
    }

    &-title {
        color: #37476a;
        font-weight: 400;
        font-size: 14px;
        line-height: 18px;
    }

    &-item {
        display: flex;
        gap: 8px;
        align-items: center;

        &_choised {
            color: #2477f4 !important;
            background: rgb(36 119 244 / 10%);
            border-radius: 8px;
        }
    }

    &-time {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 50px;
        height: 20px;
        font-weight: 700;
        font-size: 12px;
        line-height: 15px;
        border-radius: 4px;
    }

    &-analysis,
    &-analysis-open {
        display: flex;
        align-items: center;
        padding: 4px 0;
        color: #37476a;
        font-weight: 700;
        font-size: 16px;
        font-family: "Montserrat Alternates";
        line-height: 20px;
    }

    &-analysis-open {
        margin-left: auto;
    }

    &-set {
        margin-right: 24px;
    }

    &-menu {
        display: flex;
        flex-wrap: nowrap;
        gap: 12px;
    }

    &-menu:last-child {
        .expressiveness-link:last-child {
            width: 40px;
            text-align: center;
        }
    }

    &-item,
    &-item-open {
        padding: 8px 12px;
        color: #7c8eb5;
        font-weight: 600;
        font-size: 14px;
        line-height: 17px;
        cursor: pointer;

        &_choised {
            color: #2477f4 !important;
            background: rgb(36 119 244 / 10%);
            border-radius: 8px;
        }
    }

    &-graph > img {
        width: 100%;
    }

    &-choise {
        color: #2477f4;
        background: rgb(36 119 244 / 10%);
        border-radius: 8px;
    }
}


.\src\components\Analytics\-Block\Communicative\index.tsx
---------------------------------------------------------
import { ReactNode } from "react";
import { cn } from "@bem-react/classname";
import { ReactSVG } from "react-svg";

import "./style.scss";

import Dropdown from "../../../Dropdown";
import Recomendation from "../-Recomendation";

import { IComp } from "../models/IComp";

type Props = {
    component: IComp;
};
const cnCommunicative = cn("communicative");

export default function CommunicativeBlock(props: Props) {
    return (
        <div className={`${cnCommunicative()}`}>
            <div className={cnCommunicative("content")}>
                <p>
                    {
                        "Умение правильно и эффективно использовать язык и другие коммуникативные инстументы для того, чтобы эффективно общаться с аудиторией и передавать свои мысли и идеи."
                    }
                </p>
            </div>
            {/* <Dropdown component={props.component} /> */}
            {props.component.child.map((el, ind) => (
                <Dropdown
                    key={ind}
                    title={el.childTitle}
                    subtitle={el.childSubtitle}
                    visible={el.visible}
                    invisible={el.invisible}
                />
            ))}
            <Recomendation />
        </div>
    );
}


.\src\components\Analytics\-Block\Communicative\style.scss
----------------------------------------------------------
.communicative {
    position: relative;
    display: flex;
    flex-direction: column;
    gap: 16px;
    align-items: flex-start;
    width: 100%;
    height: 100%;
    padding: 16px;
    font-family: "Onest";
    background: #fff;
    border-radius: 12px;

    &-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        width: 100%;
        font-family: "Montserrat Alternates";

        & > div:last-child {
            margin-left: auto;
        }
    }

    &-icon {
        margin-right: 8px;
    }

    &-title {
        color: #37476a;
        font-weight: 600;
        font-size: 24px;
        line-height: 29px;
    }

    &-result {
        padding: 6px 12px;
        font-weight: 600;
        font-size: 16px;
        line-height: 20px;
        border-radius: 40px;
        // background: #ffb800;
        // color: #ffffff;
    }

    &-content {
        width: 100%;
        color: #37476a;
        font-weight: 400;
        font-size: 16px;
        line-height: 20px;
    }
}


.\src\components\Analytics\-Block\Communicative\Defeat\Secondary\index.tsx
--------------------------------------------------------------------------
/* eslint-disable jsx-a11y/anchor-is-valid */
import { cn } from "@bem-react/classname";

import "./style.scss";

import GraphColor from "../../../../../../models/graph/_colors";
import { VideoTimeContext } from "../../../../../Context/helpers";
import { useContext } from "react";
import convertSecondsIntoTime from "../../../../../../@adapters/Time/convertSeconds";

type Props = {
    breakdown: IBreakdown[];
    state: string;
};

interface IBreakdown {
    seq_number: number;
    time_start: string;
    text: string;
    value: Priority;
}
type Priority = {
    "0": string[];
    "1": string[];
    "2": string[];
};
interface IDefeat {
    type: string;
    color: string;
}

const cnBreakdown = cn("breakdown_block");
const cnDefeat = cn("defeat");

type propsDefeat = {
    typeDefeat: IDefeat[];
};
let citations: propsDefeat = {
    typeDefeat: [
        {
            type: "слова-паразиты",
            color: "linear-gradient(32.08deg, #2477F4 0%, #3A86FA 100%)",
        },
        {
            type: "когнитивные икажения",
            color: "linear-gradient(45deg, #FFB800 0%, #FF9900 100%)",
        },
        {
            type: "агрессивность",
            color: "linear-gradient(45deg, #E23339 0%, #F35B60 100%)",
        },
    ],
};

type Param = {
    type: string[];
    color: string[];
    description: string[];
};
export default function SecondaryDefeat(props: Props) {
    const { setCurrentTime } = useContext(VideoTimeContext);

    const choiseBlock = (event: React.MouseEvent<HTMLDivElement>) => {
        const dataValue = +event.currentTarget.dataset.time! as number;
        if (dataValue || dataValue === 0) {
            setCurrentTime(dataValue);
        }
    };

    function determ(str: string, arrS: Priority, index: number) {
        let arrParam: Param[] = [];
        let strArr = str.split(" ");
        const copyStrArr = strArr.map((el) => el.toLowerCase());

        strArr.forEach((el) => {
            arrParam.push({
                type: [],
                color: [],
                description: [],
            });
        });

        Object.entries(arrS).forEach((e) => {
            e[1].forEach((subStr) => {
                subStr = subStr.trim();

                // сюда надо вставить перебор по массиву входящих
                if (!subStr.includes(" ")) {
                    let sexIndex =
                        copyStrArr.indexOf(`${subStr}.`.toLowerCase()) !== -1
                            ? copyStrArr.indexOf(`${subStr}.`.toLowerCase())
                            : copyStrArr.indexOf(`${subStr},`.toLowerCase()) !==
                              -1
                            ? copyStrArr.indexOf(`${subStr},`.toLowerCase())
                            : copyStrArr.indexOf(subStr.toLowerCase()) !== -1
                            ? copyStrArr.indexOf(subStr.toLowerCase())
                            : -1;

                    if (sexIndex !== -1) {
                        arrParam[sexIndex].type.push(
                            e[0] === "0"
                                ? "filler"
                                : e[0] === "1"
                                ? "cognitive"
                                : e[0] === "2"
                                ? "agression"
                                : "original"
                        );
                        arrParam[sexIndex].color.push(
                            e[0] === "0"
                                ? GraphColor.BLUE
                                : e[0] === "1"
                                ? GraphColor.ORANGE
                                : e[0] === "2"
                                ? GraphColor.RED
                                : GraphColor.DARKGRAY
                        );
                        if (
                            !arrParam[sexIndex].description.includes(
                                "слова-паразиты"
                            ) &&
                            e[0] === "0"
                        ) {
                            arrParam[sexIndex].description.push(
                                "слова-паразиты"
                            );
                        } else if (
                            !arrParam[sexIndex].description.includes(
                                "когнитивные искажения"
                            ) &&
                            e[0] === "1"
                        ) {
                            arrParam[sexIndex].description.push(
                                "когнитивные искажения"
                            );
                        } else if (
                            !arrParam[sexIndex].description.includes(
                                "агрессивность"
                            ) &&
                            e[0] === "2"
                        ) {
                            arrParam[sexIndex].description.push(
                                "агрессивность"
                            );
                        }
                    }
                } else if (subStr.includes(" ")) {
                    // если подстрока
                    let subStrArr = subStr.split(" ");
                    const copySubStrArr = subStrArr.map((el) =>
                        el.toLowerCase()
                    );
                    for (let i = 0; i < copyStrArr.length; i++) {
                        let flag: boolean = false;
                        for (let j = 0; j < copySubStrArr.length; j++) {
                            if (j === copySubStrArr.length - 1) {
                            }
                            if (
                                (j === copySubStrArr.length - 1 &&
                                    copyStrArr[i + j] === copySubStrArr[j]) ||
                                (j === copySubStrArr.length - 1 &&
                                    copyStrArr[i + j] ===
                                        `${copySubStrArr[j]},`) ||
                                (j === copySubStrArr.length - 1 &&
                                    copyStrArr[i + j] ===
                                        `${copySubStrArr[j]}.`)
                            ) {
                                flag = !flag;
                                break;
                            } else if (copyStrArr[i + j] !== copySubStrArr[j]) {
                                break;
                            }
                        }
                        if (flag) {
                            for (let k = 0; k < copySubStrArr.length; k++) {
                                arrParam[i + k].type.push(
                                    e[0] === "0"
                                        ? "filler"
                                        : e[0] === "1"
                                        ? "cognitive"
                                        : e[0] === "2"
                                        ? "agression"
                                        : "original"
                                );
                                arrParam[i + k].color.push(
                                    e[0] === "0"
                                        ? GraphColor.BLUE
                                        : e[0] === "1"
                                        ? GraphColor.ORANGE
                                        : e[0] === "2"
                                        ? GraphColor.RED
                                        : GraphColor.DARKGRAY
                                );
                                if (
                                    !arrParam[i + k].description.includes(
                                        "слова-паразиты"
                                    ) &&
                                    e[0] === "0"
                                ) {
                                    arrParam[i + k].description.push(
                                        "слова-паразиты"
                                    );
                                } else if (
                                    !arrParam[i + k].description.includes(
                                        "когнитивные искажения"
                                    ) &&
                                    e[0] === "1"
                                ) {
                                    arrParam[i + k].description.push(
                                        "когнитивные искажения"
                                    );
                                } else if (
                                    !arrParam[i + k].description.includes(
                                        "агрессивность"
                                    ) &&
                                    e[0] === "2"
                                ) {
                                    arrParam[i + k].description.push(
                                        "агрессивность"
                                    );
                                }
                            }
                        }
                    }
                }
            });
        });

        return (
            <div className={cnDefeat("description")}>
                {arrParam.map((el, ind) => (
                    <span key={ind} className={`${cnDefeat(el.type[0])}_text`}>
                        {` ${strArr[ind]}`}
                        {el.description.length !== 0 ? (
                            <div
                                className={cnDefeat("help-content")}
                                style={{
                                    borderColor: el.color[0],
                                    top:
                                        index === props.breakdown?.length - 1
                                            ? "-40px"
                                            : "20px",
                                    left: "0px",
                                }}
                            >
                                {el.description.join(" ")}
                            </div>
                        ) : (
                            <></>
                        )}
                    </span>
                ))}
            </div>
        );
    }

    return (
        <>
            <div className={cnDefeat()}>
                <p className={cnDefeat("descript")}>
                    <span>
                        {"Нарушением  "}
                        <b className={cnDefeat("descript-bold")}>
                            {"коммуникативной нормы"}
                        </b>{" "}
                        {
                            "является наличие в речи не несущих смысла слов-паразитов, систематических ошибок (отклонений) в мышлении (когнитивных искажений), признаков агрессивного поведения."
                        }
                    </span>
                </p>
                <div className={cnDefeat("marker-list")}>
                    {citations.typeDefeat.map((el, index) => (
                        <div key={index} className={cnDefeat("marker")}>
                            <div style={{ background: el.color }}></div>
                            <div className={cnDefeat("title")}>{el.type}</div>
                        </div>
                    ))}
                </div>
            </div>
            <div className={cnBreakdown()}>
                {props.breakdown?.map((el, index) => (
                    <div
                        key={index}
                        className={cnDefeat("item")}
                        onClick={choiseBlock}
                        data-time={el.time_start}
                    >
                        <div
                            className={cnDefeat(
                                "time",
                                cnDefeat(
                                    `${
                                        el.value[0].length !== 0
                                            ? "filler"
                                            : el.value[1].length !== 0
                                            ? "cognitive"
                                            : el.value[2].length !== 0
                                            ? "agression"
                                            : "original"
                                    }`
                                )
                            )}
                        >
                            {convertSecondsIntoTime(Number(el.time_start))}
                        </div>
                        {determ(el.text, el.value, index)}
                    </div>
                ))}
            </div>
        </>
    );
}


.\src\components\Analytics\-Block\Communicative\Defeat\Secondary\style.scss
---------------------------------------------------------------------------
.breakdown_block {
    display: flex;
    flex-flow: column nowrap;
    gap: 0.25rem;
    width: 100%;
    max-height: 320px;
    margin-bottom: 16px;
    overflow: auto;
    cursor: default;
}

.defeat {
    display: flex;
    flex-direction: column;
    gap: 24px;
    justify-content: space-between;
    width: 100%;
    margin-bottom: 8px;
    padding: 1rem 1.5rem;
    background: #f7faff;
    border-radius: 12px;

    &-descript {
        // надо сделать динамически
        display: flex;
        flex-direction: column;
        overflow: auto;
        color: #17282f;
        font-weight: 400;
        font-size: 16px;
        line-height: 20px;

        &-bold {
            font-weight: 500;
        }
    }

    &-marker-list {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }

    &-marker {
        display: flex;
        flex-direction: row;
        gap: 10px;

        & > div:first-child {
            width: 20px;
            height: 20px;
            border-radius: 4px;
        }
    }

    &-title {
        color: #37476a;
        font-weight: 400;
        font-size: 14px;
        line-height: 18px;
    }

    &-item {
        display: flex;
        gap: 8px;
        align-items: center;
    }

    &-time {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 50px;
        height: 20px;
        font-weight: 700;
        font-size: 12px;
        line-height: 15px;
        border-radius: 4px;
    }

    &-original {
        color: #7c8eb5;
        background: #f7faff;
    }

    &-filler {
        color: #fff;
        background: linear-gradient(32.08deg, #2477f4 0%, #3a86fa 100%);
    }

    &-cognitive {
        color: #fff;
        background: linear-gradient(45deg, #ffb800 0%, #f90 100%);
    }

    &-agression {
        color: #fff;
        background: linear-gradient(45deg, #e23339 0%, #f35b60 100%);
    }

    &-description {
        width: 100%;
        padding: 10px;
        color: #37476a;
        font-weight: 400;
        font-size: 14px;
        line-height: 18px;
        background: #f7faff;
        border-radius: 8px;

        & > span {
            position: relative;

            & > div {
                position: absolute;
                top: 20px;
                left: 0;
                z-index: 100;
                display: none;
                width: max-content;
                padding: 8px 12px;
                color: #37476a;
                font-weight: 500;
                font-size: 0.75rem;
                background-color: white;

                // top: 137px;
                // left: 447px;
                border: thin solid rgb(173 185 212);
                border-radius: 12px;
            }
        }

        & > span:hover {
            & > div {
                display: block;
            }
        }
    }

    &-original_text {
        color: #37476a;
    }

    &-filler_text {
        color: #2477f4;
    }

    &-cognitive_text {
        color: #f5b40c;
    }

    &-agression_text {
        color: #e23339;
    }
}


.\src\components\Analytics\-Block\Connectivity\index.tsx
--------------------------------------------------------
import { cn } from "@bem-react/classname";
import { ReactSVG } from "react-svg";

import "./style.scss";

import Dropdown from "../../../Dropdown";
import Recomendation from "../-Recomendation";

import Note2 from "../../icons/note-2.svg";
import { IComp } from "../models/IComp";
import InformativeGraph from "../../../Graphs/Informative/InformativeGraph";
import UnityOfStyl from "../../../Graphs/unityOfStyle/UnityOfStyl";

type Props = {
    component: IComp;
};
const cnConnectivity = cn("connectivity");

export default function ConnectivityBlock(props: Props) {
    return (
        <div className={`${cnConnectivity()}`}>
            <div className={cnConnectivity("content")}>
                <p>
                    {
                        "Логичная и последовательная связь компонентов выступления между собой, которые служат для передачи определенного сообщения и обеспечивают единое понимание темы выступления у слушателей"
                    }
                </p>
            </div>
            {/* <Dropdown component={props.component} /> */}
            {props.component.child.map((el, ind) => (
                <Dropdown
                    key={ind}
                    title={el.childTitle}
                    subtitle={el.childSubtitle}
                    visible={el.visible}
                    invisible={el.invisible}
                />
            ))}
            <Recomendation />
        </div>
    );
}


.\src\components\Analytics\-Block\Connectivity\style.scss
---------------------------------------------------------
.connectivity {
    position: relative;
    display: flex;
    flex-direction: column;
    gap: 16px;
    align-items: flex-start;
    width: 100%;
    height: 100%;
    padding: 16px;
    background: #fff;
    border-radius: 12px;

    &-content > p {
        width: 100%;
        color: #37476a;
        font-weight: 400;
        font-size: 16px;
        font-family: "Onest";
        line-height: 20px;
    }
}


.\src\components\Analytics\-Block\Connectivity\Subsequence\Main\index.tsx
-------------------------------------------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";

import Visible from "../../../../../Dropdown/-Visible";
import TimelineGraph from "../../../../../Graphs/Timeline";

type Props = {
    startTime?: number;
    endTime?: number;
    data: TimelineItem[];
};

type TimelineItem = {
    id?: number;
    text?: string;
    time: number;
    color?: string;
};

const cnProgressLine = cn("progress-time-line");

export default function MainSubsequence(props: Props) {
    return (
        <Visible>
            <div className={cnProgressLine()}>
                <TimelineGraph
                    data={props.data}
                    startTime={props.startTime}
                    endTime={props.endTime}
                />
            </div>
        </Visible>
    );
}


.\src\components\Analytics\-Block\Connectivity\Subsequence\Main\style.scss
--------------------------------------------------------------------------


.\src\components\Analytics\-Block\Connectivity\Subsequence\Secondary\index.tsx
------------------------------------------------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";

import Invisible from "../../../../../Dropdown/-Invisible";
import ConnectivityGraph from "../../../../../Graphs/Connectivity";
import { ConnectivityDataItem } from "../../../../../../models/graph/connectivity";

type Props = {
    data: ConnectivityDataItem[];
    state: string;
};

interface ISubsequence {
    type: string;
    color: string;
}

const cnSubsequence = cn("subsequence");

type propsSubsequence = {
    typeSubsequence: ISubsequence[];
};
let subsequence: propsSubsequence = {
    typeSubsequence: [
        {
            type: "высказывания логически не связаны",
            color: "#ADB9D4",
        },
        {
            type: "высказывание логически связано с предыдущим высказыванием",
            color: "linear-gradient(32.08deg, #24F19B 0%, #51F976 100%)",
        },
        {
            type: "высказывание противоречит предыдущему",
            color: "linear-gradient(78.41deg, #FE6972 0%, #FF4E78 100%)",
        },
    ],
};

export default function SecondarySubsequence(props: Props) {
    return (
        <>
            {/* <ConnectivityGraph items={[]} /> */}
            <div className={cnSubsequence()}>
                <p className={cnSubsequence("description")}>
                    <b className={cnSubsequence("description-bold")}>
                        {"Последовательная"}
                    </b>{" "}
                    {
                        "речь характеризуется упорядоченным представлением аргументов, при котором высказывания логически не противоречат друг другу."
                    }
                </p>
                <div className={cnSubsequence("list")}>
                    {subsequence.typeSubsequence.map((el, index) => (
                        <div key={index} className={cnSubsequence("marker")}>
                            <div style={{ background: el.color }}></div>
                            <div className={cnSubsequence("title")}>
                                {el.type}
                            </div>
                        </div>
                    ))}
                </div>
            </div>
            <ConnectivityGraph items={props.data} />
        </>
    );
}


.\src\components\Analytics\-Block\Connectivity\Subsequence\Secondary\style.scss
-------------------------------------------------------------------------------
.subsequence {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    margin-bottom: 8px;
    padding: 1rem 1.5rem;
    background: #f7faff;
    border-radius: 12px;

    &-description {
        display: inline-block;
        // надо сделать динамически
        width: 55%;
        overflow: auto;
        color: #17282f;
        font-weight: 400;
        font-size: 16px;
        font-family: "Onest";
        line-height: 20px;

        &-bold {
            font-weight: 500;
        }
    }

    &-list {
        display: flex;
        flex-direction: column;
        gap: 6px;
        padding: 0 0.5rem;
    }

    &-marker {
        display: flex;
        flex-direction: row;
        gap: 10px;

        & > div:first-child {
            width: 20px;
            height: 20px;
            border-radius: 4px;
        }
    }

    &-title {
        color: #37476a;
        font-weight: 400;
        font-size: 14px;
        line-height: 18px;
    }

    &-item {
        display: flex;
        gap: 8px;
        align-items: center;
    }

    &-time {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 50px;
        height: 20px;
        font-weight: 700;
        font-size: 12px;
        line-height: 15px;
        border-radius: 4px;
    }

    &-original {
        color: #7c8eb5;
        background: #f7faff;
    }

    &-citation {
        color: #fff;
        background: linear-gradient(48.4deg, #ffb800 -18.18%, #f90 105.3%);
    }

    &-selfCitation {
        color: #fff;
        background: linear-gradient(42.13deg, #8540fd -25.36%, #af1ff2 130.25%);
    }

    &-borrowing {
        color: #fff;
        background: linear-gradient(
            32.08deg,
            rgb(36 119 244) 0%,
            rgb(58 134 250) 100%
        );
    }

    // &-description {
    //     width: 100%;
    //     padding: 10px;
    //     background: #f7faff;
    //     border-radius: 8px;
    //     font-weight: 400;
    //     font-size: 14px;
    //     line-height: 18px;
    //     color: #37476a;

    //     & > a {
    //         font-weight: 500;
    //         text-decoration: none;
    //     }
    // }

    &-citation_text {
        & > a {
            color: #f5b40c;
        }
    }

    &-selfCitation_text {
        & > a {
            color: #9532f8;
        }
    }

    &-borrowing_text {
        & > a {
            color: #2477f4;
        }
    }
}


.\src\components\Analytics\-Block\Dinamism\index.tsx
----------------------------------------------------
import { ReactNode } from "react";
import { cn } from "@bem-react/classname";
import { ReactSVG } from "react-svg";

import "./style.scss";

import Recomendation from "../-Recomendation";

import { ICompDinamism } from "../../../Analytics/-Block/models/ICompDinamism";
import Dropdown from "../../../Dropdown";

type Props = {
    component: ICompDinamism;
};
const cnDinamism = cn("dinamism");

export default function DinamismBlock(props: Props) {
    return (
        <div className={`${cnDinamism()}`}>
            <div className={cnDinamism("content")}>
                <p>
                    {
                        "Способность выражать свои мысли и идеи с помощью энергичного и живого выступления, проявление активности, энтузиазма в речи."
                    }
                </p>
            </div>
            {props.component.child.map((el, ind) => (
                <Dropdown
                    key={ind}
                    title={el.childTitle}
                    subtitle={el.childSubtitle}
                    visible={el.visible}
                    invisible={el.invisible}
                />
            ))}
            <Recomendation />
        </div>
    );
}


.\src\components\Analytics\-Block\Dinamism\style.scss
-----------------------------------------------------
.dinamism {
    position: relative;
    display: flex;
    flex-direction: column;
    gap: 16px;
    align-items: flex-start;
    width: 100%;
    height: 100%;
    padding: 16px;
    font-family: "Onest";
    background: #fff;
    border-radius: 12px;

    &-content {
        width: 100%;
        color: #37476a;
        font-weight: 400;
        font-size: 16px;
        line-height: 20px;
    }
}


.\src\components\Analytics\-Block\Dinamism\Energy\Main\index.tsx
----------------------------------------------------------------
import "./style.scss";

type Props = {};

export default function MainEnergy(props: Props) {
    return <>Вставить чё-то</>;
}


.\src\components\Analytics\-Block\Dinamism\Energy\Main\style.scss
-----------------------------------------------------------------


.\src\components\Analytics\-Block\Dinamism\Energy\Secondary\index.tsx
---------------------------------------------------------------------
/* eslint-disable jsx-a11y/anchor-is-valid */
import { cn } from "@bem-react/classname";

import "./style.scss";

import GraphColor from "../../../../../../models/graph/_colors";
import {
    EnergyDataItem,
    EnergyType,
} from "../../../../../../models/graph/energy";
import EnergyGraph from "../../../../../Graphs/Energy";

type Props = {
    data: EnergyDataItem[];
    graphs?: string;
    average: number;
};

const cnEnergy = cn("energy");

type Line = {
    type: string;
    color: string;
};
type propsLine = {
    typeLine: Line[];
};

export default function SecondaryEnergy(props: Props) {
    // это лучше через useEffect сделать?

    let EnergyLine: propsLine = {
        typeLine: [
            {
                type: "Мгновенная энергия",
                color: GraphColor.BLUE,
            },
        ],
    };
    return (
        <>
            <div className={cnEnergy("marker")}>
                <p className={cnEnergy("description")}>
                    <b className={cnEnergy("description-bold")}>
                        {"Энергичность"}
                    </b>{" "}
                    {
                        "речи определяет её силу, необходимую для донесения смысла произносимой речи до аудитории."
                    }
                </p>
                <div className={cnEnergy("list")}>
                    {/* вот тут надо решить вопрос с блоками цветов */}
                    {EnergyLine.typeLine.map((el, ind) => (
                        <div key={ind} className={cnEnergy("color")}>
                            <div
                                className={cnEnergy("color-item")}
                                style={{
                                    background: el.color,
                                }}
                            ></div>
                            <div className={cnEnergy("text")}>{el.type}</div>
                        </div>
                    ))}
                </div>
            </div>

            <div className={cnEnergy("graph")}>
                {/* сюда передавать state для того тчобы отображать 1 график */}
                <EnergyGraph
                    data={props.data}
                    param={EnergyType.ENERGY}
                    average={props.average * 100}
                />
            </div>
        </>
    );
}


.\src\components\Analytics\-Block\Dinamism\Energy\Secondary\style.scss
----------------------------------------------------------------------
.energy {
    width: 100%;

    &-marker {
        display: flex;
        justify-content: space-between;
        margin-bottom: 8px;
        padding: 1rem;
        font-family: "Onest";
        background: #f7faff;
        border-radius: 12px;
    }

    &-description {
        display: inline-block;
        // надо сделать динамически
        width: 80%;
        overflow: auto;
        color: #17282f;
        font-weight: 400;
        font-size: 16px;
        line-height: 20px;

        &-bold {
            font-weight: 500;
        }
    }

    &-list {
        display: flex;
        flex-direction: column;
        gap: 6px;
        width: 190px;
        padding: 0 0.5rem;
    }

    &-color {
        display: flex;
        flex-wrap: nowrap;
        gap: 10px;
        align-items: center;

        &-item {
            width: 20px;
            height: 20px;
            border-radius: 4px;
        }
    }

    &-text {
        color: #37476a;
        font-weight: 400;
        font-size: 14px;
        line-height: 18px;
    }

    &-graph > img {
        width: 100%;
    }
}


.\src\components\Analytics\-Block\Dinamism\NonMonotony\Main\helper.ts
---------------------------------------------------------------------
type NonMonotonyHelper = {
    subtitle: string;
    result: string;
};

export function NonMonotonyTempHelper(value: number): NonMonotonyHelper {
    return value < 100
        ? {
              subtitle: "слишком размеренно, к Вам могут потерять интерес",
              result: "НИЗКИЙ",
          }
        : value > 140
        ? {
              subtitle: "трудно уследить за Вашими мыслями",
              result: "ВЫСОКИЙ",
          }
        : {
              subtitle: "средний, ровный и без пауз",
              result: "НОРМА",
          };
}
export function NonMonotonyVolumeHelper(value: number): NonMonotonyHelper {
    return value < 40
        ? {
              subtitle: "может быть Вы не уверены в том, что говорите?",
              result: "СЛИШКОМ ТИХО",
          }
        : value > 60
        ? {
              subtitle: "выглядит так, как будто Вы проявляете агрессию",
              result: "СЛИШКОМ ГРОМКО",
          }
        : {
              subtitle: "оптимальна для выступающего",
              result: "НОРМА",
          };
}
export function NonMonotonyToneHelper(value: number): NonMonotonyHelper {
    return value < 0.34
        ? {
              subtitle: "однообразие звучания притупляет восприятие",
              result: "МАЛЕНЬКИЙ",
          }
        : value > 0.6
        ? {
              subtitle: "так Вы оказываете сильное воздействие на аудиторию",
              result: "БОЛЬШОЙ",
          }
        : {
              subtitle: "Вас приятно слушать ",
              result: "НОРМА",
          };
}


.\src\components\Analytics\-Block\Dinamism\NonMonotony\Main\index.tsx
---------------------------------------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";

import ProgressCircle from "../ProgressCircle";

import { IComponents } from "../../../../../Analytics/-Block/models/IComponents";

type Props = {
    info: IComponents[];
};

const cnProgressLine = cn("progress-circle_block");

export default function MainNonMonotony(props: Props) {
    return (
        <>
            <div className={cnProgressLine()}>
                {props.info.map((el, index) => (
                    <ProgressCircle key={index} info={el} />
                ))}
            </div>
        </>
    );
}


.\src\components\Analytics\-Block\Dinamism\NonMonotony\Main\style.scss
----------------------------------------------------------------------
.progress-circle_block {
    display: flex;
    flex-wrap: nowrap;
    gap: 15px;
    width: 100%;
}


.\src\components\Analytics\-Block\Dinamism\NonMonotony\ProgressCircle\index.tsx
-------------------------------------------------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";

import { IComponents } from "../../../../../Analytics/-Block/models/IComponents";




type Props = {
    info: IComponents;
};

const cnProgressCircle = cn("circle");
const cnCircleLeft = cn("circle-ls");
const cnCircleRight = cn("circle-rs");

export default function ProgressCircle({ info }: Props) {
    const k: number = 23 / 18;
    const r: number = 139;
    const x: number = +Math.cos((Math.PI * k * info.value) / 100).toFixed(5);
    const y: number = +Math.sin((Math.PI * k * info.value) / 100).toFixed(5);

    return (
        <div className={cnProgressCircle("item", cnProgressCircle("border"))}>
            <div className={cnProgressCircle("left-side")}>
                <div className={cnCircleLeft("result")}>
                    <span style={{ color: info.fill }}>{info.result}</span>
                </div>
                <div className={cnCircleLeft("circle")}>
                    <div className={cnCircleLeft("percent")} style={{}}>
                        <svg viewBox="0 0 160 160">
                            <circle
                                cx={80}
                                cy={75}
                                r={61}
                                style={{
                                    stroke: `#ADB9D4`,
                                    strokeDasharray: 440,
                                    strokeDashoffset: 440 - 440 + r + 56,
                                }}
                            ></circle>
                            <circle
                                cx={
                                    19 +
                                    61 +
                                    61 * +Math.cos(Math.PI * k).toFixed(5)
                                }
                                cy={
                                    14 +
                                    61 +
                                    61 * +Math.sin(Math.PI * k).toFixed(5)
                                }
                                r={4.3}
                                style={{
                                    stroke: `#ADB9D4`,
                                    strokeWidth: 0.1,
                                    fill: `#ADB9D4`,
                                    zIndex: 1000,
                                }}
                            ></circle>
                            <circle
                                cx={80}
                                cy={75}
                                r={61}
                                style={{
                                    stroke: `${info.fill}`,
                                    strokeDasharray: 440,
                                    strokeDashoffset:
                                        440 -
                                        ((440 - 56 - r) * info.value) / 100,
                                    filter: `drop-shadow(${info.shadow})`,
                                }}
                            ></circle>
                            <circle
                                cx={19 + 61 + 61 * x}
                                cy={14 + 61 + 61 * y}
                                r={2.5}
                                style={{
                                    stroke: `${info.fill}`,
                                    zIndex: 1000,
                                    fill: `${info.fill}`,
                                    filter: `drop-shadow(${info.shadow})`,
                                }}
                            ></circle>
                            <circle
                                cx={141}
                                cy={75}
                                r={4.3}
                                style={{
                                    stroke: `${info.fill}`,
                                    strokeWidth: 0.1,
                                    zIndex: 1000,
                                    fill: `${info.fill}`,
                                    filter: `drop-shadow(${info.shadow})`,
                                }}
                            ></circle>
                        </svg>
                    </div>
                </div>
            </div>
            <div className={cnCircleRight()}>
                <div className={cnCircleRight("content")}>
                    <div className={cnCircleRight("title")}>{info.title}</div>
                    <span className={cnCircleRight("text")}>
                        {info.subtitle}
                    </span>
                </div>
            </div>
        </div>
    );
}


.\src\components\Analytics\-Block\Dinamism\NonMonotony\ProgressCircle\style.scss
--------------------------------------------------------------------------------
.circle {
    &-item {
        position: relative;
        width: 100%;
        margin-bottom: 6px;
    }

    &-border {
        display: flex;
        gap: 8px;
        margin-bottom: 0;
        background: #f7faff;
        border-radius: 33px;
    }

    &-ls-result {
        position: absolute;
        top: 78px;
        left: 38px;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 77px;
        height: 36px;
        text-align: center;
        transform: translateX(-50%);
        transform: translateY(-50%);

        & > span {
            font-weight: 700;
            font-size: 14px;
            font-family: "Onest";
            font-style: normal;
            line-height: 18px;
            text-transform: uppercase;
            word-wrap: break-word;
        }
    }

    &-ls-circle {
        width: 150px;
        height: 135px;
    }

    &-ls-percent {
        position: relative;
        width: 150px;
        height: 150px;
        transform: rotate(155deg);

        & > svg {
            position: relative;
            width: 150px;
            height: 150px;

            & > circle {
                width: 100%;
                height: 100%;
                fill: transparent;
                stroke-width: 9px;
            }
        }
    }

    &-rs {
        display: flex;
        flex-wrap: nowrap;
        align-items: center;
        // width: 217px;
        font-family: "Onest";

        &-title {
            width: 100%;
            margin-bottom: 0.5rem;
            font-weight: 700;
            font-size: 20px;
            line-height: 25px;
            text-transform: uppercase;
        }

        &-text {
            display: inline-block;
            color: #7c8eb5;
            font-weight: 400;
            font-size: 16px;
            line-height: 20px;
        }
    }
}


.\src\components\Analytics\-Block\Dinamism\NonMonotony\Secondary\index.tsx
--------------------------------------------------------------------------
/* eslint-disable jsx-a11y/anchor-is-valid */
import { cn } from "@bem-react/classname";

import "./style.scss";

import { useState } from "react";

import NonMonotonyGraph from "../../../../../Graphs/NonMonotony";

import {
    NonMonotonyDataItem,
    NonMonotonyType,
} from "../../../../../../models/graph/monotony";
import GraphColor from "../../../../../../models/graph/_colors";

type Props = {
    graphs: Graph[];
    data: NonMonotonyDataItem[];
    averages: number[];
};

type Graph = {
    link?: string;
    graph?: string;
};

const cnNonMon = cn("nonmonotony");


type Line = {
    type: string;
    color: string;
};
type propsLine = {
    typeLine: Line[];
};

export default function SecondaryNonMonotony(props: Props) {
    // это лучше через useEffect сделать?
    const choiseLinks = (ind: number) => {
        const linkEl = document.querySelectorAll(".nonmonotony-item");
        linkEl.forEach((el) => el.classList.remove("nonmonotony-choise"));
        linkEl[ind].classList.add("nonmonotony-choise");
        setGraph(ind);
        return;
    };
    let NonMonLIne: propsLine = {
        typeLine: [
            {
                type: "основной график",
                color: GraphColor.ORANGE,
            },
            {
                type: "среднее значение",
                color: "#7C8EB5",
            },
        ],
    };
    const color = [GraphColor.BLUE, GraphColor.RED, GraphColor.ORANGE];
    // сюда передавать значение графика
    // изначально поставить 2
    const [graph, setGraph] = useState(0);
    const [temp, volume, tone] = props.averages;

    return (
        <>
            <div className={cnNonMon("marker")}>
                <p className={cnNonMon("description")}>
                    <b className={cnNonMon("description-bold")}>
                        {"Немонотонность"}
                    </b>{" "}
                    {
                        "характеризуется средним (100-140 слов в минуту) и ровным темпом речи, оптимальной (для конкретной аудитории) громкостью голоса и диапазоном изменения основного тона речи в процессе выступления 25-35 Гц."
                    }
                </p>
                <div className={cnNonMon("list")}>
                    {NonMonLIne.typeLine.map((el, ind) => (
                        <div key={ind} className={cnNonMon("color")}>
                            {graph === 2 && ind !== 0 ? (
                                <></>
                            ) : (
                                <>
                                    <div
                                        className={cnNonMon("color-item")}
                                        style={{
                                            background:
                                                ind === 0
                                                    ? color[graph]
                                                    : "#7C8EB5",
                                        }}
                                    ></div>
                                    <div className={cnNonMon("text")}>
                                        {el.type}
                                    </div>
                                </>
                            )}
                        </div>
                    ))}
                </div>
            </div>
            <div className={cnNonMon("analysis")}>
                <span className={cnNonMon("set")}>{"Параметры:"}</span>
                <ul className={cnNonMon("menu")}>
                    {props.graphs.map((el, ind) => (
                        <li
                            key={ind}
                            className={
                                ind === 0
                                    ? cnNonMon("item", cnNonMon("choise"))
                                    : cnNonMon("item")
                            }
                        >
                            <a
                                className={cnNonMon("link")}
                                onClick={() => {
                                    choiseLinks(ind);
                                }}
                            >
                                {el.link}
                            </a>
                        </li>
                    ))}
                </ul>
            </div>
            <div className={cnNonMon("graph")}>
                {/* сюда передавать state для того тчобы отображать 1 график */}
                <NonMonotonyGraph
                    data={props.data}
                    param={
                        // топорно, подумать как сделать красиво
                        graph === 0
                            ? NonMonotonyType.RATE
                            : graph === 1
                            ? NonMonotonyType.VOLUME
                            : NonMonotonyType.TONE
                        // : graph === 3
                        // ? NonMonotonyType.TONE
                        // : null
                    }
                    average={graph === 0 ? temp : graph === 1 ? volume : tone}
                    value={graph === 0 ? 0 : graph === 1 ? 1 : 2}
                />
            </div>
        </>
    );
}


.\src\components\Analytics\-Block\Dinamism\NonMonotony\Secondary\style.scss
---------------------------------------------------------------------------
.nonmonotony {
    width: 100%;

    &-marker {
        display: flex;
        padding: 1rem;
        font-family: "Onest";
        background: #f7faff;
        border-radius: 12px;
    }

    &-description {
        display: inline-block;
        // надо сделать динамически
        width: 83%;
        overflow: auto;
        color: #17282f;
        font-weight: 400;
        font-size: 16px;
        line-height: 20px;

        &-bold {
            font-weight: 500;
        }
    }

    &-list {
        display: flex;
        flex-direction: column;
        gap: 6px;
        width: 170px;
        height: 46px;
        padding: 0 0.5rem;
    }

    &-color {
        display: flex;
        flex-wrap: nowrap;
        gap: 10px;
        align-items: center;

        &-item {
            width: 20px;
            height: 20px;
            border-radius: 4px;
        }
    }

    &-text {
        color: #37476a;
        font-weight: 400;
        font-size: 14px;
        line-height: 18px;
    }

    &-analysis {
        display: flex;
        align-items: center;
        padding: 4px 0;
        color: #37476a;
        font-weight: 700;
        font-size: 16px;
        font-family: "Montserrat Alternates";
        line-height: 20px;
    }

    &-set {
        margin-right: 24px;
    }

    &-menu {
        display: flex;
        flex-wrap: nowrap;
        gap: 12px;
    }

    &-item {
        padding: 8px 12px;
        color: #7c8eb5;
        font-weight: 600;
        font-size: 14px;
        line-height: 17px;
        cursor: pointer;
    }

    &-graph > img {
        width: 100%;
    }

    &-choise {
        color: #2477f4;
        background: rgb(36 119 244 / 10%);
        border-radius: 8px;
    }
}


.\src\components\Analytics\-Block\models\IBreakdown.ts
------------------------------------------------------
import { IModification } from "./IModification";

export interface IBreakdown {
    time: string;
    description: string;
    modification: IModification;
}


.\src\components\Analytics\-Block\models\ICitation.ts
-----------------------------------------------------
export interface IСitation {
    type: string;
    color: string;
}


.\src\components\Analytics\-Block\models\IComp.ts
-------------------------------------------------
import { ReactNode } from "react";

export interface IComp {
    result: string;
    styles: Styles;
    child: Children[];
}

type Styles = {
    color: string;
    background: string;
};

type Children = {
    childTitle: string;
    childSubtitle: string;
    visible: ReactNode;
    invisible: ReactNode;
};


.\src\components\Analytics\-Block\models\ICompDinamism.ts
---------------------------------------------------------
import { ReactNode } from "react";

export interface ICompDinamism {
    result: string;
    styles: Styles;
    child: Childs[];
}

type Styles = {
    color: string;
    background: string;
};

type Childs = {
    childTitle: string;
    childSubtitle: string;
    visible: ReactNode;
    invisible: ReactNode;
};


.\src\components\Analytics\-Block\models\IComponents.ts
-------------------------------------------------------
export interface IComponents {
    title?: string;
    subtitle?: string;
    result?: string;
    fill?: string;
    dotfill?: string;
    shadow?: string;
    img?: string;
    value: number;
}


.\src\components\Analytics\-Block\models\IEmotionalArousal.ts
-------------------------------------------------------------
export interface IEmotionalArousal {
    title: string;
    subtitle: string;
    result: number;
    fill: string[];
    limit: number;
}


.\src\components\Analytics\-Block\models\IModification.ts
---------------------------------------------------------
export interface IModification {
    type: string;
    str: string;
    link: string;
}


.\src\components\Analytics\-Block\Persuasiveness\index.tsx
----------------------------------------------------------
import { ReactNode } from "react";
import { cn } from "@bem-react/classname";
import { ReactSVG } from "react-svg";

import "./style.scss";

import Recomendation from "../-Recomendation";

import { ICompDinamism } from "../../../Analytics/-Block/models/ICompDinamism";
import Dropdown from "../../../Dropdown";

type Props = {
    component: ICompDinamism;
};
const cnPersuasiveness = cn("persuasiveness");

export default function PersuasivenessBlock(props: Props) {
    return (
        <div className={`${cnPersuasiveness()}`}>
            <div className={cnPersuasiveness("content")}>
                <p>
                    {
                        "Способность выражать свои мысли и идеи с помощью энергичного и живого выступления, проявление активности, энтузиазма в речи."
                    }
                </p>
            </div>
            {props.component.child.map((el, ind) => (
                <Dropdown
                    key={ind}
                    title={el.childTitle}
                    subtitle={el.childSubtitle}
                    visible={el.visible}
                    invisible={el.invisible}
                />
            ))}
            <Recomendation />
        </div>
    );
}


.\src\components\Analytics\-Block\Persuasiveness\style.scss
-----------------------------------------------------------
.persuasiveness {
    position: relative;
    display: flex;
    flex-direction: column;
    gap: 16px;
    align-items: flex-start;
    width: 100%;
    height: 100%;
    padding: 16px;
    font-family: "Onest";
    background: #fff;
    border-radius: 12px;

    &-content {
        width: 100%;
        color: #37476a;
        font-weight: 400;
        font-size: 16px;
        line-height: 20px;
    }
}


.\src\components\Analytics\-Block\Persuasiveness\Confidence\Main\index.tsx
--------------------------------------------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";
import ConfidenceLineGraph from "../../../../../Graphs/ConfidenceLine";
import { ConfidenceDataItem } from "../../../../../../models/graph/confidence";

type Props = {
    data: ConfidenceDataItem[];
    endTime: number;
};

export default function MainConfidence(props: Props) {
    return (
        <>
            <ConfidenceLineGraph
                items={props.data}
                startTime={0}
                endTime={props.endTime}
            />
        </>
    );
}


.\src\components\Analytics\-Block\Persuasiveness\Confidence\Main\style.scss
---------------------------------------------------------------------------
.progress-circle_block {
    display: flex;
    flex-wrap: nowrap;
    gap: 15px;
    width: 100%;
}


.\src\components\Analytics\-Block\Persuasiveness\Confidence\Secondary\index.tsx
-------------------------------------------------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";

import { ConfidenceDataItem } from "../../../../../../models/graph/confidence";
import ConfidenceGraph from "../../../../../Graphs/Confidence";

type Props = {
    data: ConfidenceDataItem[];
    state: string;
    average: number;
};

interface IConfidence {
    type: string;
    color: string;
}

const cnConfidence = cn("confidence");

type propsConfidence = {
    typeConfidence: IConfidence[];
};
let confidence: propsConfidence = {
    typeConfidence: [
        {
            type: "зона высокой уверенности",
            color: "#24F19B",
        },
        {
            type: "зона средней уверенности",
            color: "#FFE817",
        },
        {
            type: "зона низкой уверенности",
            color: "#FF4E78",
        },
    ],
};

export default function SecondaryConfidence(props: Props) {
    return (
        <>
            <div className={cnConfidence()}>
                <p className={cnConfidence("description")}>
                    <b className={cnConfidence("description-bold")}>
                        {"Уверенность"}
                    </b>{" "}
                    {
                        "определяется таким внутренним состоянием человека, в котором он выражает согласие произносимым высказываниям без боязни возможности ошибки."
                    }
                </p>
                <div className={cnConfidence("list")}>
                    {confidence.typeConfidence.map((el, index) => (
                        <div key={index} className={cnConfidence("marker")}>
                            <div style={{ background: el.color }}></div>
                            <div className={cnConfidence("title")}>
                                {el.type}
                            </div>
                        </div>
                    ))}
                </div>
            </div>
            <ConfidenceGraph data={props.data} average={props.average} />
        </>
    );
}


.\src\components\Analytics\-Block\Persuasiveness\Confidence\Secondary\style.scss
--------------------------------------------------------------------------------
.confidence {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    margin-bottom: 8px;
    padding: 1rem 1.5rem;
    background: #f7faff;
    border-radius: 12px;

    &-description {
        display: inline-block;
        // надо сделать динамически
        width: 55%;
        overflow: auto;
        color: #17282f;
        font-weight: 400;
        font-size: 16px;
        font-family: "Onest";
        line-height: 20px;

        &-bold {
            font-weight: 500;
        }
    }

    &-list {
        display: flex;
        flex-direction: column;
        gap: 6px;
        padding: 0 0.5rem;
    }

    &-marker {
        display: flex;
        flex-direction: row;
        gap: 10px;

        & > div:first-child {
            width: 20px;
            height: 20px;
            border-radius: 4px;
        }
    }

    &-title {
        color: #37476a;
        font-weight: 400;
        font-size: 14px;
        line-height: 18px;
    }

    &-item {
        display: flex;
        gap: 8px;
        align-items: center;
    }

    &-time {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 50px;
        height: 20px;
        font-weight: 700;
        font-size: 12px;
        line-height: 15px;
        border-radius: 4px;
    }

    &-original {
        color: #7c8eb5;
        background: #f7faff;
    }

    &-citation {
        color: #fff;
        background: linear-gradient(48.4deg, #ffb800 -18.18%, #f90 105.3%);
    }

    &-selfCitation {
        color: #fff;
        background: linear-gradient(42.13deg, #8540fd -25.36%, #af1ff2 130.25%);
    }

    &-borrowing {
        color: #fff;
        background: linear-gradient(
            32.08deg,
            rgb(36 119 244) 0%,
            rgb(58 134 250) 100%
        );
    }

    // &-description {
    //     width: 100%;
    //     padding: 10px;
    //     background: #f7faff;
    //     border-radius: 8px;
    //     font-weight: 400;
    //     font-size: 14px;
    //     line-height: 18px;
    //     color: #37476a;

    //     & > a {
    //         font-weight: 500;
    //         text-decoration: none;
    //     }
    // }

    &-citation_text {
        & > a {
            color: #f5b40c;
        }
    }

    &-selfCitation_text {
        & > a {
            color: #9532f8;
        }
    }

    &-borrowing_text {
        & > a {
            color: #2477f4;
        }
    }
}


.\src\components\Analytics\-Block\Persuasiveness\EmotionalArousal\Main\index.tsx
--------------------------------------------------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";

type Props = {};

export default function MainEmotionalArousal(props: Props) {
    return <>Вставить чё-то</>;
}


.\src\components\Analytics\-Block\Persuasiveness\EmotionalArousal\Main\style.scss
---------------------------------------------------------------------------------
.progress-circle_block {
    display: flex;
    flex-wrap: nowrap;
    gap: 15px;
    width: 100%;
}


.\src\components\Analytics\-Block\Persuasiveness\EmotionalArousal\ProgressCircleFill\index.tsx
----------------------------------------------------------------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";

import { IEmotionalArousal } from "../../../models/IEmotionalArousal";

type Props = {
    info: IEmotionalArousal;
    id: number;
    value?: number;
};

const cnProgressCircle = cn("circleFill");
const cnCircleLeft = cn("circleFill-ls");
const cnCircleRight = cn("circleFill-rs");

export default function ProgressCircleFill(props: Props) {
    const fill =
        props.id !== 2 ? ["#F35B60", "#36ED53"] : ["#36ED53", "#F35B60"];
    const k: number = 23 / 18;
    const r: number = 139;
    const x: number = +Math.cos(
        (Math.PI * k * props.info.result * 100) / 100
    ).toFixed(5);
    const y: number = +Math.sin(
        (Math.PI * k * props.info.result * 100) / 100
    ).toFixed(5);

    return (
        <div className={cnProgressCircle("item", cnProgressCircle("border"))}>
            <div className={cnProgressCircle("left-side")}>
                <div className={cnCircleLeft("result")}>
                    <span>{props.info.result?.toFixed(2)}</span>
                </div>
                <div className={cnCircleLeft("circle")}>
                    <div className={cnCircleLeft("percent")} style={{}}>
                        <svg viewBox="0 0 160 160">
                            <circle
                                className="sector"
                                cx={80}
                                cy={75}
                                r={30}
                                style={{
                                    stroke: `${props.info.fill[1]}`,
                                    strokeDasharray: 440,
                                    strokeDashoffset: 440 - 440 + r * 1.89 + 56,
                                    zIndex: 10,
                                }}
                            ></circle>
                            <circle
                                className="sector"
                                cx={80}
                                cy={75}
                                r={30}
                                style={{
                                    stroke: `${props.info.fill[0]}`,
                                    strokeDasharray: 440,
                                    strokeDashoffset:
                                        440 -
                                        ((440 - 56 - r * 1.89) *
                                            props.info.limit *
                                            100) /
                                            100,
                                    zIndex: 20,
                                }}
                            ></circle>
                            {/* серая полоса прогресса */}
                            <circle
                                cx={80}
                                cy={75}
                                r={61}
                                style={{
                                    stroke: `#ADB9D4`,
                                    strokeDasharray: 440,
                                    strokeDashoffset: 440 - 440 + r + 56,
                                }}
                            ></circle>
                            {/* серый шарик в конце */}
                            <circle
                                cx={
                                    19 +
                                    61 +
                                    61 * +Math.cos(Math.PI * k).toFixed(5)
                                }
                                cy={
                                    14 +
                                    61 +
                                    61 * +Math.sin(Math.PI * k).toFixed(5)
                                }
                                r={4.3}
                                style={{
                                    stroke: `#ADB9D4`,
                                    strokeWidth: 0.1,
                                    fill: `#ADB9D4`,
                                    zIndex: 1000,
                                }}
                            ></circle>
                            {/* линия заливки */}
                            <circle
                                cx={80}
                                cy={75}
                                r={61}
                                style={{
                                    stroke: `${
                                        props.info.result < props.info.limit
                                            ? fill[0]
                                            : fill[1]
                                    }`,
                                    strokeDasharray: 440,
                                    strokeDashoffset:
                                        440 -
                                        ((440 - 56 - r) *
                                            props.info.result *
                                            100) /
                                            100,
                                    zIndex: 1000,
                                }}
                            ></circle>
                            {/* шарик заливки */}
                            <circle
                                cx={19 + 61 + 61 * x}
                                cy={14 + 61 + 61 * y}
                                r={8}
                                style={{
                                    stroke: `${
                                        props.info.result < props.info.limit
                                            ? fill[0]
                                            : fill[1]
                                    }`,
                                    strokeWidth: 0.1,
                                    fill: `${
                                        props.info.result < props.info.limit
                                            ? fill[0]
                                            : fill[1]
                                    }`,
                                    zIndex: 1000,
                                }}
                            ></circle>
                            {/* шарик заливки крайний */}
                            <circle
                                cx={141}
                                cy={75}
                                r={4.3}
                                style={{
                                    stroke: `${
                                        props.info.result < props.info.limit
                                            ? fill[0]
                                            : fill[1]
                                    }`,
                                    strokeWidth: 0.1,
                                    fill: `${
                                        props.info.result < props.info.limit
                                            ? fill[0]
                                            : fill[1]
                                    }`,
                                    zIndex: 1000,
                                }}
                            ></circle>
                        </svg>
                    </div>
                </div>
            </div>
            <div className={cnCircleRight()}>
                <div className={cnCircleRight("content")}>
                    <div className={cnCircleRight("title")}>
                        {props.info.title}
                    </div>
                    <span className={cnCircleRight("text")}>
                        {props.info.subtitle}
                    </span>
                </div>
            </div>
        </div>
    );
}


.\src\components\Analytics\-Block\Persuasiveness\EmotionalArousal\ProgressCircleFill\style.scss
-----------------------------------------------------------------------------------------------
.circleFill {
    &-item {
        position: relative;
        width: 100%;
        margin-bottom: 6px;
    }

    &-border {
        display: flex;
        gap: 8px;
        margin-bottom: 0;
        background: #f7faff;
        border-radius: 33px;
    }

    &-ls-result {
        position: absolute;
        top: 78px;
        left: 38px;
        z-index: 100;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 77px;
        height: 36px;
        text-align: center;
        transform: translateX(-50%);
        transform: translateY(-50%);

        & > span {
            color: #37476a;
            font-weight: 600;
            font-size: 32px;
            font-family: "Montserrat Alternates";
            font-style: normal;
            line-height: 39px;
            text-transform: uppercase;
            word-wrap: break-word;
        }
    }

    &-ls-circle {
        width: 150px;
        height: 135px;
    }

    &-ls-percent {
        position: relative;
        width: 150px;
        height: 150px;
        transform: rotate(155deg);

        & > svg {
            position: relative;
            width: 150px;
            height: 150px;

            & > circle {
                width: 100%;
                height: 100%;
                fill: transparent;
                stroke-width: 9px;
            }

            & > circle.sector {
                fill: none;
                stroke: green;
                stroke-width: 61px;
            }
        }
    }

    &-rs {
        display: flex;
        flex-wrap: nowrap;
        align-items: center;
        padding-top: 8px;
        padding-right: 8px;
        font-family: "Onest";

        &-title {
            width: 100%;
            margin-bottom: 0.5rem;
            color: #37476a;
            font-weight: 700;
            font-size: 20px;
            line-height: 25px;
            text-transform: uppercase;
        }

        &-text {
            display: inline-block;
            color: #7c8eb5;
            font-weight: 400;
            font-size: 12px;
            line-height: 15px;
        }
    }
}


.\src\components\Analytics\-Block\Persuasiveness\EmotionalArousal\Secondary\index.tsx
-------------------------------------------------------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";

import ProgressCircleFill from "../ProgressCircleFill";

import { IEmotionalArousal } from "../../../models/IEmotionalArousal";

type Props = {
    info: IEmotionalArousal[];
};

const cnEmotionalArousal = cn("emotional-arousal_block");

export default function SecondaryEmotionalArousal(props: Props) {
    return (
        <>
            <div className={cnEmotionalArousal("marker")}>
                <p className={cnEmotionalArousal("description")}>
                    <b className={cnEmotionalArousal("description-bold")}>
                        {"Эмоциональное возбуждение"}
                    </b>{" "}
                    {
                        "проявляется в виде усиленной реакции на события и впечатления и оценивается набором психолингвистических маркеров:"
                    }
                </p>
            </div>
            <div className={cnEmotionalArousal()}>
                {props.info.map((el, index) => (
                    <ProgressCircleFill key={index} info={el} id={index} />
                ))}
            </div>
        </>
    );
}


.\src\components\Analytics\-Block\Persuasiveness\EmotionalArousal\Secondary\style.scss
--------------------------------------------------------------------------------------
.emotional-arousal_block {
    display: flex;
    flex-wrap: nowrap;
    gap: 15px;
    width: 100%;

    &-marker {
        display: flex;
        margin-bottom: 24px;
        padding: 1rem;
        font-family: "Onest";
        background: #f7faff;
        border-radius: 12px;
    }

    &-description {
        // надо сделать динамически
        // width: 83%;
        display: inline-block;
        overflow: auto;
        color: #17282f;
        font-weight: 400;
        font-size: 16px;
        line-height: 20px;

        &-bold {
            font-weight: 500;
        }
    }
}

.nonmonotony {
    width: 100%;

    &-list {
        display: flex;
        flex-direction: column;
        gap: 6px;
        width: 170px;
        padding: 0 0.5rem;
    }

    &-color {
        display: flex;
        flex-wrap: nowrap;
        gap: 10px;
        align-items: center;

        &-item {
            width: 20px;
            height: 20px;
            border-radius: 4px;
        }
    }

    &-text {
        color: #37476a;
        font-weight: 400;
        font-size: 14px;
        line-height: 18px;
    }

    &-analysis {
        display: flex;
        align-items: center;
        padding: 4px 0;
        color: #37476a;
        font-weight: 700;
        font-size: 16px;
        font-family: "Montserrat Alternates";
        line-height: 20px;
    }

    &-set {
        margin-right: 24px;
    }

    &-menu {
        display: flex;
        flex-wrap: nowrap;
        gap: 12px;
    }

    &-item {
        padding: 8px 12px;
        color: #7c8eb5;
        font-weight: 600;
        font-size: 14px;
        line-height: 17px;
        cursor: pointer;
    }

    &-link {
    }

    &-graph > img {
        width: 100%;
    }

    &-choise {
        color: #2477f4;
        background: rgb(36 119 244 / 10%);
        border-radius: 8px;
    }
}


.\src\components\Analytics\-Header\index.tsx
--------------------------------------------
import { cn } from "@bem-react/classname";
import { ReactSVG } from "react-svg";

import "./style.scss";

import Note2 from "../-Header/icons/note-2.svg";

export interface IHeaderAnalytics {
    title: string;
    result: string;
    styles: Styles;
}
type Styles = {
    color: string;
    background: string;
};

const cnHeaderAnalytic = cn("header-analytics");

export default function HeaderAnalytics(component: IHeaderAnalytics) {
    return (
        <>
            <div className={cnHeaderAnalytic("header")}>
                <ReactSVG className={cnHeaderAnalytic("icon")} src={Note2} />
                <div className={cnHeaderAnalytic("title")}>
                    {component.title}
                </div>
                <div
                    className={cnHeaderAnalytic("result")}
                    style={{
                        color: component.styles.color,
                        background: component.styles.background,
                    }}
                >
                    {component.result}
                </div>
            </div>
        </>
    );
}


.\src\components\Analytics\-Header\style.scss
---------------------------------------------
.header-analytics {
    position: relative;
    font-family: "Onest";

    &-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        width: 100%;
        font-family: "Montserrat Alternates";

        & > div:last-child {
            margin-left: auto;
        }
    }

    &-icon {
        margin-right: 8px;
    }

    &-title {
        color: #37476a;
        font-weight: 600;
        font-size: 24px;
        line-height: 29px;
    }

    &-result {
        padding: 6px 12px;
        font-weight: 600;
        font-size: 16px;
        line-height: 20px;
        border-radius: 40px;
        // background: #ffb800;
        // color: #ffffff;
    }
}


.\src\components\Archive\helpers.ts
-----------------------------------
export function convertTime(value: number | string) {
    value = typeof value !== "number" ? +value : value;
    value = Number.isInteger(value) ? value : Math.ceil(value);
    return value < 10
        ? `00:0${value}`
        : value < 60
        ? `00:${value.toFixed(0)}`
        : value < 600
        ? `0${Math.floor(value / 60)}:${
              value % 60 < 1
                  ? "00"
                  : Math.floor(value % 60) > 9
                  ? Math.floor(value % 60)
                  : `0${Math.floor(value % 60)}`
          }`
        : `${Math.floor(value / 60)}:${value % 60}`;
}

export function convertDate(value: string) {
    return value.slice(0, 10).split("-").reverse().join(".");
}


.\src\components\Archive\ArchivePopup\index.tsx
-----------------------------------------------
import { cn } from "@bem-react/classname";
import { UUID } from "crypto";
import "./style.scss";

import { ReactSVG } from "react-svg";

import DeleteIcon from "./icon/trash.svg";
import ChooseIcon from "./icon/archive-add.svg";

type Props = {
    ind: number;
    id: UUID;
    changeTickVideo: Function;
    state: string;
    handleClick: Function;
};

export default function ArchivePopup({
    ind,
    id,
    changeTickVideo,
    handleClick,
    state,
}: Props) {
    const cnArchivePopup = cn("archive-popup");

    const valuesPopup = [
        {
            icon: ChooseIcon,
            title: "Не учитывать в статистике",
            color: "#7C8EB5",
        },
        {
            icon: DeleteIcon,
            title: "Удалить",
            color: "#E73D42",
        },
    ];

    const getTick = (id: number) => {
        changeTickVideo(id);
    };

    const delVideo = (id: string) => {
        handleClick(id);
    };

    return (
        // разделить  методы
        <div key={ind} className={cnArchivePopup("", cnArchivePopup(state))}>
            {valuesPopup.map((el, index) => (
                <div
                    key={index}
                    className={cnArchivePopup("item")}
                    onClick={() => (index === 0 ? getTick(ind) : delVideo(id))}
                >
                    <ReactSVG
                        className={cnArchivePopup("icon")}
                        src={el.icon}
                    />
                    <p
                        className={cnArchivePopup("title")}
                        style={{ color: `${el.color}` }}
                    >
                        {el.title}
                    </p>
                </div>
            ))}
        </div>
    );
}


.\src\components\Archive\ArchivePopup\style.scss
------------------------------------------------
.archive-popup {
    position: absolute;
    right: 0;
    z-index: 100;
    display: flex;
    flex-direction: column;
    gap: 1px;
    background: #f3f5f9;
    border-radius: 16px;
    box-shadow: 0 4px 12px 0 rgb(73 113 187 / 20%);

    &-d-n {
        display: none;
    }

    &-item {
        display: flex;
        gap: 8px;
        width: 259px;
        padding: 10px 12px;
        background: #fff;
        cursor: pointer;
    }

    &-item:first-child {
        border-radius: 16px 16px 0 0;
    }

    &-item:last-child {
        border-radius: 0 0 16px 16px;
    }

    &-icon {
        width: 20px;
        height: 20px;
    }

    &-title {
        font-size: 16px;
        font-family: "Onest";
        line-height: 20px;
    }
}


.\src\components\Archive\ArchiveSearch\index.tsx
------------------------------------------------
import { cn } from "@bem-react/classname";
import "./style.scss";

import { ReactSVG } from "react-svg";

import SearchIcon from "./icon/search-status.svg";
import { useState } from "react";

type Props = { updateSearch: any };

export default function ArchiveSearch({ updateSearch }: Props) {
    const handleChange = () => {
        updateSearch(value);
    };
    const keyDownHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {
        switch(event.code){
            case "Enter":
                handleChange();
                break;
            default:
                break;
        }
      };

    const [value, setValue] = useState("");

    // console.log(value);
    const cnArchiveSearch = cn("archive-search");

    return (
        <div className={cnArchiveSearch("")}>
            <ReactSVG src={SearchIcon} />
            <input
                type="text"
                className={cnArchiveSearch("text")}
                placeholder="Введите название видео"
                onChange={(event) => {
                    setValue(event.target.value);
                }}
                onKeyDown={keyDownHandler}
            />
            <button
                type="button"
                className={cnArchiveSearch("btn")}
                onClick={handleChange}
            >
                {"Найти"}
            </button>
        </div>
    );
}


.\src\components\Archive\ArchiveSearch\style.scss
-------------------------------------------------
.archive-search {
    position: relative;
    display: flex;
    gap: 24px;

    & > div:first-child {
        position: absolute;
        top: 9px;
        left: 16px;
    }

    &-text {
        flex-grow: 1;
        height: 40px;
        padding: 9px 16px 9px 50px;
        color: #7c8eb5;
        font-weight: 500;
        font-size: 16px;
        font-family: "Montserrat Alternates";
        background: #e4eaf5;
        border: solid #e4eaf5;
        border-radius: 43px;
    }

    &-text::placeholder {
        color: #7c8eb5;
    }

    &-text:active,
    &-text:hover,
    &-text:focus {
        outline: 0;
        outline-offset: 0;
    }

    &-btn {
        padding: 6px 8px 6px 12px;
        color: #fff;
        font-weight: 600;
        font-size: 14px;
        font-family: "Montserrat Alternates";
        background: #ffb800;
        border: solid #ffb800;
        border-radius: 6px;
    }
}


.\src\components\Archive\ArchiveVideo\index.tsx
-----------------------------------------------
import { useState, useEffect } from "react";
import { IVideoFromBack } from "../../../models/video";
import ArchiveVideoItem from "../ArchiveVideoItem";
import "./style.scss";
import { useDeleteVideoByIdMutation } from "../../../store/api/userVideo";
import { UUID } from "crypto";

type Props = {
    video: IVideoFromBack[];
};

export default function ArchiveVideo({ video }: Props) {
    const [deleteRequest, deleteResponse] = useDeleteVideoByIdMutation();
    const { isLoading, isSuccess, isError } = deleteResponse;

    const func = async (id: string) => await deleteRequest(id);

    useEffect(() => {
        if (isSuccess) console.log("video was deleted");
    }, [isSuccess]);

    useEffect(() => {
        if (isError) alert("Something was wrong!");
    }, [isError]);

    const [state, setState] = useState(video);

    const removeItem = (id: string) => {
        setState((prevState) => prevState.filter((el) => el.id !== id));
        func(id);
    };

    return video && video.length !== 0 ? (
        <>
            {state.map((el, ind) => (
                <ArchiveVideoItem
                    handleClick={removeItem}
                    key={el.id}
                    el={el}
                    ind={ind}
                    visible={el.status_video === "ERROR" ? false : true}
                />
            ))}
        </>
    ) : (
        // <>{"Упс, что-то пошло не по плану"}</>
        <>{"Не удалось выполнить операцию, попробуйте обновить страницу"}</>
    );
}


.\src\components\Archive\ArchiveVideo\style.scss
------------------------------------------------
.archive-video {
    display: flex;
    gap: 8px;
    margin-top: 16px;
    padding-right: 12px;
    background: #fff;
    border-radius: 16px;

    &-el {
        position: relative;
        width: 260px;
        min-width: 260px;
        height: 149px;
        overflow: hidden;
        background-color: rgb(222 222 228);
        border-radius: 12px;

        & > div:first-child {
            position: absolute;
            //  для чего я это делал*?
            // left: 16px;
            // top: 16px;
        }
    }

    &-panel {
        display: flex;
        gap: 8px;

        &-more {
            position: relative;
        }
    }
}


.\src\components\Archive\ArchiveVideoItem\index.tsx
---------------------------------------------------
import { cn } from "@bem-react/classname";
import { Fragment, useEffect, useState } from "react";
import { ReactSVG } from "react-svg";
import ReactPlayer from "react-player";
import { IVideoFromBack } from "../../../models/video";
import "./style.scss";
import VideoProgressPanel from "../../VideoProgressPanel";
import DescriptionArchiveVideo from "../DescriptionVideo";
import ArchivePopup from "../ArchivePopup";

import More from "./icon/more.svg";
import Participation from "./icon/archive-participation.svg";
import Tick from "./icon/archive-tick.svg";

import { convertTime, convertDate } from "../helpers";
import { useGetTotalByIdQuery } from "../../../store/api/report";
import ArchiveVideoError from "../ArcviveVideoError";
import { useDeleteVideoByIdMutation } from "../../../store/api/userVideo";
import { useGetTotalByIdTestQuery } from "../../../store/api/reportTest";
import { useGetVideoByIdQuery } from "../../../store/api/apiWithDifAnswers";


type Props = {
    el: IVideoFromBack;
    ind: number;
    handleClick?: Function;
    visible?: boolean;
};

export default function ArchiveVideoItem({
    el,
    ind,
    handleClick,
    visible = true,
}: Props) {
    // export default function ArchiveVideoItem({ el, ind }: Props) {
    const cnArchiveVideo = cn("archive-video");

    let [openPopup, setOpenPopup] = useState<number[]>([]);

    let [tickedVideo, setTickedVideo] = useState<number[]>([]);

    const changePopup = (ind: number) => {
        let copy: number[] = Object.assign([], openPopup);
        !openPopup.includes(ind)
            ? copy.push(ind)
            : copy.splice(copy.indexOf(ind), 1);

        setOpenPopup([...copy]);
    };

    // поменять, от обратного
    const changeTickVideo = (ind: number) => {
        let copy: number[] = Object.assign([], openPopup);
        // let copy: number[] = [...openPopup];
        !tickedVideo.includes(ind)
            ? copy.push(ind)
            : copy.splice(copy.indexOf(ind), 1);

        setTickedVideo([...copy]);
    };

    const totalData = useGetTotalByIdTestQuery(el.id).data?.data?.values;
    const [result, setResult] = useState<number[]>([]);

    useEffect(() => {
        if (totalData) {
            console.log("totalData", totalData)
            setResult([
                totalData!.connectedness,
                totalData!.argumentativeness,
                totalData!.clarity,
                totalData!.dynamism,
                totalData!.persuasiveness,
                totalData!.communicative,
            ]);
        }
    }, [totalData]);

    const [deleteRequest, deleteResponse] = useDeleteVideoByIdMutation();
    const { isLoading, isSuccess, isError } = deleteResponse;

    useEffect(() => {
        if (isSuccess) console.log("video was deleted", deleteResponse);
    }, [isSuccess]);

    useEffect(() => {
        if (isError) alert("Something was wrong!");
    }, [isError]);

    const func = async (id: string) => await deleteRequest(id);

    const isAllow = visible;


    // getting video by id

    const videoFromBack = useGetVideoByIdQuery(el.id);
    const [videoURL,setVideoURL] = useState<string>();


    useEffect(()=>{
        if(videoFromBack.data && videoFromBack.isSuccess){
            setVideoURL(videoFromBack.data)
        }
    },[videoFromBack])



    return (
        <div className={cnArchiveVideo()}>
            <div className={cnArchiveVideo("el")}>
                <ReactSVG
                    className={cnArchiveVideo("tick")}
                    src={!tickedVideo.includes(ind) ? Tick : Participation}
                />
                <Fragment key={el.id}>
                    {videoURL && <ReactPlayer
                        url={videoURL}
                        width={"100%"}
                        height={"100%"}
                    />}
                </Fragment>
            </div>
            <DescriptionArchiveVideo
                id={el.id}
                title={`${el.title}`}
                time={convertTime(el.duration)}
                date={convertDate(el.upload_date)}
                isAllow={isAllow}
            />
            <div className={cnArchiveVideo("panel")}>
                {!visible && <ArchiveVideoError />}
                {visible && (
                    <VideoProgressPanel result={result} type={"small"} />
                )}
                <div className={cnArchiveVideo("panel-more")}>
                    <ReactSVG src={More} onClick={() => changePopup(ind)} />
                    <ArchivePopup
                        ind={ind}
                        id={el.id}
                        changeTickVideo={changeTickVideo}
                        handleClick={handleClick!}
                        state={openPopup.includes(ind) ? "" : "d-n"}
                    />
                </div>
            </div>
        </div>
    );
}


.\src\components\Archive\ArchiveVideoItem\style.scss
----------------------------------------------------
.archive-video {
    display: flex;
    gap: 8px;
    margin-top: 16px;
    padding-right: 12px;
    background: #fff;
    border-radius: 16px;

    &-el {
        position: relative;
        width: 260px;
        height: 149px;
        overflow: hidden;
        background-color: rgb(222 222 228);
        border-radius: 12px;
    }

    &-tick {
        position: absolute;
        top: 16px;
        left: 16px;
    }

    &-panel {
        display: flex;
        gap: 8px;
        width: 100%;

        &-more {
            position: relative;
        }
    }
}


.\src\components\Archive\ArcviveVideoError\index.tsx
----------------------------------------------------
import { cn } from "@bem-react/classname";
import "./style.scss";
import { ReactSVG } from "react-svg";
import Close from "./icon/close-square.svg";

type Props = {
    citation?: string;
    advice?: string;
    text?: string;
    tariff?: boolean;
};

export default function ArchiveVideoError({
    citation = "Ошибка!",
    advice = "Пожалуйста, повторите данную репетицию заново.",
    text = "Обращаем внимание, что эта попытка не будет списана с вашего счета.",
    tariff = true,
}: Props) {
    const cnArchiveVideoError = cn("video-error");

    return (
        <div className={cnArchiveVideoError()}>
            <div className={cnArchiveVideoError("title")}>
                <ReactSVG src={Close} />
                <span>{citation}</span>
            </div>
            <div className={cnArchiveVideoError("subtitle")}>{advice}</div>
            {tariff && (
                <div className={cnArchiveVideoError("text")}>{text}</div>
            )}
        </div>
    );
}


.\src\components\Archive\ArcviveVideoError\style.scss
-----------------------------------------------------
.video-error {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    justify-content: center;
    width: 100%;
    padding: 15px 0;

    &-title {
        display: flex;
        gap: 0.5rem;
        color: #f35b60;
        font-weight: 600;
        font-size: 20px;
        font-family: "Montserrat Alternates";
        font-style: normal;
        line-height: normal;
        text-align: start;
    }

    &-subtitle {
        color: #37476a;
        font-weight: 400;
        font-size: 20px;
        font-family: "Onest";
        font-style: normal;
        line-height: normal;
        text-align: start;
    }

    &-text {
        color: #7c8eb5;
        font-weight: 400;
        font-size: 16px;
        font-family: "Onest";
        font-style: normal;
        line-height: normal;
        text-align: start;
    }
}


.\src\components\Archive\DescriptionVideo\index.tsx
---------------------------------------------------
import { cn } from "@bem-react/classname";
import "./style.scss";

import Arrow from "./icon/arrow-down.svg";
import { ReactSVG } from "react-svg";
import { UUID } from "crypto";
import RoutesEnum from "../../../models/routes";
import { Link, useNavigate } from "react-router-dom";
import { Background } from "react-speedometer/dist";

type Props = {
    id: UUID;
    title: string;
    time: string;
    date: string;
    isAllow: boolean;
};

export default function DescriptionArchiveVideo({
    id,
    title,
    date,
    time,
    isAllow,
}: Props) {
    const cnDescriptionArchiveVideo = cn("archive-video-description");
    const navigate = useNavigate();

    return (
        <div className={cnDescriptionArchiveVideo()}>
            <div>
                <p className={cnDescriptionArchiveVideo("title")}>{title}</p>

                <div className={cnDescriptionArchiveVideo("time-block")}>
                    <span className={cnDescriptionArchiveVideo("date")}>
                        {date}
                    </span>
                    <span className={cnDescriptionArchiveVideo("time")}>
                        {time}
                    </span>
                </div>
            </div>
            <div
                className={cnDescriptionArchiveVideo("btn")}
                style={{
                    backgroundColor: isAllow
                        ? "#ffb800"
                        : "rgba(124, 142, 181, 0.2)",
                    cursor: isAllow ? "pointer" : "default",
                }}
                onClick={
                    isAllow
                        ? () => {
                              navigate(RoutesEnum.DIARY + "/" + id);
                          }
                        : () => {}
                }
            >
                <div className={cnDescriptionArchiveVideo("btn-descr")}>
                    {"Перейти"}
                </div>
                <ReactSVG
                    className={cnDescriptionArchiveVideo("btn-icon")}
                    src={Arrow}
                />
            </div>
        </div>
    );
}


.\src\components\Archive\DescriptionVideo\style.scss
----------------------------------------------------
.archive-video-description {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    width: 180px;
    padding: 16px 0 8px 8px;
    font-family: "Onest";

    &-title {
        color: #000;
        font-weight: 500;
        font-size: 14px;
    }

    &-time-block {
        display: flex;
        gap: 10px;
        margin-top: 8px;
    }

    &-date {
        color: #7c8eb5;
        font-weight: 500;
        font-size: 16px;
    }

    &-time {
        color: #2477f4;
        font-size: 16px;
    }

    &-btn {
        display: flex;
        gap: 8px;
        align-items: center;
        justify-content: space-between;
        width: 120px;
        margin-top: auto;
        margin-right: 44px;
        padding: 6px 8px 6px 12px;
        background: #ffb800;
        border-radius: 8px;
        cursor: pointer;

        &-descr {
            color: #fff;
            font-weight: 600;
            font-size: 14px;
            font-family: "Montserrat Alternates";
        }

        &-icon {
        }
    }
}


.\src\components\BadGoodBlock\index.tsx
---------------------------------------
import React from "react";
import { cn } from "@bem-react/classname";
import { ReactSVG } from "react-svg";
import "./style.scss";
import okImg from "./img/ок.svg";
import badImg from "./img/bad.svg";
import goodImg from "./img/good.svg";

const CN = cn("BadGoodBlock");

export enum TYPE_ACHIEVEMENTS {
    improvements = "improvements",
    deterioration = "deterioration",
}

function checkType(type: TYPE_ACHIEVEMENTS) {
    if (type === "improvements") {
        return goodImg;
    } else {
        return badImg;
    }
}
function checkTypeColor(type: TYPE_ACHIEVEMENTS) {
    if (type === "improvements") {
        return "#16BF3B";
    } else {
        return "#F35B60";
    }
}
function checkTypeTitle(type: TYPE_ACHIEVEMENTS) {
    if (type === "improvements") {
        return "Улучшения";
    } else {
        return "Ухудшения";
    }
}

function paintList(a: string[], type: TYPE_ACHIEVEMENTS) {
    if (a.length === 0) {
        return (
            <div className={CN("all")}>
                <div className={CN("image")}>
                    <ReactSVG src={okImg} />
                </div>
                <div className={CN("list")}>
                    <div className={CN("title")}>
                        {type === TYPE_ACHIEVEMENTS.improvements
                            ? "Никаких значительных улучшений"
                            : "Ухудшений нет!"}
                    </div>
                    <div className={CN("text")}>
                        {type === TYPE_ACHIEVEMENTS.improvements
                            ? "Продолжай тренироваться и y тебя точно все получится!"
                            : "Так держать! По крайней мере ты не катишься вниз..."}
                    </div>
                </div>
            </div>
        );
    } else
        return (
            <div className={CN("all")}>
                <div className={CN("image")}>
                    <ReactSVG src={checkType(type)} />
                </div>
                <div className={CN()}>
                    <div className={CN("title")}>{checkTypeTitle(type)}</div>
                    <ul className={CN("listUl")}>
                        {a.map((elem, idx) => (
                            <li className={CN("allLi")} key={idx}>
                                <div
                                    className={CN("ellipse")}
                                    style={{ background: checkTypeColor(type) }}
                                ></div>
                                <div className={CN("elem")}>{elem}</div>
                            </li>
                        ))}
                    </ul>
                </div>
            </div>
        );
}

type Props = {
    type: TYPE_ACHIEVEMENTS;
    text: string[];
};

export default function BadGoodBlock(props: Props) {
    return <>{paintList(props.text, props.type)}</>;
}


.\src\components\BadGoodBlock\style.scss
----------------------------------------
.BadGoodBlock {
    &-all {
        display: grid;
        grid-template-rows: repeat(1, 1fr);
        grid-template-columns: repeat(2, 1fr);
        width: 50%;
        height: 176px;
        background: #FFF;
        border-radius: 24px;
    }

    &-image {
        display: flex;
        grid-column-start: 2;
        grid-column-end: 3;
        grid-row-start: 1;
        grid-row-end: 1;
        align-items: center;
        justify-content: flex-end;
    }

    &-list {
        display: flex;
        flex-direction: column;
        grid-column-start: 1;
        grid-column-end: 3;
        grid-row-start: 1;
        grid-row-end: 1;
        gap: 8px;
        align-items: flex-start;
        justify-content: center;
        padding: 0;

    }

    &-title {
        margin: 12px 0 12px 12px;
        padding: 0 10px;
        color: #37476A;
        font-weight: 600;
        font-size: 20px;
        font-family: 'Montserrat Alternates';
        font-style: normal;
        line-height: 24px;
    }

    &-text {
        display: flex;
        align-items: center;
        padding: 0 22px;
        color: #7C8EB5;
        font-weight: 400;
        font-size: 16px;
        font-family: 'Onest';
        font-style: normal;
        line-height: 20px;
    }

    &-ellipse {
        width: 8px;
        height: 8px;
        margin: 12px;
        border-radius: 100%;

    }

    &-listUl {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        width: 450px;
    }

    &-elem {
        display: flex;
        flex-direction: row;
        align-items: center;
        color: #7C8EB5;
        font-weight: 400;
        font-size: 16px;
        font-family: "Onest";
        font-style: normal;
        line-height: normal;
    }

    &-allLi {
        display: flex;
        justify-content: center;
        margin-left: 12px;
    }
}

.\src\components\BannerPersonalArea\index.tsx
---------------------------------------------
import React from 'react';
import {cn} from "@bem-react/classname";
import Img from './img/картинка.svg'
import {ReactSVG} from "react-svg";
import arrow_down from './img/arrow-down.svg'
import './style.scss'

const CN = cn("BannerPersonalAreaBlock");

type Props={
    tariff:string;
    countRep?:number;
    data?:string;
}
export default function BannerPersonalArea(props:Props) {
    let inf='';
    if (props.countRep == null){
        inf ='Действует до'+ props.data;
    }else {
        inf = 'Осталось '+ props.countRep+' репетиций' ;
    }

    return (
        <>
            <div className={CN()}>
                <div className={CN('imgText')}>
                    <div className={CN('image')}>
                        <div className={CN('circle')}>
                            <ReactSVG src={Img}/>
                        </div>
                    </div>
                    <div className={CN('text')}>
                        <div className={CN('textTariff')}>Текущий тариф</div>
                        <div className={CN('tariff')}>{props.tariff}</div>
                        <div className={CN('inf')}>{inf}</div>
                    </div>
                </div>
                <button className={CN('btn')}>
                    <div className={CN('textBtn')}>Пополнить</div>
                    <ReactSVG src={arrow_down}/>
                </button>
            </div>
        </>
    );
}



.\src\components\BannerPersonalArea\style.scss
----------------------------------------------
.BannerPersonalAreaBlock{
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  padding: 16px;
  background: #2477F4;
  border-radius: 24px;

  &-text{
    display: flex;
    flex-direction: column;
    gap: 16px;
    align-items: flex-start;
    color: #FFF;
    font-size: 16px;
    font-family: "Montserrat Alternates";
    font-style: normal;
    line-height: normal;
  }

  &-textTariff{
    font-weight: 700;
  }

  &-tariff{
    font-weight: 700;
    font-size: 32px;
    letter-spacing: 0.64px;
  }

  &-inf{
    font-weight: 500;
    letter-spacing: 0.32px;
  }

  &-btn{
    display: flex;
    gap: 8px;
    align-items: center;
    justify-content: center;
    padding: 8px 8px 8px 12px;
    background: #FFB800;
    border: none;
    border-radius: 10px;
  }

  &-textBtn{
    color: #FFF;
    font-weight: 600;
    font-size: 20px;
    font-family: "Montserrat Alternates";
    font-style: normal;
    line-height: normal;
  }

  &-imgText{
    display: flex;
    gap: 32px;
    align-items: center;
  }
}

.\src\components\BasicTextPlan\index.tsx
----------------------------------------
import { useState } from "react";

import "./style.scss";
import { cn } from "@bem-react/classname";

import { ReactSVG } from "react-svg";

type Props = {
    textPlan: string[];
};

export default function BasicTextPlan(props: Props) {
    const cnBasicTextPlan = cn("BasicTextPlan");

    const textPlan = props.textPlan.filter(el=>el.length>0);
    const max_steps = textPlan.length - 1;
    const [currentIndex, setCurrentIndex] = useState(0);

    const showLeftItem = () => {
        setCurrentIndex((prev) => (currentIndex !== 0 ? --prev : prev));
    };
    const showRightItem = () => {
        setCurrentIndex((prev) => (currentIndex < max_steps ? ++prev : prev));
    };

    return (
        <div className={cnBasicTextPlan()}>
            <div className={cnBasicTextPlan("arrow")} onClick={showLeftItem}>
                <ReactSVG src={process.env.PUBLIC_URL+"/images/arrows/long-arrow-left.svg"}/>
            </div>
            <div className={cnBasicTextPlan("text")}>
                <span className={cnBasicTextPlan("text-blue")}>{currentIndex+1}:</span>
                {textPlan[currentIndex]}
            </div>
            <div className={cnBasicTextPlan("arrow")} onClick={showRightItem}>
            <ReactSVG src={process.env.PUBLIC_URL+"/images/arrows/long-arrow-right.svg"}/>
            </div>
        </div>
    );
}


.\src\components\BasicTextPlan\style.scss
-----------------------------------------
.BasicTextPlan{
    display: grid;
    grid-template-columns: 60px 1fr 60px;
    gap: 10px;
    align-items: center;
    justify-content: center;
    justify-items: center;
    width: 100%;

    &-text{
        display: flex;
        flex-flow: row nowrap;
        gap:20px;
        align-items: center;
        justify-content: center;
        font-weight: 500;
        font-size: 24px;
        font-family: 'Onest';
        font-style: normal;
        line-height: 31px;
        
        
        

        &-blue{
            color: #5196FF;
            font-weight: 800;
            font-size: 32px;
            font-family: 'Onest';
            font-style: normal;
            line-height: 41px;
        }
    }

    &-arrow{
        cursor: pointer;

    }
}

.\src\components\BlockGeneralAnalytics\index.tsx
------------------------------------------------
import React from "react";
import "./style.scss";
import { cn } from "@bem-react/classname";
import { ReactSVG } from "react-svg";
import Speaker from "./img/оратор.svg";
import Chrysostom from "./img/слиток.svg";
import Talker from "./img/говорун.svg";
import Thorough from "./img/облако.svg";
import Eloquent from "./img/облако (1).svg";
import Serial from "./img/следы.svg";

const CN = cn("blockGeneralAnalytics");

type Props = {
    rank: string;
    previous_rank: string;
    text: string;
};


function checkRank(adjective: string) {
    if ([`последовательный`, `информативный`, `закономерный`].includes(adjective))
    {
        return Serial;
    } else if ([`оригинальный`, `обоснованный`, `логичный`].includes(adjective))
    {
        return Thorough;
    } else if ([`доходчивый`, `продуманный`, `уверенный`].includes(adjective))
    {
        return Eloquent;
    } else
    {
        return "";
    }
}

function checkAdjective(adjective:string){
    if ([`оратор`].includes(adjective))
    {
        return Speaker;
    } else if ([`златоуст`].includes(adjective))
    {
        return Chrysostom;
    } else if ([`говорун`].includes(adjective))
    {
        return Talker;
    } else
    {
        return "";
    }
}

export default function BlockGeneralAnalytics(props: Props) {
    
    const rank_words = props.rank
        .split(" ")
        .map((el) => el.toLocaleLowerCase());

    const image_for_adjective = checkRank(rank_words[0]);
    const image_for_noun = checkAdjective(rank_words[1]);

    return (
        <>
            <div className={CN()}>
                <div className={CN("text")}>
                    <div className={CN("rank")}>Текущее звание</div>
                    <div className={CN("degree")}>{props.rank}</div>
                    <div className={CN("previous")}>
                        Предыдущее: {props.previous_rank}
                    </div>
                    <div className={"tagline"}>{props.text}</div>
                </div>
                <div className={CN("img")}>
                    {image_for_adjective && (
                        <ReactSVG src={image_for_adjective} />
                    )}
                    {image_for_noun && (
                        <ReactSVG src={image_for_noun} />
                    )}
                </div>
            </div>
        </>
    );
}


.\src\components\BlockGeneralAnalytics\style.scss
-------------------------------------------------
.blockGeneralAnalytics {
  display: grid;
  grid-template-rows: repeat(5,50px);
  grid-template-columns: repeat(2, 1fr);

  &-text {
    display: flex;
    flex-direction: column;
    grid-column: 1 / 3;
    grid-row: 2 / 6;
    gap: 16px;
    justify-content: center;
    width: 100%;
    padding: 24px;
    color: #FFF;
    font-weight: 400;
    font-family: 'Onest';
    font-style: normal;
    background: #2477F4;
    border-radius: 28px;
  }

  &-img {
    display: flex;
    grid-row: 1 / 6;
    align-items: center;
    justify-content: end;

  }



  &-rank {
    font-size: 16px;
    line-height: 20px;
  }

  &-degree {
    font-weight: 600;
    font-size: 36px;
    font-family: 'Montserrat Alternates';
    line-height: 44px;
  }

  &-previous {
    color: rgb(255 255 255 / 50%);
    font-size: 16px;
    line-height: 20px;
  }

  &-tagline {
    font-size: 20px;
    line-height: 25px;
  }
}

.\src\components\Chat\index.tsx
-------------------------------
import { cn } from "@bem-react/classname";
import { Dispatch, Fragment, SetStateAction, useMemo, useState } from "react";
import { createContext } from "react";

import ChatFooter from "./-Footer";
import ChatHeader from "./-Header";
import ChatMessage from "./-Message";

import "./style.scss";
import { useGetMessagesQuery } from "../../store/api/chat";
import { IMessageItem } from "../../models/chat";

export const ChatContext = createContext({
    isExpanded: true,
    setIsExpanded: (() => {}) as Dispatch<SetStateAction<boolean>>,
});

const cnChat = cn("chat");

type Props = {
    isExpanded?: boolean;
};

const INTERVAL_PULLING = 5000;
const TITLE_NOT_MESSAGES = "Вы не задали ни одного вопроса";

export default function Chat(props: Props) {
    const { data } = useGetMessagesQuery(null, {
        pollingInterval: INTERVAL_PULLING,
    });

    const sortDate = (data: IMessageItem[]) => {
        const dataSort = [...data];
        return dataSort.sort((a, b) => a.id - b.id);
    };

    const replayHelper = (reply: number | null): string => {
        const message = allMessagesUser!.filter((msg) => msg.id === reply);
        return message.length > 0 ? message[0].text : "";
    };

    const allMessagesUser = useMemo(() => {
        if (data && data!.data) {
            return sortDate(data.data).reverse();
        }
    }, [data]);

    const [isExpanded, setIsExpanded] = useState(Boolean(props.isExpanded));

    const firstMsg: IMessageItem = {
        created_at: new Date().toLocaleString("ru"),
        from_user: "Специалист",
        id: 0,
        is_mine: false,
        reply_to: null,
        text: "",
        to_user: null,
    };

    return (
        <ChatContext.Provider value={{ isExpanded, setIsExpanded }}>
            <div className={cnChat({ expanded: isExpanded })}>
                <ChatHeader />
                {isExpanded && (
                    <Fragment>
                        <div
                            className={cnChat("content", {
                                expanded: !isExpanded,
                            })}
                        >
                            {allMessagesUser &&
                                allMessagesUser.map((msg, idx) => (
                                    <ChatMessage
                                        key={msg.id}
                                        replay={replayHelper(msg.reply_to)}
                                        {...msg}
                                    />
                                ))}
                            {!allMessagesUser && (
                                <ChatMessage {...firstMsg} is_first={true} />
                            )}
                            {/* {!allMessagesUser && (
                                <div className={cnChat("not_messages")}>
                                    {TITLE_NOT_MESSAGES}
                                </div>
                            )} */}
                        </div>
                        <ChatFooter />
                    </Fragment>
                )}
            </div>
        </ChatContext.Provider>
    );
}


.\src\components\Chat\style.scss
--------------------------------
.chat {
    position: relative;
    display: flex;
    flex-direction: column;
    width: 100%;
    height: 100%;
    border-radius: 18px;

    &_expanded {
        // z-index: 1;
    }

    &-content {
        z-index: 10;
        display: flex;
        flex-direction: column-reverse;
        // height: 100%;
        height: 60vh;
        padding: 10px;
        overflow: auto;
        font-size: 0.8rem;
        background: white;
        border-top: 1px solid #e4e6ea;
        border-bottom: 1px solid #e4e6ea;

        &_expanded {
            z-index: -1;
        }
    }

    &-not_messages {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 100%;
        height: 100%;
        color: #37476a;
        background-color: #f3f5f9;
        border-radius: 8px;
    }
}

.\src\components\Chat\-Footer\index.tsx
---------------------------------------
import { cn } from "@bem-react/classname";
import { ReactSVG } from "react-svg";
import SendIcon from "./icons/send.svg";

import "./style.scss";
import { useRef, useState } from "react";
import { useSendMessageMutation } from "../../../store/api/chat";

const cnFooter = cn("chat-footer");

export default function ChatFooter() {
    const [message, setMessage] = useState(String());

    const textAreaRef = useRef(null);

    const [sendRequest, sendResponse] = useSendMessageMutation();
    const { isLoading } = sendResponse;

    const onKeyUp: React.KeyboardEventHandler<HTMLDivElement> = (event) => {
        const target = event.target as HTMLDivElement;
        if (!target.innerText.replace(/\n/g, "")) {
            target.innerText = "";
        }
        if (event.key === "Enter") {
            if (event.ctrlKey) {
                newMessageHandler();
            }
        }
        setMessage(target.innerText);
    };

    const newMessageHandler = async () => {
        if (!message) return;
        let current_message = message;
        setMessage("");
        if (textAreaRef.current)
            (textAreaRef.current as HTMLDivElement).innerText = "";

        await sendRequest(current_message);
    };

    return (
        <>
       
            <div className={cnFooter()}>
            
            <div className={cnFooter("row")}>
                <div className={cnFooter("send-area")}>
                    <div
                        contentEditable
                        onKeyUp={onKeyUp}
                        placeholder="Задай свой вопрос..."
                        className={cnFooter("textarea")}
                        suppressContentEditableWarning={true}
                        ref={textAreaRef}
                    ></div>
                    <ReactSVG
                    beforeInjection={(svg) =>
                        svg.addEventListener("click", newMessageHandler)
                    }
                    src={SendIcon}
                    className={cnFooter("send-btn")}
                />
                </div>
                
                </div>
                {isLoading && <div  className={cnFooter("loading")}>Отправление<span className={cnFooter("loading-animate")}> . . .</span></div>}
            </div>
        </>
    );
}


.\src\components\Chat\-Footer\style.scss
----------------------------------------
.chat-footer {
    z-index: 10;
    display: flex;
    flex: 0 0 auto;
    flex-flow: column nowrap;
    align-items: center;
    justify-content: center;
    background: white;
    border-radius: 0 0 32px 32px;

    &-row {
        display: flex;
        flex-direction: row;
        flex-grow: 1;
        gap: 10px;
        align-items: center;
        justify-content: center;
        width: 100%;
        padding: 0.5rem 1.5rem 1.5rem;
    }

    &-send-area {
        display: flex;
        flex: 0 0 auto;
        flex-direction: row;
        align-content: center;
        align-items: center;
        justify-content: space-between;
        width: 100%;
        height: 50px;
        font-size: 0.75rem;
        background-color: #f3f5f9;
        border-radius: 8px;
    }

    &-textarea {
        flex: 0 auto;
        width: 100%;
        height: 50px;
        padding: 20px 0 0 8px;
        overflow: auto;
        font-family: "Onest";
        word-break: break-word;

        &[contenteditable="true"]:empty::before {
            display: block;

            /* For Firefox */
            color: #7c8eb5;
            // https://stackoverflow.com/a/61659129
            content: attr(placeholder);
            pointer-events: none;
        }
    }

    &-send-btn {
        display: flex;
        flex: 0 0 auto;
        align-items: center;
        height: 50%;
        padding: 0 18px 0 5px;
        background-color: #f3f5f9;
        border-radius: 0 8px 8px 0;

        & svg {
            cursor: pointer;
        }
    }

    &-loading {
        display: flex;
        justify-content: center;
        color: #7c8eb5;
        font-size: 0.75rem;
        font-family: "Onest";

        &-animate {
            display: inline-block;
            color: #7c8eb5;
            font-size: 0.75rem;
            font-family: "Onest";
            animation: fade-out 2s infinite ease-in-out;
            clip-path: inset(0 30px 0 0);
        }

        @keyframes fade-out {
            to {
                clip-path: inset(0 -24px 0 0);
            }
        }
    }
}


.\src\components\Chat\-Header\index.tsx
---------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";
import { useContext } from "react";
import { ChatContext } from "..";
import { ReactSVG } from "react-svg";
import ExpandIcon from "./icons/expand.svg";

const cnChatHeader = cn("chat-header");

export default function ChatHeader() {
    const { isExpanded, setIsExpanded } = useContext(ChatContext);

    return (
        <div
            className={cnChatHeader({ expanded: isExpanded })}
            onClick={() => setIsExpanded((prev) => !prev)}
        >
            <ReactSVG
                src={ExpandIcon}
                className={cnChatHeader("expand-btn")}
                wrapper="div"
                style={{ rotate: isExpanded ? "-90deg" : "90deg" }}
            />
            <span className={cnChatHeader("title")}>{"Чат поддержки"}</span>
        </div>
    );
}


.\src\components\Chat\-Header\style.scss
----------------------------------------
.chat-header {
    display: flex;
    flex: 0 0 auto;
    flex-direction: row;
    align-items: center;
    height: 60px;
    padding: 18px 20px;
    background: white;
    border-radius: 18px 0 0 18px;
    cursor: pointer;

    &_expanded {
        border-radius: 32px 32px 0 0;
    }

    &-title {
        padding: 0 10px;
        color: #37476a;
        font-weight: 600;
        font-size: 16px;
        font-family: "Montserrat Alternates";
        font-style: normal;
        line-height: normal;
    }

    &-expand-btn {
        width: 28px;
        height: 28px;
    }
}


.\src\components\Chat\-Message\index.tsx
----------------------------------------
import { ReactNode } from "react";
import { cn } from "@bem-react/classname";
import "./style.scss";
import { IMessageItem } from "../../../models/chat";
import { ReactSVG } from "react-svg";

import Reply from "./../icon/reply.svg";

const cnMessage = cn("chat-message");

const mineCnHelper = (is_mine: boolean) => ({ mine: is_mine, other: !is_mine });

type withArrowProps = {
    children?: ReactNode;
    is_mine: boolean;
};

const WithArrow = (props: withArrowProps) => (
    <>
        {!props.is_mine && <div className={cnMessage({ triangle: "other" })} />}
        {props.children}
        {props.is_mine && <div className={cnMessage({ triangle: "mine" })} />}
    </>
);

const getTimeFromData = (datetime: string) => {
    const newdate = new Date(datetime);
    const minutes = newdate.getMinutes();
    const hours = newdate.getHours() + 3 >= 24 ? 0 : newdate.getHours() + 3;
    return (
        (hours < 10 ? "0" + hours : hours) +
        ":" +
        (minutes < 10 ? "0" + minutes : minutes)
    );
};

type Props = {
    is_first?: boolean;
    replay?: string;
} & IMessageItem;

export default function ChatMessage(props: Props) {
    return (
        <div className={cnMessage("wrapper", mineCnHelper(props.is_mine))}>
            <WithArrow is_mine={props.is_mine}>
                <div
                    className={cnMessage("actual", mineCnHelper(props.is_mine))}
                >
                    <div className={cnMessage("header")}>
                        <div
                            className={cnMessage("header", { sender: "info" })}
                        >
                            <span
                                className={cnMessage("header", {
                                    sender: "name",
                                })}
                            >
                                {props.is_mine
                                    ? "me"
                                    : "Команда поддержки Speech Up"}
                            </span>
                            <span>{getTimeFromData(props.created_at)}</span>
                        </div>

                        {!props.is_mine && (
                            <div
                                className={cnMessage("header", {
                                    sender: "description",
                                })}
                            >
                                {props.from_user}
                            </div>
                        )}
                        {!props.is_mine && (
                            <div className={cnMessage("reply")}>
                                <ReactSVG
                                    src={Reply}
                                    className={cnMessage("reply-icon")}
                                />
                                <span className={cnMessage("reply-msg")}>
                                    {props.replay}
                                </span>
                            </div>
                        )}
                    </div>
                    <span>
                        {props.text}
                        {props.is_first && (
                            <>
                                👋🏼 Рады приветствовать вас в сервисе, который
                                призван помогать становиться успешнее и
                                увереннее в себе посредством развития навыков
                                публичных выступлений. <br />
                                <br />
                                📝 Основные инструкции по работе с сервисом вы
                                найдете{" "}
                                <a
                                    href="https://drive.google.com/file/d/1qMtB9VBr70v3aKN08RwBSm28jbKJbGEp/view"
                                    target="_blank"
                                    rel="noreferrer"
                                >
                                    здесь
                                </a>
                                <br />
                                <br />
                                ❗️ Обращаем ваше внимание, что ввиду
                                особенностей работы системы Антиплагиат, с
                                которой взаимодействует Speech Up, в период
                                бета-тестирования отключена оценка показателя
                                'Аргументированность', на всех видео она будет
                                равна 0%.
                                <br />
                                <br />
                                ✨ А в этот чат вы можете задавать любые вопросы
                                - и команде поддержки, и специалистам по
                                публичным выступлениям! Мы всегда на связи!
                                <br />
                                <br />
                                😉 Успешного тестирования! Ждём ваших отзывов.
                                <br />
                                <br />
                                ❤️ Спасибо, что помогаете нам становиться лучше!
                            </>
                        )}
                    </span>
                </div>
            </WithArrow>
        </div>
    );
}


.\src\components\Chat\-Message\style.scss
-----------------------------------------
.chat-message {
    &-wrapper {
        margin: 4px;

        &_mine {
            display: flex;
            flex-direction: row;
            justify-content: flex-end;
        }

        &_other {
            display: flex;
            flex-direction: row;
            justify-content: flex-start;
        }
    }

    &_triangle {
        &_mine {
            flex: 0 0 auto;
            width: 0;
            height: 0;
            margin: 16px 0 0;
            border-top: 8px solid transparent;
            border-bottom: 8px solid transparent;
            border-left: 14px solid #e4eaf5;
        }

        &_other {
            flex: 0 0 auto;
            width: 0;
            height: 0;
            margin: 16px 0 0;
            border-top: 8px solid transparent;
            border-right: 14px solid #0557cd;
            border-bottom: 8px solid transparent;
        }
    }

    &-actual {
        min-width: 50%;
        padding: 8px 8px 8px 12px;
        border-radius: 16px;

        &_mine {
            color: #37476a;
            background: #e4eaf5;
        }

        &_other {
            color: white;
            background: linear-gradient(
                310.91deg,
                #3aa0ff 0.21%,
                #0050c9 100.21%
            );
        }
    }

    &-header {
        padding: 0 0 4px;

        &_sender {
            &_name {
                padding: 0 2px 0 0;
                font-weight: 700;
                font-size: 0.75rem;
            }

            &_description {
                color: rgb(255 255 255 / 70%);
            }

            &_info {
                display: flex;
                justify-content: space-between;
            }
        }
    }

    &-reply {
        display: flex;
        gap: 0.3rem;
        height: 20px;

        &-icon > div > svg {
            width: 10px;
            height: 10px;
            fill: rgb(255 255 255 / 70%);
        }

        &-msg {
            overflow: hidden;
            color: rgb(255 255 255 / 70%);
            white-space: nowrap;
            text-overflow: ellipsis;
        }
    }
}


.\src\components\CheckboxQuestion\index.tsx
-------------------------------------------
import { Fragment, useCallback, useEffect, useRef, useState } from "react";
import "./style.scss";
import { cn } from "@bem-react/classname";
import { ReactSVG } from "react-svg";
import svgg from "../Menu/icons/book.svg";

import { UUID } from "crypto";
import { IAnswer, IQuestion, typeQuestion } from "../../models/survey";
import { LocalAnswer } from "../../store/slices/survey";

type Props = {
    question: IQuestion;
    addAnswers: Function;
    addAnotherAnswers?: Function;
};

export default function CheckboxQuestion(props: Props) {
    const cnMain = cn("checkbox-main");
    const question_id = props.question.id;

    const anotherCheckRef = useRef<HTMLInputElement>(null);

    const [checkedState, setCheckedState] = useState<Array<boolean>>(
        new Array(props.question.choices.length).fill(false)
    );

    const changeCheckedState = (position: number) => {
        const updatedCheckedState = checkedState.map((item, index) =>
            index === position ? !item : item
        );
        setCheckedState(updatedCheckedState);
    };

    useEffect(() => {
        if (checkedState) {
            let currentIdAswers = props.question.choices.filter(
                (el, idx) => checkedState[idx]
            );

            let isAnother = currentIdAswers.some((el) => el.another);
            if (!isAnother && anotherCheckRef)
                anotherCheckRef.current!.value = "";

            const answers: LocalAnswer = {
                id_question: question_id,
                type_question: typeQuestion.checkbox,
                id_choices: currentIdAswers.map((el) => el.id),
                another_choices: "",
            };
            props.addAnswers(answers);
        }
    }, [checkedState]);

    const changeAnotherAnswer = () => {
        if (anotherCheckRef && anotherCheckRef.current) {
            if (anotherCheckRef.current!.value.length > 0) {
                let currentIdAswers = props.question.choices
                    .filter((el, idx) => checkedState[idx])
                    .map((el) => el.id);
                const answers: LocalAnswer = {
                    id_question: question_id,
                    type_question: typeQuestion.checkbox,
                    id_choices: currentIdAswers,
                    another_choices: anotherCheckRef.current!.value,
                };
                props.addAnswers(answers);
            }
        }
    };

    return (
        <div className={cnMain()}>
            {props.question.title.length > 0 && (
                <h3 className={cnMain("title")}>{props.question.title}</h3>
            )}
            <div className={cnMain(`${props.question.type_choice}`)}>
                {props.question.choices.map((el, index) => (
                    <Fragment key={el.id}>
                        {!el.another && (
                            <div className={cnMain("block-answers-item")}>
                                <label
                                    className={cnMain(
                                        "block-answers-item-label"
                                    )}
                                >
                                    <input
                                        type="checkbox"
                                        id={`question-checkbox-${index}`}
                                        value={el.id}
                                        name={el.title}
                                        checked={checkedState[index]}
                                        onChange={
                                            () => changeCheckedState(index)
                                            // handleOnChange(el.id, index)
                                        }
                                        className={cnMain(
                                            "block-answers-item-check"
                                        )}
                                    />
                                    <span
                                        className={cnMain(
                                            "block-answers-item-span"
                                        )}
                                    >
                                        {el.title}
                                    </span>
                                </label>
                            </div>
                        )}
                    </Fragment>
                ))}
            </div>
            <div className={cnMain("another-block")}>
                {props.question.choices.map((el, index) => (
                    <Fragment key={el.id}>
                        {el.another && (
                            <div
                                key={el.id}
                                className={cnMain("block-answers-item")}
                            >
                                <div className={cnMain("block-answers-item")}>
                                    <label
                                        className={cnMain(
                                            "block-answers-item-label"
                                        )}
                                    >
                                        <input
                                            type="checkbox"
                                            value={el.id}
                                            className={cnMain(
                                                "block-answers-item-check"
                                            )}
                                            checked={checkedState[index]}
                                            onChange={() =>
                                                changeCheckedState(index)
                                            }
                                        />
                                        <div
                                            className={cnMain(
                                                "block-answers-item-span"
                                            )}
                                        >
                                            Другое:
                                        </div>
                                        <input
                                            type="text"
                                            placeholder={el.title}
                                            className={cnMain(
                                                "block-answers-item-input-text"
                                            )}
                                            disabled={!checkedState[index]}
                                            ref={anotherCheckRef}
                                            onChange={changeAnotherAnswer}
                                        />
                                    </label>
                                </div>
                            </div>
                        )}
                    </Fragment>
                ))}
            </div>
        </div>
    );
}


.\src\components\CheckboxQuestion\style.scss
--------------------------------------------
.checkbox-main {
    font-size: 18px;
    font-family: 'Montserrat Alternates';
    line-height: 20px;

    &-title {
        font-family: Montserrat Alternates;
        color: #031C3D;
        font-weight: 600;
        font-size: 20px;
        font-style: normal;
        line-height: 24px;
    }

    &-col-answers {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2px;
        justify-items: start;
    }

    &-block-answers {
        display: flex;
        flex-flow: column nowrap;
        gap: 10px;
        width: 100%;


        &-item {
            display: flex;
            flex-direction: row;
            justify-content: start;
            width: 100%;
            padding-top: 10px;
            color: #7C8EB5;
            fill: #7C8EB5;

            &-icon {
                width: 24px;
                height: 24px;
            }

            &-label {
                display: flex;
                width: 100%;
                font-weight: 600;
                font-size: 1em;
                font-style: normal;
                line-height: 1em;
                cursor: pointer;
                user-select: none;
            }

            &-check {
                display: none;
            }

            &-span {
                display: inline-flex;
                align-items: center;
                user-select: none;
            }

            /* создание в label псевдоэлемента before со следующими стилями */
            &-span::before {
                display: inline-block;
                flex-grow: 0;
                flex-shrink: 0;
                width: 1.5em;
                height: 1.5em;
                margin-right: 0.5em;
                background-repeat: no-repeat;
                background-position: center center;
                background-size: 50% 50%;
                border: 2px solid rgb(178 194 228 / 100%);
                border-radius: 8px;
                content: '';
            }

            /* стили при наведении курсора на checkbox */
            &-check:not(:disabled, :checked)+&-span:hover::before {
                border-color: #b3d7ff;
            }

            /* стили для чекбокса, находящегося в состоянии checked */
            &-check:checked+&-span::before {
                background-color: #2477F4;
                background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23fff' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z'/%3e%3c/svg%3e");
                border-color: #2477F4;
            }

            &-input-text {
                flex-grow: 1;
                align-self: stretch;
                height: 50px;
                margin-left: .5em;
                padding-left: 1em;
                color: #7C8EB5;
                font-size: 1em;
                border: 2px solid #B2C2E4;
                border-radius: 16px;
            }

            &-input-text::placeholder {
                color: #7C8EB5;
                font-weight: 500;
                font-size: 1em;
                font-style: normal;
            }
        }
    }

    &-another-block {
        margin: 0 auto;
        padding: 0;
    }
}

.\src\components\CheckboxQuestion\CheckboxItem\index.tsx
--------------------------------------------------------
import { cn } from "@bem-react/classname";
import "./style.scss";
import { DetailedHTMLProps, ForwardRefRenderFunction, InputHTMLAttributes, LegacyRef, ReactNode, forwardRef, useRef } from "react";

type InputProps = DetailedHTMLProps<
    InputHTMLAttributes<HTMLInputElement>,
    HTMLInputElement
>;

type Props = InputProps & {
    title?: string;
    handleOnChange: Function;
    isAnother?: boolean;
    children: ReactNode | ReactNode[];
    customref?: LegacyRef<HTMLInputElement>;
};





    

    


    


export default function CheckBoxItem(props: Props) {

    const cnCheckBoxItem = cn("CheckBoxItem");

    return (
        <div className={cnCheckBoxItem()}>
            {props.isAnother ? (
                <label className={cnCheckBoxItem("item-label")}>
                    <input
                        type="checkbox"
                        value={props.value}
                        className={cnCheckBoxItem("item-check")}
                        checked={props.checked}
                        onChange={() => props.handleOnChange()}
                    />
                    <div className={cnCheckBoxItem("item-span-another")}>
                        Другое:
                    </div>
                    <input
                        type="text"
                        placeholder={props.title}
                        className={cnCheckBoxItem(
                            "item-input-text"
                        )}
                        disabled={!props.checked}
                        ref={props.customref}
                        // onChange={changeAnotherAnswer}
                    />
                </label>
            ) : (
                <label className={cnCheckBoxItem("item-label")}>
                    <input
                        type="checkbox"
                        id={`checkbox-item-${props.id}`}
                        value={props.value}
                        name={props.name}
                        checked={props.checked}
                        onChange={() => props.handleOnChange()}
                        className={cnCheckBoxItem("item-check")}
                        disabled={props.disabled? props.disabled : false}
                    />
                    <span className={cnCheckBoxItem("item-span")}>
                        {props.children}
                    </span>
                </label>
            )}
        </div>
    );
}

const ForwardedCheckBoxItemFunc: ForwardRefRenderFunction<HTMLInputElement, Props> = (
    props,
    ref
) => <CheckBoxItem customref={ref} {...props} />;

export const ForwardedCheckBoxItem = forwardRef(ForwardedCheckBoxItemFunc);


.\src\components\CheckboxQuestion\CheckboxItem\style.scss
---------------------------------------------------------
.CheckBoxItem {
    display: flex;
    flex-flow: row nowrap;
    align-content: center;
    justify-content: start;
    width: 100%;
    color: #7C8EB5;
    font-size: 16px;
    fill: #7C8EB5;
    

    &-item {
        font-size: 16px;

        &-label {
            display: inline-flex;
            width: 100%;
            font-size: 14px;
            line-height: 21px;
            vertical-align: top;
            cursor: pointer;
            user-select: none;

        }

        &-check {
            display: none;
        }

        &-span {
            display: inline-flex;
            align-items: center;
            user-select: none;

            &-another{
                @extend .CheckBoxItem-item-span;

                color: #7C8EB5;
                font-weight: 600;
                font-size: 16px;
                font-family: "Montserrat Alternates";
                font-style: normal;
                line-height: normal;
            }
        }

        /* создание в label псевдоэлемента before со следующими стилями */
        &-span::before {
            display: inline-block;
            flex-grow: 0;
            flex-shrink: 0;
            width: 25px;
            height: 25px;
            margin-right: 0.5em;
            background-repeat: no-repeat;
            background-position: center center;
            background-size: 50% 50%;
            border: 2px solid rgb(178 194 228 / 100%);
            border-radius: 8px;
            content: '';
        }

        /* стили при наведении курсора на checkbox */
        &-check:not(:disabled, :checked)+&-span:hover::before {
            border-color: #b3d7ff;
        }

        /* стили для чекбокса, находящегося в состоянии checked */
        &-check:checked+&-span::before {
            background-color: #2477F4;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23fff' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z'/%3e%3c/svg%3e");
            border-color: #2477F4;
        }

        &-input-text {
            flex-grow: 1;
            align-self: stretch;
            height: 48px;
            margin-left: .5em;
            padding-left: 1em;
            color: #7C8EB5;
            font-size: 1em;
            border: 2px solid #B2C2E4;
            border-radius: 16px;
        }

        &-input-text::placeholder {
            color: #7C8EB5;
            font-weight: 500;
            font-size: 16px;
            font-family: "Montserrat Alternates";
            font-style: normal;
            line-height: normal;
        }

    }
}

.\src\components\ColorfulTabs\index.tsx
---------------------------------------
import { cn } from '@bem-react/classname';
import React, { ReactElement, ReactNode, useState } from 'react'
import ColorfulTab from './ColorofulTab';

import "./style.scss";

type Props ={
    children: Array<ReactNode>;
}

export default function ColorfulTabs(props: Props) {
    const cnColorfulTab = cn("ColorfulTabs");

    const children = props.children as ReactElement[];
    const [activeTab, setActiveTab] = useState(children[1].props.title);

    const onClickTabItem = (title: string) => {
        setActiveTab(title);
    };

    return (
        <div className={cnColorfulTab()}>
            <ul className={cnColorfulTab("list")}>
                {children.map((child) => {
                    return child? (
                        <ColorfulTab
                            key={child.props.title}
                            activeTab={activeTab}
                            label={child.props.title}
                            onClick={onClickTabItem}
                        />
                    ) : undefined;
                })}
            </ul>

            <div className={cnColorfulTab("content")}>
                {children.map((child) => {
                    if(child){
                        if (child.props.title !== activeTab) return undefined;
                        return child;
                    }
                    return undefined;
                })}
            </div>
        </div>
    );
}


.\src\components\ColorfulTabs\style.scss
----------------------------------------
.ColorfulTabs{
    width: 100%;
    height: 100%;
    color: #37476A;
    font-weight: 600;
    font-size: 20px;
    font-family: 'Montserrat Alternates';
    font-style: normal;
    line-height: 24px;

    &-list {
        display: flex;
        flex-flow: row nowrap;
        gap: 25px;
        justify-content: space-around;
        width: 100%;
        padding: 6px;
        background: #E4EAF5; 
        border-radius: 12px; 
    }

    &-content {
        width: 100%;
        height: 100%;
        padding: 16px;
        overflow: hidden;
    }
}

.\src\components\ColorfulTabs\ColorofulTab\index.tsx
----------------------------------------------------
import { cn } from "@bem-react/classname";
import React from "react";
import { ReactSVG } from "react-svg";

import noteIcon from "../assets/note.svg";
import symbolT from "../assets/symbol-T.svg";

import "./style.scss";

type Props = {
    activeTab: string;
    label: string;
    onClick: Function;
};

export default function ColorfulTab({activeTab,label,onClick}: Props) {
    
    const cnColorfulTab = cn("ColorfulTabItem");

    const funcClick = () => {
        onClick(label);
    };

    return (
        <li className={cnColorfulTab("tab-list-item",{active:activeTab === label})} onClick={funcClick}>
            <ReactSVG className={cnColorfulTab("icon")} src={label === "Транскрипция речи" ? symbolT:noteIcon }/>
            {label}
        </li>
    );
}


.\src\components\ColorfulTabs\ColorofulTab\style.scss
-----------------------------------------------------
.ColorfulTabItem {
    font-weight: 600;
    font-size: 14px;
    font-family: "Montserrat Alternates";
    font-style: normal;
    line-height: 18px;

    &-icon {
        div {
            display: flex;
            align-items: center;
            justify-content: center;
        }
    }

    &-tab-list-item {
        display: inline-flex;
        flex-direction: row;
        flex-grow: 1;
        gap:8px;
        align-items: center;
        justify-content: center;
        color: #7c8eb5;
        font-weight: 600;
        font-size: 14px;
        font-family: "Montserrat Alternates";
        cursor: pointer;

        &_active { 
            padding: 8px;
            color: #fff;
            font-weight: 600;
            font-size: 14px;
            font-family: "Montserrat Alternates";
            background-color: #37476A;
            border-radius: 8px;
        }
    }
}


.\src\components\Context\helpers.tsx
------------------------------------
import {
    Dispatch,
    SetStateAction,
    createContext,
    useContext,
    useState,
} from "react";


interface VideoTimeContextProps {
    currentTime: number;
    setCurrentTime: Dispatch<SetStateAction<number>>;
    isPlaying: boolean;
    setIsPlaying: Dispatch<SetStateAction<boolean>>;
    togglePlay: () => void;
}

export const VideoTimeContext = createContext<VideoTimeContextProps>({
    currentTime: 0,
    setCurrentTime: () => {},
    isPlaying: false,
    setIsPlaying: () => {},
    togglePlay: () => {},
});

interface TimeProviderProps {
    children: React.ReactNode; // указываем тип для пропса children
}

export const TimeProvider: React.FC<
    TimeProviderProps & VideoTimeContextProps
> = ({
    children,
    currentTime,
    setCurrentTime,
    isPlaying,
    setIsPlaying,
    togglePlay,
}) => {
    // const [currentTime, setCurrentTime] = useState(0);
    // const [isPlaying, setIsPlaying] = useState(false);

    // const togglePlay = () => {
    //     setIsPlaying(!isPlaying);
    // };
    // const { currentTime, setCurrentTime, isPlaying, setIsPlaying, togglePlay } =
    //     useContext(VideoTimeContext);

    return (
        <VideoTimeContext.Provider
            value={{
                currentTime,
                setCurrentTime,
                isPlaying,
                setIsPlaying,
                togglePlay,
            }}
        >
            {children}
        </VideoTimeContext.Provider>
    );
};


.\src\components\DiaryStart\helper.ts
-------------------------------------
import { IStatisticJSON } from "../../models/diary";

export default function percentHelper(
    data: IStatisticJSON | undefined,
    val: string
) {
    if (data) {
        if (val === "total") {
            return data.total_result;
        } else if (val === "connectivity") {
            return data.connectedness;
        } else if (val === "argumentativeness") {
            return data.argumentativeness;
        } else if (val === "clarity") {
            return data.clarity;
        } else if (val === "dynamism") {
            return data.dynamism;
        } else if (val === "communicative") {
            return data.communicative;
        } else {
            return data.persuasiveness;
        }
    }
}


.\src\components\DiaryStart\index.tsx
-------------------------------------
import { useEffect, useMemo, useState } from "react";
import { IVideoFromBack, IVideoStatus } from "../../models/video";

import {
    useDeleteVideoByIdMutation,
    useGetVideoByUserQuery,
    useGetVideoStatusByUserQuery,
    useLazyGetVideoByUserSearchQuery,
} from "../../store/api/userVideo";

import StatsGraph from "../Graphs/Stats";
import ArchiveSearch from "../Archive/ArchiveSearch";

import Pagination from "../Pagination";
import RollUp from "../RollUp";
import AimBlock from "../AimBlock";
import Tabs, { TYPE_TABS } from "../Tabs";

import statisticIcon from "./icons/statistic.svg";
import videoListIcon from "./icons/videolist.svg";

import { cn } from "@bem-react/classname";

import BadGoodBlock, { TYPE_ACHIEVEMENTS } from "../BadGoodBlock";
import BlockGeneralAnalytics from "../BlockGeneralAnalytics";

import "./style.scss";
import percentHelper from "./helper";
import ArchiveVideoItem from "../Archive/ArchiveVideoItem";

import {
    useGetAchievementsQuery,
    useGetStatisticDataQuery,
} from "../../store/api/diary";
import { IAchievement, IStatisticItem, TYPE_DIARY } from "../../models/diary";

import lampСharge from "./icons/lampСharge.svg";
import RecommendationDairyGraph from "../RecommendationDairyGraph";
import VideoLoad from "../VideoLoad";
import ArchiveVideo from "../Archive/ArchiveVideo";
import { useLocation } from "react-router-dom";

export default function DiaryStart() {
    const sectionTitles = {
        total: "Общий результат",
        connectivity: "Связность",
        argumentativeness: "Аргументированность",
        clarity: "Ясность",
        dynamism: "Динамизм",
        persuasiveness: "Убедительность",
        communicative: "Коммуникативные нормы",
    };

    const cnDiaryStart = cn("DiaryStart");

    const [currentPage, setCurrentPage] = useState(0);
    const videosPerPage = 6;

    const { state } = useLocation();
    const { onAnalisys } = state ? state : false;

    const [waitAnalysisVideo, setWaitAnalysisVideo] = useState(
        onAnalisys ? onAnalisys : false
    );

    useEffect(() => {
        const interval = setInterval(() => {
            setWaitAnalysisVideo(false);
        }, 60000); //milisec
        return () => {
            clearInterval(interval);
        };
    }, []);

    /* ----------------------- ACHIEVEMENTS BLOCK -----------------------*/
    const achievementsJSON = useGetAchievementsQuery();
    const [achievementsData, setAchievementsData] = useState<IAchievement>();

    useEffect(() => {
        if (
            achievementsJSON &&
            achievementsJSON.isSuccess &&
            achievementsJSON.data &&
            achievementsJSON.data.data
        ) {
            // console.log(achievementsJSON.data!.data!);
            setAchievementsData(achievementsJSON.data!.data!);
        }
    }, [achievementsJSON]);

    /* ----------------------- STATS GRAPH BLOCK -----------------------*/
    const [statsData, setStatsData] = useState({
        total: [] as IStatisticItem[],
        connectivity: [] as IStatisticItem[],
        argumentativeness: [] as IStatisticItem[],
        clarity: [] as IStatisticItem[],
        dynamism: [] as IStatisticItem[],
        persuasiveness: [] as IStatisticItem[],
        communicative: [] as IStatisticItem[],
    });

    const totalJSON = useGetStatisticDataQuery(TYPE_DIARY.total);
    const connectivityJSON = useGetStatisticDataQuery(TYPE_DIARY.connectivity);
    const argumentativenessJSON = useGetStatisticDataQuery(
        TYPE_DIARY.argumentativeness
    );
    const clarityJSON = useGetStatisticDataQuery(TYPE_DIARY.clarity);
    const dynamismJSON = useGetStatisticDataQuery(TYPE_DIARY.dynamism);
    const persuasivenessJSON = useGetStatisticDataQuery(
        TYPE_DIARY.persuasiveness
    );
    const communicativeJSON = useGetStatisticDataQuery(
        TYPE_DIARY.communicative
    );

    useEffect(() => {
        if (totalJSON && totalJSON.isSuccess && totalJSON.data.data) {
            setStatsData((prev) => ({
                ...prev,
                total: totalJSON.data.data!.values,
            }));
        }
    }, [totalJSON]);

    useEffect(() => {
        if (
            connectivityJSON &&
            connectivityJSON.isSuccess &&
            connectivityJSON.data.data
        ) {
            setStatsData((prev) => ({
                ...prev,
                connectivity: connectivityJSON.data.data!.values,
            }));
        }
    }, [connectivityJSON]);

    useEffect(() => {
        if (
            argumentativenessJSON &&
            argumentativenessJSON.isSuccess &&
            argumentativenessJSON.data.data
        ) {
            setStatsData((prev) => ({
                ...prev,
                argumentativeness: argumentativenessJSON.data.data!.values,
            }));
        }
    }, [argumentativenessJSON]);

    useEffect(() => {
        if (clarityJSON && clarityJSON.isSuccess && clarityJSON.data.data) {
            setStatsData((prev) => ({
                ...prev,
                clarity: clarityJSON.data.data!.values,
            }));
        }
    }, [clarityJSON]);

    useEffect(() => {
        if (dynamismJSON && dynamismJSON.isSuccess && dynamismJSON.data.data) {
            setStatsData((prev) => ({
                ...prev,
                dynamism: dynamismJSON.data.data!.values,
            }));
        }
    }, [dynamismJSON]);

    useEffect(() => {
        if (
            persuasivenessJSON &&
            persuasivenessJSON.isSuccess &&
            persuasivenessJSON.data.data
        ) {
            setStatsData((prev) => ({
                ...prev,
                persuasiveness: persuasivenessJSON.data.data!.values,
            }));
        }
    }, [persuasivenessJSON]);

    useEffect(() => {
        if (
            communicativeJSON &&
            communicativeJSON.isSuccess &&
            communicativeJSON.data.data
        ) {
            setStatsData((prev) => ({
                ...prev,
                communicative: communicativeJSON.data.data!.values,
            }));
        }
    }, [communicativeJSON]);

    /* ----------------------------- VIDEO ON ANALYSIS ------------------------------*/

    const INTERVAL_PULLING = 10000; //milliseconds

    const [currentStatus, setCurrentStatus] = useState<IVideoStatus[]>([]);
    const [countAnalysisVideos, setCountAnalysisVideos] = useState<number>(0);

    const [currentPageAnalysis, setCurrentPageAnalysis] = useState(0);

    const [hasAnalysisVideo, setHasAnalysisVideo] = useState(false); // чтобы проверить, нужно ли нам обновить архивные видосы после выполнения анализа

    const analisisVideoByUser = useGetVideoStatusByUserQuery(
        {
            page: currentPageAnalysis,
            limit: videosPerPage,
        },
        {
            pollingInterval: INTERVAL_PULLING,
        }
    );

    useEffect(() => {
        if (analisisVideoByUser.data && analisisVideoByUser.data?.data) {
            setWaitAnalysisVideo(false);
            setCurrentStatus(analisisVideoByUser.data!.data!.videos);
            setCountAnalysisVideos(analisisVideoByUser.data!.data.total_videos);
            setHasAnalysisVideo(true);
            
        } else if (
            analisisVideoByUser.data &&
            analisisVideoByUser.data!.error!.msg === "Video not found"
        ) {
            setCurrentStatus([]);
            setCountAnalysisVideos(0);
        }
    }, [analisisVideoByUser]);

    /* ----------------------- GETTING VIDEO BLOCK -----------------------*/

    const videosDataFromBack = useGetVideoByUserQuery({
        page: currentPage,
        limit: videosPerPage,
    });

    useEffect(() => {
        if (
            videosDataFromBack &&
            videosDataFromBack.data &&
            videosDataFromBack.data!.data
        ) {
            setCountSearchVideos(videosDataFromBack.data!.data!.total_videos);
            setSearchVideos(videosDataFromBack.data!.data!.videos);
        }
    }, [videosDataFromBack]);

    /* ----------------------- RESEARCH VALUE -----------------------*/

    const [searchValue, setSearchValue] = useState<string>();

    const updateSearch = (value: string) => {
        setSearchValue(value);
    };

    /* ----------------------- RESEARCH VIDEO -----------------------*/

    const [searchVideos, setSearchVideos] = useState<IVideoFromBack[]>([]);
    const [countSearchVideos, setCountSearchVideos] = useState<number>(0);

    const [getVideosBySearch, videosBySearch] =
        useLazyGetVideoByUserSearchQuery();

    useEffect(() => {
        if (typeof searchValue === "string") {
            getVideosBySearch({
                page: currentPage,
                limit: videosPerPage,
                search: searchValue,
            });
        }
    }, [currentPage, getVideosBySearch, searchValue, hasAnalysisVideo]);

    useEffect(() => {
        if (
            videosBySearch &&
            videosBySearch.isSuccess &&
            videosBySearch.data &&
            videosBySearch.data!.data
        ) {
            setSearchVideos(videosBySearch.data!.data!.videos);
            setCountSearchVideos(videosBySearch.data!.data!.total_videos);
            
        }
    }, [videosBySearch]);

    useEffect(() => {
        if (hasAnalysisVideo) {
            getVideosBySearch({
                page: currentPage,
                limit: videosPerPage,
                search: searchValue,
            });
            if (countAnalysisVideos === 0) setHasAnalysisVideo(false);
        }
    }, [hasAnalysisVideo, countAnalysisVideos]);

    /* ----------------------- ANALYSIS PAGINATION BLOCK -----------------------*/

    const paginateAnalysis = (pageNumber: number) => {
        setCurrentPageAnalysis(pageNumber);
    };

    const nextPageAnalysis = (maxPage: number) =>
        setCurrentPageAnalysis((prev) =>
            prev < maxPage - 1 ? prev + 1 : prev
        );

    const prevPageAnalysis = () =>
        setCurrentPageAnalysis((prev) => (prev > 0 ? prev - 1 : prev));

    /* ----------------------- COMMON PAGINATION BLOCK -----------------------*/

    const paginate = (pageNumber: number) => {
        setCurrentPage(pageNumber);
    };

    const nextPage = (maxPage: number) =>
        setCurrentPage((prev) => (prev < maxPage - 1 ? prev + 1 : prev));

    const prevPage = () =>
        setCurrentPage((prev) => (prev > 0 ? prev - 1 : prev));

    /* ----------------------- ArchiveVideo Function -----------------------*/

    const [deleteRequest, deleteResponse] = useDeleteVideoByIdMutation();

    const deleteVideoByID = async (id: string) => await deleteRequest(id);

    const removeItem = async (id: string) => {
        // setSearchVideos((prevState) => prevState.filter((el) => el.id !== id));
        // setCountSearchVideos((prev) => prev - 1);
        deleteVideoByID(id);
    };

    useEffect(()=>{
        if(deleteResponse.isSuccess){
            if(countSearchVideos ===1) window.location.reload();
            let newvideo = async ()=> await getVideosBySearch({
                page: currentPage,
                limit: videosPerPage,
                search: searchValue,
            },false);
            newvideo()
        }
    },[deleteResponse])

    return (
        <div>
            <div className={cnDiaryStart("text-h1", { margin_bottom: true })}>
                Достижения
            </div>
            <div className={cnDiaryStart("banner")}>
                {achievementsData && (
                    <BlockGeneralAnalytics
                        rank={achievementsData.rank}
                        previous_rank={achievementsData.previous_rank}
                        text={achievementsData.text}
                    />
                )}
            </div>

            <div className={cnDiaryStart("aims")}>
                <AimBlock />
            </div>

            <RollUp title="Видео на анализе" icon={videoListIcon}>
                {/* данные по видосикам на анализе которые */}
                {waitAnalysisVideo ? (
                    <div className={cnDiaryStart("text-empty-msg")}>
                        Ищем видео
                        <span
                            className={cnDiaryStart("text-empty-msg-animate")}
                        >
                            {" "}
                            . . .
                        </span>
                    </div>
                ) : (
                    <>
                        {countAnalysisVideos > 0 ? (
                            <>
                                {currentStatus.map((el, ind) => (
                                    <VideoLoad
                                        key={ind}
                                        el={el}
                                        ind={ind}
                                        percent={el.status_percent}
                                        isAllow={false}
                                    />
                                ))}
                                <Pagination
                                    videosPerPage={videosPerPage}
                                    totalVideos={countAnalysisVideos}
                                    paginate={paginateAnalysis}
                                    funcNextPage={nextPageAnalysis}
                                    funcPrevPage={prevPageAnalysis}
                                    currentPage={currentPageAnalysis + 1}
                                />
                            </>
                        ) : (
                            <div className={cnDiaryStart("text-empty-msg")}>
                                Нет видео на анализе
                            </div>
                        )}
                    </>
                )}
            </RollUp>

            <RollUp title="Статистика за неделю" icon={statisticIcon}>
                <div className={cnDiaryStart("row")}>
                    {achievementsData && (
                        <>
                            <BadGoodBlock
                                type={TYPE_ACHIEVEMENTS.improvements}
                                text={achievementsData.improvements}
                            />
                            <BadGoodBlock
                                type={TYPE_ACHIEVEMENTS.deterioration}
                                text={achievementsData.deterioration}
                            />
                        </>
                    )}
                </div>

                <Tabs type={TYPE_TABS.PERCENT}>
                    {statsData &&
                        sectionTitles &&
                        totalJSON &&
                        Object.entries(sectionTitles).map(
                            ([key, value], idx) => (
                                <div
                                    key={idx}
                                    data-title={value}
                                    data-value={`${percentHelper(
                                        totalJSON.data?.data,
                                        key
                                    )}%`}
                                    style={{ width: "100%" }}
                                >
                                    <StatsGraph
                                        data={[
                                            ...statsData[
                                                key as keyof typeof statsData
                                            ],
                                        ].reverse()}
                                    />
                                    <RecommendationDairyGraph
                                        icon={lampСharge}
                                    />
                                </div>
                            )
                        )}
                </Tabs>
            </RollUp>

            <div>
                <div className={cnDiaryStart("text-h1")}>
                    Архив проверок{" "}
                    {countSearchVideos && (
                        <span className={cnDiaryStart("text-gray")}>
                            {countSearchVideos}
                        </span>
                    )}
                </div>
            </div>

            {countSearchVideos > 0 && searchVideos ? (
                <>
                    <ArchiveSearch updateSearch={updateSearch} />
                    {/* <ArchiveVideo video={searchVideos}/> */}
                    {searchVideos.map((el, ind) => (
                        <ArchiveVideoItem
                            handleClick={() => removeItem(el.id)}
                            key={el.id}
                            el={el}
                            ind={ind}
                            visible={el.status_video === "ERROR" ? false : true}
                        />
                    ))}
                    <Pagination
                        videosPerPage={videosPerPage}
                        totalVideos={countSearchVideos}
                        paginate={paginate}
                        funcNextPage={nextPage}
                        funcPrevPage={prevPage}
                        currentPage={currentPage + 1}
                    />
                </>
            ) : (
                <div className={cnDiaryStart("text-empty-msg")}>
                    Видео не найдено
                </div>
            )}
        </div>
    );
}


.\src\components\DiaryStart\style.scss
--------------------------------------
.DiaryStart {
    &-text {
        &-h1 {
            padding: 10px;
            color: #17282F;
            font-weight: 600;
            font-size: 24px;
            font-family: "Montserrat Alternates";
            font-style: normal;
            line-height: normal;
            // margin-bottom: -30px;

            &_margin_bottom {
                margin-bottom: -30px;
                padding: 0;
                padding-top: 10px;
            }
        }

        &-gray {
            color: #7C8EB5;
            font-weight: 600;
            font-size: 24px;
            font-family: "Montserrat Alternates";
            font-style: normal;
            line-height: normal;
        }

        &-empty-msg {
            padding: 12px;
            color: #7C8EB5;
            font-weight: 500;
            font-size: 16px;
            font-family: "Montserrat Alternates";
            font-style: normal;
            line-height: normal;

            &-animate {
                display: inline-block;
                color: #7C8EB5;
                font-weight: 500;
                font-size: 16px;
                font-family: "Montserrat Alternates";
                animation: fade-out 2s infinite ease-in-out;
                clip-path: inset(0 30px 0 0);
            }

            @keyframes fade-out {
                to {
                    clip-path: inset(0 -24px 0 0);
                }
            }
        }
    }

    &-aims {
        padding: 10px 0;
    }

    &-row {
        display: flex;
        flex-flow: row nowrap;
        gap: 20px;
        padding-bottom: 20px;
    }
}

.\src\components\Dropdown\index.tsx
-----------------------------------
import { ReactNode, useState } from "react";
import { cn } from "@bem-react/classname";
import { ReactSVG } from "react-svg";

import Arrow from "./icons/arrow-down.svg";

import "./style.scss";
import Visible from "./-Visible";
import Invisible from "./-Invisible";

const cnDropDown = cn("dropdown");

interface IDropdown {
    title?: string;
    subtitle?: string;
    visible?: ReactNode;
    invisible?: ReactNode;
}

export default function DropDown(props: IDropdown) {
    const [angle, setAngle] = useState(0);
    const [active, setActive] = useState("d-n");

    const openDrop = () => {
        if (angle === 90) {
            setAngle(0);
            setActive("d-n");
        } else {
            setAngle(90);
            setActive("");
        }
    };
    return (
        <div className={`${cnDropDown()}`}>
            <div className={`${cnDropDown("block")}`}>
                <div className={cnDropDown("header")} >
                    <ReactSVG
                        onClick={openDrop}
                        style={{ transform: `rotate(${angle}deg)` }}
                        className={cnDropDown("icon")}
                        src={Arrow}
                    />
                    <div className={cnDropDown("title")} onClick={openDrop}>{props.title}</div>
                </div>
                <div className={cnDropDown("subtitle")} >
                    <p>{props.subtitle}</p>
                </div>
            </div>
            <Visible>{props.visible}</Visible>
            <div className={cnDropDown("invisible", active)}>
                <Invisible>{props.invisible}</Invisible>
            </div>
        </div>
    );
}


.\src\components\Dropdown\style.scss
------------------------------------
.dropdown {
    // height: 100%;
    position: relative;
    display: flex;
    flex-direction: column;
    gap: 8px;
    align-items: flex-start;
    width: 100%;
    padding: 1rem 0.5rem;
    font-family: "Onest";
    border-bottom: 1px solid #d4dff4;

    .d-n {
        display: none;
    }

    .active {
        display: block;
    }

    &-block {
        display: flex;
        flex-direction: column;
        gap: 8px;
        align-items: flex-start;
        width: 100%;
    }

    &-header {
        display: flex;
        align-items: center;
        width: 100%;
        font-family: "Onest";
        
    }

    &-icon {
        margin-right: 10px;
        cursor: pointer;
    }

    &-title {
        color: #37476a;
        font-weight: 400;
        font-size: 24px;
        line-height: 31px;
        cursor: pointer;
    }

    &-subtitle {
        width: 100%;
        color: #7c8eb5;
        font-weight: 400;
        font-size: 20px;
        font-family: "Onest";
        line-height: 25px;
    }

    &-invisible {
        width: 100%;
    }
}

.dropdown:last-child {
    border-bottom: none;
}


.\src\components\Dropdown\-Invisible\index.tsx
----------------------------------------------
import { ReactNode } from "react";
import { cn } from "@bem-react/classname";

import "./style.scss";

type Props = {
    children?: ReactNode;
};

const cnInvisible = cn("invisible");

export default function Visible(props: Props) {
    return (
        <>
            <section className={cnInvisible("main")}>{props.children}</section>
        </>
    );
}


.\src\components\Dropdown\-Invisible\style.scss
-----------------------------------------------
.invisible {
    // border-bottom: 1px solid #D4DFF4;
    transition: all 0.3s;
}


.\src\components\Dropdown\-Visible\index.tsx
--------------------------------------------
import { ReactNode } from "react";
import { cn } from "@bem-react/classname";

import "./style.scss";

type Props = {
    children?: ReactNode;
};

const cnVisible = cn("visible");

export default function Visible(props: Props) {
    return (
        <div className={`${cnVisible()}`}>
            <section className={cnVisible("main")}>{props.children}</section>
        </div>
    );
}


.\src\components\Dropdown\-Visible\style.scss
---------------------------------------------
.visible {
    width: 100%;
    // margin-bottom: 24px;
}


.\src\components\Footer\index.tsx
---------------------------------
import "./style.scss";

import LogoTitle from "./assets/logo-title.svg";

export default function Footer() {
    return (
        <footer className="footer">
            <div className="footer-content">
                <img src={LogoTitle} alt="Logo" />
                <div className="footer-content__links-container">
                    <a
                        className="footer-content__link"
                        href="http://speechup.ru/confidential/"
                    >
                        {"Политика конфиденциальности"}
                    </a>
                    <a
                        className="footer-content__link"
                        href="http://speechup.ru/usersconf/"
                    >
                        {"Пользовательское соглашение"}
                    </a>
                </div>
                <span>&#169;&nbsp;ООО&nbsp;«Спичап»&nbsp;2023</span>
            </div>
        </footer>
    );
}


.\src\components\Footer\style.scss
----------------------------------
.footer {
    flex: 0 0 auto;
    width: 100%;
    height: 154px;
    margin: 0 auto -80px;
    padding: 0 0 0 120px;
    background-color: #e4eaf5;
}

.footer-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    height: 100%;
    padding: 0 40px;
}

.footer-content__links-container {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: space-around;
}

.footer-content__link {
    color: #37476a;
    white-space: nowrap;
}

.footer-content__link:visited {
    color: #37476a;
}


.\src\components\Graphs\informative.ts
--------------------------------------
import GraphColor from "../../models/graph/_colors";
import { BrickedGraphItem } from "../../models/graph/bricked";
import { InformativeDataItem } from "../../models/graph/informative";

const convertInformativeData = (
    raw: InformativeDataItem
): BrickedGraphItem => ({
    id: raw.seq_number,
    text: raw.text,
    top: "42%",
    startTime: raw.time_start,
    endTime: raw.time_end,
    /// ["main-text","unconfirmed","non-speech","parasite-words",]
    color:
        raw.type === "main-text"
            ? GraphColor.DARKGRAY
            : raw.type === "unconfirmed"
            ? GraphColor.ORANGE
            : raw.type === "parasite-words"
            ? GraphColor.BLUE
            : raw.type === "parasite"
            ? GraphColor.PURPLE
            : raw.type === "informative"
            ? GraphColor.GRAY
            : raw.type === "empty"
            ? GraphColor.ORANGE
            : raw.type === "sounds"
            ? GraphColor.RED
            : GraphColor.RED,
});

export default convertInformativeData;


.\src\components\Graphs\-Base\helpers.ts
----------------------------------------
import { Dispatch, SetStateAction, createContext } from "react";


export const _1SEC_PX = 6.2;

export const createXDescriptionFromSeconds = (lastSecond: number): string[] => {
    const minutes = Math.floor(lastSecond / 60);
    const seconds = Math.ceil((lastSecond - minutes * 60) / 10) + 1;

    const result = [];

    for (let i = 0; i <= minutes; i++) {
        for (let j = 0; j < (i === minutes ? seconds : 6); j++) {
            result.push(
                j === 6
                    ? `${i + 1 < 10 ? "0" : ""}${i + 1}:00`
                    : `${i < 10 ? "0" : ""}${i}:${j}0`,
            );
        }
    }

    return result; /// ["00:00", "00:10", ...]
};

interface IWithTimeStart {
    time_start: number;
}
interface IWithoutTimeStart {
    time_sec: number;
}

export const createXDescriptionFromData = (data: IWithTimeStart[]) =>
    createXDescriptionFromSeconds(data.at(-1)!.time_start);

export const createXDescriptionFromDataConfidence = (
    data: IWithoutTimeStart[],
) => createXDescriptionFromSeconds(data.at(-1)!.time_sec);

export const GraphContext = createContext({
    currentTime: 0,
    setCurrentTime: (() => {}) as Dispatch<SetStateAction<number>>,
});


.\src\components\Graphs\-Base\index.tsx
---------------------------------------
import {
    DetailedHTMLProps,
    HTMLAttributes,
    MouseEventHandler,
    useContext,
    useEffect,
    useState,
} from "react";

import { ValueTime } from "../../Analytics/helpers";
import { cn } from "@bem-react/classname";
import {
    GraphContext,
    _1SEC_PX,
    createXDescriptionFromSeconds,
} from "./helpers";

import BaseGraphYDescription from "./-YDescription";
import BaseGraphXDescription from "./-XDescription";
import BaseGraphBackground from "./-Background";
import GraphPointer from "./-Pointer";

import "./style.scss";
import { VideoTimeContext } from "../../Context/helpers";
import { convertTime } from "../../Archive/helpers";

const cnStrangeGraph = cn("strange-graph");

type Props = {
    descriptionX?: string[] | number[];
    descriptionY?: string[] | number[];
    selectedX?: number;
} & DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>;

export default function GraphBase({
    className,
    descriptionX,
    descriptionY,
    selectedX,
    ...props
}: Props) {
    // если ставить обычный useState а не кастомный то цепляет график
    const { currentTime, setCurrentTime } = useContext(VideoTimeContext);
    // const [currentTime, setCurrentTime] = useState(0);
    const [isPointerMoving, setPointerMoving] = useState(false);
    const [pointerX, setPointerX] = useState(0);
    const { updateTime } = useContext(ValueTime);

    const onMouseMove: MouseEventHandler<HTMLDivElement> = (e) => {
        if (isPointerMoving) {
            setPointerX((prev) => {
                const value = prev + e.movementX;
                return value > 0 ? value : 0;
            });
        }
    };
    useEffect(() => {
        if (!isPointerMoving) {
            /// currentTime changes from external context
            setPointerX(currentTime * _1SEC_PX);
        }
    }, [currentTime]);
    useEffect(() => {
        if (isPointerMoving) {
            /// isPointerMoving changes inside of the component
            // console.log(currentTime);
            const time = Math.floor(pointerX / _1SEC_PX);
            setCurrentTime(time);
            updateTime(time);
        }
    }, [pointerX]);
    return (
        <div
            className={cnStrangeGraph()}
            style={{ cursor: isPointerMoving ? "col-resize" : "auto" }}
            onMouseDown={() => setPointerMoving(true)}
            onMouseUp={() => setPointerMoving(false)}
            onMouseLeave={() => setPointerMoving(false)}
            onMouseMove={onMouseMove}
            {...props}
        >
            <div className={cnStrangeGraph("wrapper")}>
                <BaseGraphYDescription data={descriptionY} />
                <div
                    className={cnStrangeGraph("graph", {
                        bordered: !!(descriptionX && descriptionY),
                    })}
                    style={{
                        width: `${(descriptionX?.length || 0) * 62}px`,
                    }}
                >
                    <BaseGraphBackground
                        sectionsVert={descriptionX?.length}
                        sectionsHorz={descriptionY?.length}
                        stats={""}
                    />
                    {props.children}
                </div>
            </div>
            {/* тут устанавливается положение и время в поинтер */}
            {/* надо подогнать _1SEC_PX*/}
            <GraphPointer
                offset={40}
                left={pointerX}
                // text={new Date(currentTime * 1000)
                //     .toISOString()
                //     .substring(14, 19)}
                text={convertTime(currentTime)}
            />
            <div className={cnStrangeGraph("description-y")}>
                {/* снизу выбор текущего времени */}
                <BaseGraphXDescription
                    data={descriptionX}
                    selected={Math.floor(currentTime / 10)}
                    stats={""}
                />
            </div>
        </div>
    );
}


.\src\components\Graphs\-Base\style.scss
----------------------------------------
.strange-graph {
    $width: 50px;

    position: relative;
    display: flex;
    flex-direction: column;
    // width: 1000px;
    width: 100%;

    // height: 230px;
    height: 280px;
    padding: 16px 0;
    overflow-x: auto;
    overflow-y: hidden;
    background-color: #f7faff;
    border-radius: 16px;
    user-select: none;

    &-wrapper {
        display: flex;
        flex-grow: 1 0 auto;
        width: 100%;
        height: 100%;
    }

    &-description-x {
        flex: 0 0 auto;
        width: $width;
        border: thin solid cadetblue;
    }

    &-description-y {
        display: flex;
        height: 50px;
        // padding: 0 0 0 25px;
    }

    &-graph {
        position: relative;
        flex: 0 0 auto;
        overflow: auto;
        overflow: hidden;

        &_bordered {
            $line: thin solid #b2c2e4;

            border-bottom: $line;
            border-left: $line;
        }
    }
}


.\src\components\Graphs\-Base\-Background\index.tsx
---------------------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";

const CN = cn("base-graph-background");

type Props = {
    sectionsVert?: number;
    sectionsHorz?: number;
    stats: string;
};

export default function BaseGraphBackground({
    sectionsVert = 1,
    sectionsHorz = 0,
    stats,
}: Props) {
    return (
        <div className={CN()}>
            {Array(sectionsVert - 1)
                .fill(null)
                .map((_, idx) => (
                    <div
                        className={CN(
                            stats !== "st" ? "section" : "section-stats",
                            { first: idx === 0 }
                        )}
                        key={idx}
                    >
                        {!!sectionsHorz && (
                            <>
                                <div className={CN("header")}></div>
                                {Array(sectionsHorz - 1)
                                    .fill(null)
                                    .map((_, idx) => (
                                        <div
                                            className={CN("subsection")}
                                            key={idx}
                                        />
                                    ))}
                            </>
                        )}
                    </div>
                ))}
        </div>
    );
}


.\src\components\Graphs\-Base\-Background\style.scss
----------------------------------------------------
.base-graph-background {
    position: absolute;
    display: flex;
    height: 100%;

    // $line-color: black;
    $line-color: #e2e9f7;

    &-header {
        height: 10px;
        border-style: dashed;
    }

    &-section {
        width: 62px;
    }

    &-section-stats {
        width: 72px;
    }

    &-section,
    &-section-stats {
        display: flex;
        flex-direction: column;
        border-right: 1px dashed $line-color;

        &_first {
            border-style: dashed;
            border-left: 1px dashed $line-color;
        }
    }

    &-subsection {
        flex: 1 0 auto;
        border-style: dashed;
        border-top: 1px solid $line-color;
    }
}


.\src\components\Graphs\-Base\-Help\index.tsx
---------------------------------------------
import { cn } from "@bem-react/classname";
import { useState, useRef, useEffect, ReactNode } from "react";

import "./style.scss";
import { getWindowWidth } from "../../../../tools/window";

const OFFSET = 10;

const cnGraphHelp = cn("graph-help");

const GraphHelp = ({
    content,
    color,
    relative: isRelative = false,
}: {
    content: ReactNode;
    color?: string;
    relative?: boolean;
}) => {
    const [isOpened, setIsOpened] = useState(false);

    const [left, setLeft] = useState(0);
    const [top, setTop] = useState(0);
    const [helpWidth, setHelpWidth] = useState(0);

    const wrapperRef = useRef<HTMLDivElement>(null);

    const helpRef = useRef<HTMLDivElement>(null);

    const handleMousePosition: React.MouseEventHandler<HTMLDivElement> = (
        e
    ) => {
        const windowWidth = getWindowWidth();
        if (windowWidth - OFFSET < e.clientX + helpWidth) {
            setLeft(windowWidth - helpWidth);
        } else {
            setLeft(e.clientX + OFFSET);
        }
        setTop(e.clientY + OFFSET);
    };
    const handleMousePositionRel: React.MouseEventHandler<HTMLDivElement> = (
        e
    ) => {
        if (wrapperRef.current) {
            const windowWidth = getWindowWidth();
            const { left, top } = wrapperRef.current.getBoundingClientRect();
            if (windowWidth - OFFSET < e.clientX + helpWidth) {
                setLeft(windowWidth - helpWidth - left);
            } else {
                setLeft(e.clientX - left + OFFSET);
            }
            setTop(e.clientY - top + OFFSET);
        }
    };

    useEffect(() => {
        if (helpRef.current) {
            setHelpWidth(helpRef.current.getBoundingClientRect().width);
        }
    }, [helpRef.current]);

    return (
        <div
            onMouseMove={
                isRelative ? handleMousePositionRel : handleMousePosition
            }
            onMouseEnter={() => setIsOpened(true)}
            onMouseLeave={() => setIsOpened(false)}
            className={cnGraphHelp()}
            ref={wrapperRef}
        >
            {isOpened && (
                <div
                    style={{ top, left, border: `thin solid ${color}` }}
                    className={cnGraphHelp("content")}
                    ref={helpRef}
                >
                    {content}
                </div>
            )}
        </div>
    );
};
export default GraphHelp;


.\src\components\Graphs\-Base\-Help\style.scss
----------------------------------------------
.graph-help {
    height: 100%;

    &-content {
        position: absolute;
        z-index: 1;
        width: max-content;
        padding: 8px 12px;
        font-weight: 500;
        font-size: 0.75rem;
        background-color: white;
        border-radius: 12px;
    }
}


.\src\components\Graphs\-Base\-Median\index.tsx
-----------------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";
import { Fragment } from "react";
import { Tooltip } from "react-tooltip";

const CN = cn("graph-median");

type Props = { top?: string; tooltip?: boolean; average?: number };


export default function GraphMedian({ top, average, tooltip = false }: Props) {
    return tooltip ? (
        <Fragment>
            <div
                className={CN()}
                style={{ top }}
                data-tooltip-id="average-tooltip"
            />
            <Tooltip
                id={"average-tooltip"}
                place={"top-start"}
                noArrow={true}
                className={CN("tooltip")}
            >
                {"Среднее значение уверенности: "}
                <span className={CN("tooltip-bold")}>
                    {((100 - average!) / 100).toFixed(2)}
                </span>
            </Tooltip>
        </Fragment>
    ) : (
        <div
            className={CN()}
            style={{ top }}
            onMouseEnter={() => console.log("focus")}
        />
    );
}


.\src\components\Graphs\-Base\-Median\style.scss
------------------------------------------------
.graph-median {
    position: absolute;
    z-index: 100;
    width: 100%;
    height: 1px;
    background-image: linear-gradient(
        to left,
        #9aa9c7 33%,
        rgb(255 255 255 / 0%) 0%
    );
    background-repeat: repeat-x;
    background-position: bottom;
    background-size: 30px 1px;

    &-tooltip {
        z-index: 100;
        gap: 6px;
        padding: 8px 12px;
        color: #37476a !important;
        font-weight: 400;
        font-size: 12px !important;
        font-family: "Onest" !important;
        font-style: normal;
        line-height: normal;
        background: #fff !important;
        border: 1px solid #2477f4;
        border-radius: 12px !important;
        box-shadow: 2px 2px 12px 0 rgb(173 185 212 / 30%);

        &-bold {
            color: #37476a;
            font-weight: 500;
        }
    }
}


.\src\components\Graphs\-Base\-Pointer\index.tsx
------------------------------------------------
import { cn } from "@bem-react/classname";
import "./style.scss";

const CN = cn("graph-pointer");

type Props = { left?: number; text?: string; offset?: number };

export default function GraphPointer({
    offset = 0,
    left = 0,
    text = "00:00",
}: Props) {
    return (
        <div className={CN()} style={{ left: `${left + offset}px` }}>
            <div className={CN("title")}>{text}</div>
            <div className={CN("stick")}></div>
        </div>
    );
}


.\src\components\Graphs\-Base\-Pointer\style.scss
-------------------------------------------------
.graph-pointer {
    position: absolute;
    display: flex;
    flex-direction: column;
    align-items: center;
    height: 85%;
    color: white;
    font-weight: 500;
    font-family: Onest;
    font-size: 12px;

    &-title {
        flex: 0 0 auto;
        padding: 0 8px;
        background-color: #2477f4;
        border-radius: 15px;
        cursor: pointer;
    }

    &-stick {
        flex: 1 0 auto;
        width: 2px;
        background-color: #2477f4;
        cursor: pointer;
    }
}

.\src\components\Graphs\-Base\-SecondPointer\index.tsx
------------------------------------------------------
import { cn } from "@bem-react/classname";
import "./style.scss";

const CN = cn("graph-pointer");

type Props = {
    left?: number;
    text?: string;
    offsetX?: number;
    offsetY?: number;
};

export default function GraphPointer({
    offsetX = 0,
    offsetY = 0,

    left = 0,
    text = "00:00",
}: Props) {
    return (
        <div
            className={CN()}
            style={{
                left: `${left}%`,
                height: "calc(100% + 25px",
                top: `${offsetY}px`,
            }}

            // --------------- было в предыдущей версии --------------
            // style={{ left: `${left + offset}px`, height: "calc(100% + 25px" }}
        >
            {/* <div className={CN()} style={{ left: `0px` }}> */}
            <div className={CN("stick")}>
                <div className={CN("title")}>{text}</div>
            </div>
        </div>
    );
}


.\src\components\Graphs\-Base\-SecondPointer\style.scss
-------------------------------------------------------
.graph-pointer {
    position: absolute;
    display: flex;
    flex-direction: column;
    align-items: center;
    height: 85%;
    color: white;
    font-weight: 500;
    font-size: 12px;
    font-family: "Onest";

    &-stick {
        position: relative;
        flex: 1 0 auto;
        width: 2px;
        background-color: #2477f4;
        cursor: pointer;
    }

    &-title {
        position: absolute;
        top: 0;
        left: -25px;
        z-index: 100;
        flex: 0 0 auto;
        width: 50px;
        padding: 0 8px;
        background-color: #2477f4;
        border-radius: 15px;
        cursor: pointer;
    }
}


.\src\components\Graphs\-Base\-XDescription\index.tsx
-----------------------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";
import { Fragment } from "react";

const CN = cn("base-graph-x-description");

type Props = { data?: number[] | string[]; selected?: number; stats: string };

export default function BaseGraphXDescription({
    data,
    selected = 0,
    stats,
}: Props) {
    const curTime = data?.map((el, ind) => {
        const curDate = new Date(el);
        const days = ["вс", "пн", "вт", "ср", "чт", "пт", "сб"];
        return {
            day: days[curDate.getDay()],
            date: curDate.getDate(),
            month: new Date().getMonth()+1,
        };
    });
    return (
        <div className={stats !== "st" ? CN() : CN("stats")}>
            {stats === "st"
                ? curTime!.map((el, idx) =>
                      idx !== 0 ? (
                          <div
                              className={CN(
                                  stats !== "st" ? "item" : "item-stats",
                                  {
                                      first: idx === 0,
                                      selected: idx === selected,
                                  }
                              )}
                              key={idx}
                          >
                              {stats === "st" ? (
                                  <>
                                      {el.day}
                                      <span
                                          style={{
                                              color:
                                                  idx === selected
                                                      ? "white"
                                                      : "#adb9d480",
                                          }}
                                      >
                                          {`${
                                              el.date >= 10
                                                  ? el.date
                                                  : "0" + el.date
                                          }.${
                                              el.month >= 10
                                                  ? el.month
                                                  : "0" + el.month
                                          }`}
                                      </span>
                                  </>
                              ) : (
                                  <span>{data![idx]}</span>
                              )}
                          </div>
                      ) : (
                          <Fragment key={idx} />
                      )
                  )
                : curTime!.map((el, idx) => (
                      <div
                          className={CN(
                              stats !== "st" ? "item" : "item-stats",
                              {
                                  first: idx === 0,
                                  selected: idx === selected,
                              }
                          )}
                          key={idx}
                      >
                          {stats === "st" ? (
                              <>
                                  {el.day}
                                  <span
                                      style={{
                                          color:
                                              idx === selected
                                                  ? "white"
                                                  : "#adb9d480",
                                      }}
                                  >
                                      {`${
                                          el.date >= 10
                                              ? el.date
                                              : "0" + el.date
                                      }.${
                                          el.month >= 10
                                              ? el.month
                                              : "0" + el.month
                                      }`}
                                  </span>
                              </>
                          ) : (
                              <span>{data![idx]}</span>
                          )}
                      </div>
                  ))}
        </div>
    );
}


.\src\components\Graphs\-Base\-XDescription\style.scss
------------------------------------------------------
.base-graph-x-description {
    display: flex;
    font-weight: 500;
    font-size: 0.75rem;

    &-item {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 50px;
        margin: 6px;
        color: #adb9d4;
        background-color: #f7faff;
        border-radius: 4px;

        &_first {
            margin-left: 14px;
        }

        &_selected {
            color: white;
            background-color: #ffb800;
        }
    }

    &-item-stats {
        display: flex;
        gap: 1px;
        align-items: center;
        justify-content: space-between;
        width: 70px;
        height: 20px;
        padding: 6px;
        color: #adb9d4;
        background-color: #fff;
        border-radius: 4px;

        &_first {
            // margin-left: 10px;
        }

        & > span {
            color: #adb9d480;
        }

        &_selected {
            color: white;
            background-color: #ffb800;
        }
    }
}

.base-graph-x-description-stats {
    display: flex;
    justify-content: space-between;
    margin: 6px;
    font-weight: 500;
    font-size: 0.75rem;

    &-item {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 50px;
        margin: 6px;
        color: #adb9d4;
        background-color: #f7faff;
        border-radius: 4px;

        &_first {
            margin-left: 14px;
        }

        &_selected {
            color: white;
            background-color: #ffb800;
        }
    }

    &-item-stats {
        display: flex;
        gap: 1px;
        align-items: center;
        justify-content: space-between;
        width: 70px;
        // margin: 6px;
        height: 20px;
        padding: 6px;
        color: #adb9d4;
        background-color: #fff;
        border-radius: 4px;

        &_first {
            // margin-left: 10px;
        }

        & > span {
            color: #adb9d480;
        }

        &_selected {
            color: white;
            background-color: #ffb800;
        }
    }
}


.\src\components\Graphs\-Base\-YDescription\index.tsx
-----------------------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";

const CN = cn("base-graph-y-description");

type Props = {
    data?: string[] | number[];
};

export default function BaseGraphYDescription({ data }: Props) {
    return (
        <div className={CN()}>
            {data?.map((el) => (
                <div className={CN("item")} key={el}>
                    {el}
                </div>
            ))}
        </div>
    );
}


.\src\components\Graphs\-Base\-YDescription\style.scss
------------------------------------------------------
.base-graph-y-description {
    display: flex;
    flex-direction: column-reverse;
    align-items: center;
    justify-content: space-between;
    min-width: 40px;
    padding: 10px 6px 0 0;
    font-weight: 500;
    font-size: 0.75rem;

    &-item {
        width: inherit;
        color: #b2c2e4;
        text-align: right;
    }
}


.\src\components\Graphs\-Base\Bricked\index.tsx
-----------------------------------------------
import { useContext } from "react";
import SecondBrick from "./-Brick";
import GraphMedian from "../-Median";
import GraphBase from "..";
import { _1SEC_PX, createXDescriptionFromSeconds } from "../helpers";
import { BrickedGraphItem } from "../../../../models/graph/bricked";

type Props = { items: BrickedGraphItem[] };

export default function BrickedGraph({ items }: Props) {
    const descriptionX = createXDescriptionFromSeconds(items.at(-1)!.endTime);

    return (
        <GraphBase descriptionX={descriptionX}>
            <GraphMedian top="48%" />
            {items.map((el, idx) => (
                <SecondBrick
                    id={idx}
                    key={idx}
                    // разобраться вот тут
                    width={`${
                        // (el.endTime - el.startTime) * (_1SEC_PX + 0.05)
                        // здесь чёт кудато надо округлять
                        (el.endTime - el.startTime) * _1SEC_PX
                    }px`}
                    top={el.top}
                    // left={`${el.startTime * (_1SEC_PX + 0.05)}px`}
                    left={`${el.startTime * _1SEC_PX}px`}
                    color={el.color}
                    text={el.text}
                    type={el.type}
                    time={el.startTime}
                />
            ))}
        </GraphBase>
    );
}


.\src\components\Graphs\-Base\Bricked\-Brick\index.tsx
------------------------------------------------------
import { cn } from "@bem-react/classname";
import { useContext } from "react";

import GraphHelp from "../../-Help";

import "./style.scss";

import { Tooltip } from "react-tooltip";
import { VideoTimeContext } from "../../../../Context/helpers";

type Props = {
    id?: number;
    top?: string;
    left?: string;
    type?: "thin" | "solid" | "line";
    width?: string;
    color?: string;
    text?: string;
    time?: number;
};

const CN = cn("bricked-graph-brick");

export default function SecondBrick({
    id = 0,
    top,
    left,
    color: backgroundColor,
    type = "solid",
    width = "50px",
    text,
    time,
}: Props) {
    const { setCurrentTime } = useContext(VideoTimeContext);

    const choiseBlock = (event: React.MouseEvent<HTMLDivElement>) => {
        const dataValue = +event.currentTarget.dataset.time! as number;

        if (dataValue || dataValue === 0) {
            setCurrentTime(dataValue);
        }
    };

    return (
        <>
            <div
                style={{ top, width, left, backgroundColor }}
                className={CN({ [type]: true })}
                data-tooltip-id={"brick-" + id}
                onDoubleClick={choiseBlock}
                data-time={time}
                data-tooltip-offset={5}
            ></div>
            <Tooltip
                id={"brick-" + id}
                place={"bottom-end"}
                noArrow={true}
                className={CN("tooltip")}
                style={{ borderColor: backgroundColor }}
            >
                <span className={CN("tooltip-text")}>{text}</span>
            </Tooltip>
        </>
    );
}


.\src\components\Graphs\-Base\Bricked\-Brick\style.scss
-------------------------------------------------------
.bricked-graph-brick {
    position: absolute;

    &_solid {
        height: 24px;
        border-radius: 4px;
    }

    &_thin {
        height: 8px;
        border-radius: 2px;
    }

    &_line {
        height: 2px;
    }

    &-tooltip {
        z-index: 100;
        max-width: 1170px !important;
        padding: 8px 12px !important;
        line-height: 12px !important;
        background: #fff !important;
        border: 1px solid #7c8eb5;
        border-radius: 12px !important;
        box-shadow: 2px 2px 12px 0 rgb(173 185 212 / 30%);

        &-text {
            color: #37476a;
            font-weight: 500;
            font-size: 12px;
            font-family: "Onest";
        }
    }
}


.\src\components\Graphs\-Base\Line\index.tsx
--------------------------------------------
import { Fragment, ReactNode } from "react";
import { LineChart, Line, ResponsiveContainer, YAxis } from "recharts";
import { cn } from "@bem-react/classname";

import GraphMedian from "../-Median";
import GraphBase from "..";

import "./style.scss";

const CN = cn("line-graph");

type Props = {
    withMedian?: boolean;
    descriptionX?: string[];
    descriptionY?: string[] | number[];
    background?: ReactNode;
    items: Record<string, number>[];
    colors?: Record<string, string>;
    range?: { min: number; max: number };
    average?: number;
    tooltip?: boolean;
};

export default function LineGraph({
    descriptionX,
    descriptionY = [-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1],
    withMedian = true,
    items,
    colors,
    background,
    range,
    average,
    tooltip = false,
}: Props) {
    return (
        <GraphBase descriptionX={descriptionX} descriptionY={descriptionY}>
            {/* придумать как тут задать медиану */}
            {withMedian && (
                <GraphMedian
                    top={`${average}%`}
                    tooltip={tooltip}
                    average={average}
                />
            )}
            <div className={CN("background")}>{background}</div>
            <ResponsiveContainer
                width="100%"
                height="100%"
                className={CN("recharts-wrapper")}
            >
                <LineChart data={items} margin={{ right: 60 }}>
                    {Object.keys(items[0]).map((key) => (
                        <Fragment key={key}>
                            {range && (
                                <YAxis domain={[range.min, range.max]} hide />
                            )}
                            <Line
                                type="linear"
                                dataKey={key}
                                dot={false}
                                // dot={true}
                                stroke={colors ? colors[key] : "#000"}
                                strokeWidth={1}
                                isAnimationActive={false}
                            />
                        </Fragment>
                    ))}
                </LineChart>
            </ResponsiveContainer>
        </GraphBase>
    );
}


.\src\components\Graphs\-Base\Line\style.scss
---------------------------------------------
.line-graph {
    &-center {
        position: absolute;
        top: 50%;
    }

    &-recharts-wrapper {
        overflow: hidden;
    }

    &-background {
        position: absolute;
        width: 100%;
        height: 100%;
    }
}


.\src\components\Graphs\-Base\Stats\helpers.ts
----------------------------------------------
import { Dispatch, SetStateAction, createContext } from "react";

export const _1SEC_PX = 6.15;

export const createXDescriptionFromSeconds = (lastSecond: number): string[] => {
    const minutes = Math.floor(lastSecond / 60);
    const seconds = Math.ceil((lastSecond - minutes * 60) / 10) + 1;
    const result = [];

    for (let i = 0; i <= minutes; i++) {
        for (let j = 0; j < (i === minutes ? seconds : 6); j++) {
            result.push(`${i < 10 ? "0" : ""}${i}:${j}0`);
        }
    }

    return result; /// ["00:00", "00:10", ...]
};

interface IWithTimeStart {
    time_start: number;
}

export const createXDescriptionFromData = (data: IWithTimeStart[]) =>
    createXDescriptionFromSeconds(data.at(-1)!.time_start);

export const GraphContext = createContext({
    currentTime: 0,
    setCurrentTime: (() => {}) as Dispatch<SetStateAction<number>>,
});


.\src\components\Graphs\-Base\Stats\index.tsx
---------------------------------------------
import { DetailedHTMLProps, HTMLAttributes } from "react";

import { cn } from "@bem-react/classname";
import { GraphContext, _1SEC_PX } from "./helpers";

import BaseGraphXDescription from "./../-XDescription";
import BaseGraphBackground from "./../-Background";

import "./style.scss";
import Good from "./icons/good.svg";
import Bad from "./icons/bad.svg";
import Perfect from "./icons/perfect.svg";
import Terrible from "./icons/terrible.svg";
import Average from "./icons/average.svg";
import Ellipse from "./icons/Ellipse50.svg";

import { ReactSVG } from "react-svg";

const cnStrangeGraph = cn("strange-graph-stats");

type Props = {
    descriptionX?: string[] | number[];
    descriptionY?: string[] | number[];
    items: Record<string, number>[];
    selectedX?: number;
    visible?: boolean;
} & DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>;

export default function GraphBaseStats({
    className,
    items,
    descriptionX,
    descriptionY,
    selectedX,
    visible = true,
    ...props
}: Props) {
    const frameArr = [Terrible, Bad, Average, Good, Perfect, Ellipse];

    const frameHelper = (value: number) => {
        if (value <= 0) {
            return frameArr[5];
        } else if (value === 1) {
            return frameArr[4];
        } else return frameArr[Math.floor((value * 100) / 20)];
    };
    return (
        <div className={cnStrangeGraph()} {...props}>
            {visible && (
                <div className={cnStrangeGraph("description")}>
                    <p className={cnStrangeGraph("title")}>
                        {"Статистика еще не доступна!"}
                    </p>
                    <p className={cnStrangeGraph("subtitle")}>
                        {
                            "Начните загружать видео, учитывать их в статистике и уже через неделю здесь появятся первые результаты!"
                        }
                    </p>
                </div>
            )}
            <div className={cnStrangeGraph("wrapper")}>
                <div>
                    {!visible &&
                        items.map((el, ind) =>
                            ind !== 0 ? (
                                <div
                                    key={ind}
                                    className={cnStrangeGraph("frame")}
                                    style={{
                                        top: `${
                                            190 - (34 * (el.value * 100)) / 20
                                        }px`,

                                        right: `calc(${12.5 * (8 - ind)}% +  ${
                                            (50 / 8) * (8 - ind)
                                        }px)`,
                                        transform: "translate(50%, -50%)",
                                    }}
                                >
                                    <ReactSVG src={frameHelper(el.value)} />
                                </div>
                            ) : undefined
                        )}
                </div>
                {props.children}
                <div className={cnStrangeGraph("description-y")}>
                    <BaseGraphXDescription
                        data={descriptionX}
                        selected={descriptionX!.length - 1}
                        stats={"st"}
                    />
                </div>
            </div>
        </div>
    );
}


.\src\components\Graphs\-Base\Stats\style.scss
----------------------------------------------
.strange-graph-stats {
    $width: 50px;

    position: relative;
    display: flex;
    flex-direction: column;
    overflow: auto;
    background-color: #f7faff;
    border-radius: 16px;
    user-select: none;

    &-description {
        position: absolute;
        top: 41%;
        left: 50%;
        z-index: 1;
        display: flex;
        flex-direction: column;
        gap: 8px;
        align-items: center;
        transform: translate(-50%, -50%);
    }

    &-title {
        color: #37476a;
        font-weight: 600;
        font-size: 20px;
        font-family: "Montserrat Alternates";
    }

    &-subtitle {
        width: 720px;
        color: #7c8eb5;
        font-size: 16px;
        font-family: "Onest";
    }

    &-wrapper {
        position: relative;
        display: flex;
        flex-grow: 1 0 auto;
        width: 100%;
        height: 100%;
    }

    &-frame {
        position: absolute;
        z-index: 100;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 26px;
        height: 24px;
        transform: translateY(-50%);

        & > div {
            & > div {
                display: flex;
                align-items: center;
            }
        }
    }

    &-description-x {
        flex: 0 0 auto;
        width: $width;
        border: thin solid cadetblue;
    }

    &-description-y {
        position: absolute;
        top: 195px;
        right: calc(12.5% - 30px);
        width: calc(6 * 12.5% + 50 / 8 * 6px + 70px + 12px);
    }

    &-graph {
        position: relative;
        flex: 0 0 auto;
        overflow: auto;

        &_bordered {
            $line: thin solid #b2c2e4;

            border-bottom: $line;
            border-left: $line;
        }
    }
}


.\src\components\Graphs\-Base\StatsLine\index.tsx
-------------------------------------------------
import { Fragment, ReactNode } from "react";
import {
    ResponsiveContainer,
    Area,
    XAxis,
    CartesianGrid,
    YAxis,
    ComposedChart,
    LabelList,
    Label,
} from "recharts";
import { cn } from "@bem-react/classname";

import "./style.scss";
import { StatsDataItem } from "../../../../models/graph/stats";
import GraphBaseStats from "../Stats";

const CN = cn("stats-line-graph");

type Props = {
    withMedian?: boolean;
    visible?: boolean;
    descriptionX?: string[];
    descriptionY?: string[] | number[];
    background?: ReactNode;
    items: Record<string, number>[];
    colors?: Record<string, string>;
    range?: { min: number; max: number };
    data?: StatsDataItem[];
};

export default function StatsLineGraph({
    descriptionX,
    descriptionY = [-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1],
    withMedian = true,
    visible = true,
    items,
    colors,
    range,
}: // data,
Props) {
    const size = [0, 1];
    return (
        <div className={CN()}>
            <GraphBaseStats
                items={items}
                descriptionX={descriptionX}
                descriptionY={descriptionY}
                visible={visible}
            >
                <ResponsiveContainer
                    width="100%"
                    height={230}
                    className={CN("recharts-wrapper")}
                >
                    {/* <AreaChart */}
                    <ComposedChart
                        style={{ outline: "none", background: "#F7FAFF" }}
                        data={items}
                        margin={{
                            top: 0,
                            right: 0,
                            left: 0,
                            bottom: 0,
                        }}
                    >
                        <defs>
                            <linearGradient
                                id="colorUv"
                                x1="0"
                                y1="0"
                                x2="0"
                                y2="1"
                            >
                                <stop
                                    offset="5%"
                                    stopColor="#2477F4"
                                    stopOpacity={0.6}
                                />
                                <stop
                                    offset="95%"
                                    stopColor="#2477F4"
                                    stopOpacity={1}
                                />
                            </linearGradient>
                        </defs>
                        <CartesianGrid strokeDasharray="4 3" />
                        <XAxis
                            type="number"
                            dataKey="name"
                            domain={[1, 8]}
                            padding={{ left: -50 }}
                            tickCount={9}
                            height={0}
                        />
                        <YAxis
                            allowDataOverflow={true}
                            type="number"
                            domain={[...size]}
                            padding={{ bottom: 40, top: 20 }}
                            tickCount={6}
                            width={0}
                        />
                        {/*  добавить в area label={<CustomizedLabel />} */}
                        {!visible && (
                            <Area
                                dataKey="value"
                                stroke="#084CA5"
                                fillOpacity={1}
                                fill="url(#colorUv)"
                            />
                        )}
                        {!visible && (
                            <Area
                                dataKey="vv"
                                stroke="#084CA5"
                                fillOpacity={1}
                                fill="#2477F4"
                            />
                        )}
                    </ComposedChart>
                </ResponsiveContainer>
            </GraphBaseStats>
        </div>
    );
}


.\src\components\Graphs\-Base\StatsLine\style.scss
--------------------------------------------------
.stats-line-graph {
    &-center {
        position: absolute;
        top: 50%;
    }

    &-recharts-wrapper {
        overflow: hidden;
    }

    &-background {
        position: absolute;
        width: 100%;
        height: 100%;
    }
}


.\src\components\Graphs\Clarity\index.tsx
-----------------------------------------
import BrickedGraph from "../-Base/Bricked";

import { ClarityDataItem } from "../../../models/graph/clarity";
import convertClarityData from "../../../@adapters/Graphs/clarity";

type Props = { data: ClarityDataItem[] };

export default function ClarityGraph({ data }: Props) {
    return <BrickedGraph items={convertClarityData(data)} />;
}


.\src\components\Graphs\communicativeNorm\index.tsx
---------------------------------------------------
import React from "react";
import { ISimel } from "../../../models/graph/inteface/ISimel";
import angryImg from "./img/angry.svg";
import cognitiveDistortionsImg from "./img/CognitiveDistortions.svg";
import parasiteWordsImg from "./img/ParasiteWords.svg";
import Smiley from "../SmileBlock";
import "./style.scss";

type Props = {
    filler_words: number;
    cognitive_distortion: number;
    aggression: number;
};

function CommunicativeNorm(props: Props) {
    let inf: ISimel = {
        items: [
            {
                id: 1,
                title: "Слова-паразиты",
                procent: props.filler_words,
                colorProcent: "#2477F4",
                icon: parasiteWordsImg,
            },
            {
                id: 2,
                title: "Когнитивныe искажения",
                procent: props.cognitive_distortion,
                colorProcent: "#FFB800",
                icon: cognitiveDistortionsImg,
            },
            {
                id: 3,
                title: "Агрессивность",
                procent: props.aggression,
                colorProcent: "#E23339",
                icon: angryImg,
            },
        ],
    };
    return (
        <>
            <div className="CommunicativeNormBloc">
                <Smiley component={inf} />
            </div>
        </>
    );
}
export default CommunicativeNorm;


.\src\components\Graphs\communicativeNorm\style.scss
----------------------------------------------------
.CommunicativeNormBloc{
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
}



.\src\components\Graphs\Confidence\index.tsx
--------------------------------------------
import { cn } from "@bem-react/classname";

import LineGraph from "../-Base/Line";
import GraphColor from "../../../models/graph/_colors";

import {
    // createXDescriptionFromData,
    createXDescriptionFromDataConfidence,
} from "../-Base/helpers";
import { ConfidenceDataItem } from "../../../models/graph/confidence";

import "./style.scss";

const CN = cn("confidence-graph");

type Props = { data: ConfidenceDataItem[]; average: number };

const X = "value";
export default function ConfidenceGraph({ data, average }: Props) {
    return (
        <LineGraph
            // items={data.map((x) => ({ [X]: x.value }))}
            items={data.map((x) => ({ [X]: x.confidence }))}
            colors={{ [X]: GraphColor.BLUE }}
            descriptionX={createXDescriptionFromDataConfidence(data)}
            descriptionY={[0, 0.2, 0.4, 0.6, 0.8, 1]}
            range={{ min: 0, max: 1 }}
            average={average}
            background={
                <div className={CN("bg")}>
                    <div className={CN("bg", { high: true })} />
                    <div className={CN("bg", { medium: true })} />
                    <div className={CN("bg", { low: true })} />
                </div>
            }
            tooltip={true}
        />
    );
}


.\src\components\Graphs\Confidence\style.scss
---------------------------------------------
.confidence-graph {
    &-bg {
        width: 100%;
        height: 100%;

        &_high {
            height: 40%;
            background: rgb(36 241 155 / 15%);
        }

        &_medium {
            height: 20%;
            background: rgb(255 232 23 / 15%);
        }

        &_low {
            height: 40%;
            background: rgb(255 78 120 / 15%);
        }
    }
}


.\src\components\Graphs\ConfidenceLine\index.tsx
------------------------------------------------
import { cn } from "@bem-react/classname";
import { ConfidenceDataItem } from "../../../models/graph/confidence";

import { convertConfidenceArr } from "../../Analytics/helpers";
import "./style.scss";
import convertSecondsIntoTime from "../../../@adapters/Time/convertSeconds";
import { Fragment } from "react";
import { Tooltip } from "react-tooltip";

const CN = cn("confidence-line");

type Props = {
    items: ConfidenceDataItem[];
    startTime: number;
    endTime: number;
};

export default function ConfidenceLineGraph({
    items,
    startTime = 100,
    endTime = 100,
}: Props) {
    const convertStart = convertSecondsIntoTime(startTime);
    const convertEnd = convertSecondsIntoTime(endTime);
    const convertArr = convertConfidenceArr(items);
    return (
        <div className={CN()}>
            <div className={CN("time")}>{convertStart}</div>
            <div className={CN("block")}>
                {convertArr.map((el, ind) => (
                    <Fragment key={ind}>
                        <div
                            className={CN("element")}
                            style={{
                                width: `${(el.width / items.length) * 100}%`,
                            }}
                        >
                            <div
                                className={CN("element-position")}
                                style={{
                                    backgroundColor: el.color,
                                    top: el.position,
                                }}
                                data-tooltip-id={"confidence-brick-" + ind}
                            >
                                {/* <div
                                className={CN("help-content")}
                                style={{
                                    top: "20px",
                                    left: "0px",
                                }}
                            >
                                <div
                                    style={{
                                        borderColor: el.color,
                                    }}
                                >
                                    {el.desc}
                                </div>
                            </div> */}
                            </div>
                            {el.desc && (
                                <Tooltip
                                    id={"confidence-brick-" + ind}
                                    place={"bottom"}
                                    noArrow={true}
                                    className={CN("tooltip")}
                                    style={
                                        {
                                            "--color_border": el.color,
                                        } as React.CSSProperties
                                    }
                                >
                                    {el.desc}
                                </Tooltip>
                            )}
                        </div>
                    </Fragment>
                ))}
            </div>
            <div className={CN("time")}>{convertEnd}</div>
        </div>
    );
}


.\src\components\Graphs\ConfidenceLine\style.scss
-------------------------------------------------
.confidence-line {
    display: flex;
    gap: 8px;
    align-items: center;
    justify-content: space-between;
    height: 100%;

    &-time {
        color: #7c8eb5;
        font-size: 0.875rem;
    }

    &-block {
        display: flex;
        flex: 1 0 auto;
        height: 76px;

        &>div:first-child {
            border-radius: 40% 0 0 40%;
        }

        &>div:last-child {
            border-radius: 0 40% 40% 0;
        }
    }

    &-element {
        position: relative;
        display: flex;
        align-items: center;
        // flex: 1 0 auto;

        &-position {
            position: absolute;
            width: 100%;
            height: 30px;
            border-radius: 60px;
        }
    }

    &-help-content {
        position: relative;
        display: none;

        &>div {
            position: absolute;
            top: 20px;
            left: 0;
            z-index: 100;
            width: max-content;
            padding: 8px 12px;
            color: #37476a;
            font-weight: 500;
            font-size: 0.75rem;
            background-color: white;
            border: thin solid rgb(173 185 212);
            border-radius: 12px;

            // top: 137px;
            // left: 447px;
        }
    }

    &-element-position:hover {
        &>div {
            display: block;
        }
    }

    &-tooltip {

        padding: 8px 12px;
        border-radius: 12px !important;
        border: 1px solid var(--color_border) !important;
        background: #FFF !important;
        box-shadow: 2px 2px 12px 0px rgba(173, 185, 212, 0.30);

        color: #17282F !important;
        font-family: Onest;
        font-size: 12px !important;
        font-style: normal;
        font-weight: 400;
        line-height: normal;
    }
}

@keyframes color_border {
    from {
        --color_border: #7C8EB5
    }
}

.\src\components\Graphs\Congruence\index.tsx
--------------------------------------------
import "./style.scss";
import { cn } from "@bem-react/classname";

import angrySmile from "./img/смайл злость.svg";
import happySmile from "./img/смайл радость.svg";
import neutralSmile from "./img/смайл нейтральность.svg";
import GraphColor from "../../../models/graph/_colors";
import { ChannelInfo } from "../../../models/graph/emotionality";
import ChannelCircle from "./ChannelCircle";

const CN = cn("congruence");

type Props = {
    diameter: ChannelInfo;
};

export default function Congruence({ diameter }: Props) {
    return (
        <div className={CN()}>
            <ChannelCircle
                title="Нейтрально"
                picture={neutralSmile}
                videoValue={diameter.video.neutral}
                audioValue={diameter.audio.neutral}
                textValue={diameter.text.neutral}
                color={GraphColor.GRAY}
            />
            <ChannelCircle
                title="Радость"
                picture={happySmile}
                videoValue={diameter.video.happiness}
                audioValue={diameter.audio.happiness}
                textValue={diameter.text.happiness}
                color={GraphColor.SUPERLIGHTGREEN}
            />
            <ChannelCircle
                title="Злость"
                picture={angrySmile}
                videoValue={diameter.video.anger}
                audioValue={diameter.audio.anger}
                textValue={diameter.text.anger}
                color={GraphColor.SUPERLIGHTRED}
            />
        </div>
    );
}


.\src\components\Graphs\Congruence\style.scss
---------------------------------------------
.congruence {
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.\src\components\Graphs\Congruence\ChannelCircle\index.tsx
----------------------------------------------------------
import { ReactSVG } from "react-svg";
import textIcon from "./assets/textIcon.svg";
import videoIcon from "./assets/videoIcon.svg";
import volumeIcon from "./assets/volumeIcon.svg";
import { cn } from "@bem-react/classname";

import "./style.scss";

type ChannelCircleProps = {
    title: string;
    picture: string;
    videoValue: number;
    audioValue: number;
    textValue: number;
    color: string;
};

function convertSharesIntoDiameter(fraction: number): number {
    const allowanceForDiameter = 20;
    const minValueDiameter = 20;
    const maxValueDiameter = 80;

    fraction = fraction * 100 + allowanceForDiameter;
    if (fraction < minValueDiameter) return minValueDiameter;
    else if (fraction > maxValueDiameter) return maxValueDiameter;
    else return fraction;
}

const CN = cn("ChannelCircle");

export default function ChannelCircle(props: ChannelCircleProps) {
    const valuesOfChannels = [
        props.videoValue,
        props.audioValue,
        props.textValue,
    ];
    const picturesForChannels = [videoIcon, volumeIcon, textIcon];

    return (
        <div className={CN("block")}>
            <div className={CN("header")}>
                <ReactSVG className={CN("header-image")} src={props.picture} />
                <div className={CN("header-title")}>{props.title}</div>
            </div>
            <div className={CN("circle")}>
                {valuesOfChannels.map((el, i) => (
                    <div
                        key={i}
                        className={CN("video")}
                        style={{
                            width: convertSharesIntoDiameter(el) + "px",
                            height: convertSharesIntoDiameter(el) + "px",
                            background: props.color,
                        }}
                    >
                        <ReactSVG src={picturesForChannels[i]} />
                    </div>
                ))}
            </div>
        </div>
    );
}


.\src\components\Graphs\Congruence\ChannelCircle\style.scss
-----------------------------------------------------------
.ChannelCircle {
    &-block {
        display: flex;
        flex-direction: column;
        gap: 16px;
        align-items: center;
        justify-content: center;
        width: 33%;
        height: 180px;
        padding: 16px 32px;
        background: #F7FAFF;
        border-radius: 32px;
    }

    &-header {
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
        gap: 10px;

        &-image {
            svg {
                display: flex;
                flex-direction: row;
                justify-content: center;
                align-items: center;
            }
        }

        &-title {
            color: #7C8EB5;
            text-align: center;
            font-family: Montserrat Alternates;
            font-size: 12px;
            font-weight: 600;
            line-height: normal;
        }
    }

    &-circle {
        display: flex;
        flex-direction: row;
        align-items: center;
        padding: 0;
    }

    &-video {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        justify-content: center;
        margin: 5px;
        line-height: 0px;
        border-radius: 100%;
    }
}

.\src\components\Graphs\CongruenceScale\index.tsx
-------------------------------------------------
import { useState } from "react";
import "./style.scss";
import { cn } from "@bem-react/classname";

import video from "../EmotionalScale/img/video.svg";
import volume_high from "../EmotionalScale/img/volume-high.svg";
import text from "../EmotionalScale/img/text.svg";
import { CongruenceItem } from "../../../models/graph/congruence";

import SwitchButton from "../SwitchButton";
import CongruenceGraph from "./CongruenceGraph";
import convertDataCongruenceFromBackIntoGraph from "../../../@adapters/Graphs/congruence";

const CN = cn("CongruenceScale");

type Props = {
    A_V: CongruenceItem[];
    A_T: CongruenceItem[];
    V_T: CongruenceItem[];
    endTime: number;
};

export default function CongruenceScale(props: Props) {
    const listItemA_T = props.A_T;
    const listItemA_V = props.A_V;
    const listItemV_T = props.V_T;

    const [activeIndex, setActiveIndex] = useState(1);
    const handleClick = (index: number) => setActiveIndex(index);

    return (
        <>
            <div className={CN("textBloc")}>
                <div className={CN("text")}>
                    <b className="textInfTitle">Конгруэнтность </b> -
                    характеризуется согласованностью эмоций, выражаемых
                    человеком с помощью мимики и речи, а также передаваемых в
                    тексте выступления.
                </div>
                <div className={CN("bocksAll")}>
                    <div className={CN("blockText")}>
                        <div
                            className={CN("block")}
                            style={{ background: "#7C8EB5" }}
                        />
                        <div className={CN("Text")}> нейтральная</div>
                    </div>
                    <div className={CN("blockText")}>
                        <div
                            className={CN("block")}
                            style={{ background: "#24F19B" }}
                        />
                        <div className={CN("Text")}> радость</div>
                    </div>
                    <div className={CN("blockText")}>
                        <div
                            className={CN("block")}
                            style={{ background: "#FE6972" }}
                        />
                        <div className={CN("Text")}> злость</div>
                    </div>
                </div>
            </div>
            <div className={CN("congruenceScaletabs")}>
                <SwitchButton
                    title={"Видео"}
                    icon={video}
                    onClick={() => handleClick(1)}
                    isActive={activeIndex === 1}
                />
                <SwitchButton
                    title={"Аудио"}
                    icon={volume_high}
                    onClick={() => handleClick(2)}
                    isActive={activeIndex === 2}
                />
                <SwitchButton
                    title={"Текст"}
                    icon={text}
                    onClick={() => handleClick(3)}
                    isActive={activeIndex === 3}
                />
            </div>
            <div className={CN("panels")}>
                <div
                    className={CN("panels-panel", {
                        visible: activeIndex === 1,
                    })}
                >
                    <CongruenceGraph
                        elements={convertDataCongruenceFromBackIntoGraph(
                            listItemA_T,
                        )}
                        endTime={props.endTime}
                    />
                </div>
                <div
                    className={CN("panels-panel", {
                        visible: activeIndex === 2,
                    })}
                >
                    <CongruenceGraph
                        elements={convertDataCongruenceFromBackIntoGraph(
                            listItemV_T,
                        )}
                        endTime={props.endTime}
                    />
                </div>
                <div
                    className={CN("panels-panel", {
                        visible: activeIndex === 3,
                    })}
                >
                    <CongruenceGraph
                        elements={convertDataCongruenceFromBackIntoGraph(
                            listItemA_V,
                        )}
                        endTime={props.endTime}
                    />
                </div>
            </div>
        </>
    );
}


.\src\components\Graphs\CongruenceScale\style.scss
--------------------------------------------------
.CongruenceScale {
    &-textBloc {
        display: flex;
        flex-direction: row;
        gap: 16px;
        width: 100%;
        padding: 16px;
        background: #F7FAFF;
        border-radius: 12px;
    }

    &-text {
        padding-top: 10px;
        color: #17282F;
        font-weight: 400;
        font-size: 16px;
        font-style: normal;
        line-height: 20px;
    }

    &-textInfTitle {
        font-weight: 500;
    }



    &-blockText {
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        align-items: center;
        align-content: center;
    }

    &-block {
        width: 20px;
        height: 20px;
        margin: 5px;
        border-radius: 4px;
    }

    &-Text {
        color: #37476A;
        font-family: Onest;
        font-size: 14px;
        font-style: normal;
        font-weight: 400;
        line-height: normal;
    }

    &-panels {
        &-panel {
            display: none;
            

            &_visible {
                display: block;
            }
        }
    }

    &-congruenceScaletabs {
        display: flex;
        width: 40%;
        padding: 15px 0;
    }
}



.congruenceScale {
    &-blockText {
        display: flex;
        flex-direction: row;
        gap: 10px;
        align-items: center;
    }

}

.\src\components\Graphs\CongruenceScale\CongruenceGraph\index.tsx
-----------------------------------------------------------------

import { CongruenceItem } from "../../../../models/graph/congruence";
import ColumnChart from "../../СolumnСhart";
import "./style.scss";
import { cn } from "@bem-react/classname";
import convertSecondsIntoTime from "../../../../@adapters/Time/convertSeconds";
import ColumnChart2 from "../../LineGraphVideo";

const CN = cn("CongruenceGraph");

type Props = {
    elements: CongruenceItem[];
    endTime: number;
};



export default function CongruenceGraph(props: Props) {
    const startTime = props.elements.at(0)!.time_start;
    // const endTime = props.elements.at(-1)!.time_end;

    return (
        <div className={CN()}>
            <span className={CN("text")}>
                {convertSecondsIntoTime(startTime)}
            </span>
            {/* <ColumnChart elements={props.elements} /> */}
            <ColumnChart2 elements={props.elements} endTime={props.endTime} />
            <span className={CN("text")}>
                {convertSecondsIntoTime(props.endTime)}
                {/* {convertSecondsIntoTime(endTime)} */}
            </span>
        </div>
    );
}


.\src\components\Graphs\CongruenceScale\CongruenceGraph\style.scss
------------------------------------------------------------------
.CongruenceGraph {
    display: flex;
    flex-flow: row nowrap;
    justify-content: center;
    align-items: flex-end;
    gap: 8px;
    position: relative;

    width: 100%;
    height: 150px;
    border-radius: 20px;
    padding: 16px;
    overflow-x: auto;
    overflow-y: hidden;
    background-color: #f7faff;
    user-select: none;

    &-text {
        display: inline-block;
        width: 46px;
        color: #7c8eb5;
        font-family: Onest;
        font-size: 14px;
        font-style: normal;
        font-weight: 400;
        line-height: 16px;
    }
}


.\src\components\Graphs\Connectivity\index.tsx
----------------------------------------------
import BrickedGraph from "../-Base/Bricked";
import { ConnectivityDataItem } from "../../../models/graph/connectivity";
import convertConnectivityData from "../../../@adapters/Graphs/connectivity";

type Props = {
    items: ConnectivityDataItem[];
};

export default function ConnectivityGraph({ items }: Props) {
    return (
        <BrickedGraph items={items.map((el) => convertConnectivityData(el))} />
    );
}


.\src\components\Graphs\eloquence\Eloquence.css
-----------------------------------------------

.allEloquence{
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        box-sizing: border-box;

}

.allImg{
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: start;
}


.parasitic_words, .short_sentences, .short_words, .active_words {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 5%;
}

.textparasitic_words, .textshort_sentences, .textshort_words, .textactive_words   {
        position: absolute;
        z-index: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
}

.bubbles{
        position: absolute;
        z-index: 1;
        display: flex;
        flex-direction: row;
        align-items: center;
        margin: auto;
        padding: 20px 0 0 40px;
}

.imgbigCloud{
        display: flex;
        justify-content: end;
}

.txt{
        display: flex;
        align-items: center;
        color: #FFF;
        font-weight: 700;
        font-size: 24px;
        font-family: 'Onest';
        font-style: normal;
        line-height: 31px;
}

.txt2{
        display: flex;
        align-items: center;
        color: #FFF;
        font-weight: 500;
        font-size: 14px;
        font-family: 'Onest';
        font-style: normal;
        line-height: 18px;
}


.\src\components\Graphs\eloquence\EloquenceText.tsx
---------------------------------------------------
import React from "react";
import "./styleText.css";
import { EloquenceDataItem } from "../../../models/graph/eloquence";

function paintWords(data: EloquenceDataItem) {
    let a = [];
    let i = 0;
    for (let key in data.parasitic_words_list) {
        if (data.parasitic_words_list == null) {
            return (
                <div className="blocWords"> {"слов-паразитов не найдено"} </div>
            );
        }
        a[i] = (
            <div className="blocWords" key={key}>
                {" "}
                {key}{" "}
                <div className="strings">{data.parasitic_words_list[key]}</div>
            </div>
        );
        i++;
    }
    return a;
}

type Props = {
    data: EloquenceDataItem;
};

function EloquenceText(props: Props) {
    let infEloquence: EloquenceDataItem = props.data;
    let countWords = 0;
    for (let key in infEloquence.parasitic_words_list) {
        countWords += infEloquence.parasitic_words_list[key];
    }

    return (
        <>
            <div className="EloquenceAllText">
                <div className="Eloquencetext1">
                    <b className="textInfTitle"> Красноречивость </b> -
                    достигается использованием:
                </div>
                <div className="ul">
                    <div className="li">
                        <b className="textInfTitle1">
                            простых коротких предложений{" "}
                        </b>{" "}
                        (не более 13 слов);
                    </div>
                    <div className="li">
                        <b className="textInfTitle1">
                            коротких слов, знакомых слушателю{" "}
                        </b>{" "}
                        (например, “начать” вместо “инициировать”, “двигаться”
                        вместо “перемещаться” и т.п);
                    </div>
                    <div className="li">
                        <b className="textInfTitle1">
                            активных слов, требующих действий{" "}
                        </b>{" "}
                        (например, “написать”, “рассмотреть”, “разрешить” и
                        т.п.).
                    </div>
                </div>
                <div className="Eloquencetext3">
                    Снижает красноречивость использование бессмысленных
                    слов-паразитов.
                </div>
            </div>

            <div className="EloquenceTextBloc">
                <div className="EloquenceTextTitle">
                    Слова-паразиты{" "}
                    <div className="countWords"> {countWords}</div>
                </div>
                <div className="EloquenceTexts">
                    <b className="textInfTitle"> Слова-паразиты</b> -
                    лингвистическое явление, которое выражается в употреблении
                    лишних и бессмысленных слов в речи.
                </div>
                <div className="EloquenceTextWords">
                    {paintWords(infEloquence)}
                </div>
            </div>
        </>
    );
}

export default EloquenceText;


.\src\components\Graphs\eloquence\index.tsx
-------------------------------------------
import React from "react";
import rupor from "./img/mouthpiese.svg";
import { ReactSVG } from "react-svg";
import "./Eloquence.css";
import bigCloud from "./img/bigCloud.svg";
import Testt from "./img/bubble";
import Bubble2 from "./img/bubble2";
import Bubble3 from "./img/bubble3";
import Bubble4 from "./img/bubble4";

type Props = {
    data: {
        values: {
            parasitic_words: number;
            short_sentences: number;
            short_words: number;
            action_words: number;
            parasitic_words_list?: {};
        };
    };
};
function Eloquence(props: Props) {
    let infEloquence = props.data;
    return (
        <>
            <div className="allEloquence">
                <div className="allImg">
                    <div className="rImg">
                        <ReactSVG src={rupor} />
                    </div>
                    <div className="cloud">
                        <div
                            className="bubbles"
                            style={{ background: bigCloud }}
                        >
                            <div className="parasitic_words">
                                <div className="textparasitic_words">
                                    <p className="txt">
                                        {infEloquence.values.parasitic_words}
                                    </p>
                                    <p className="txt2">слова-паразиты</p>
                                </div>
                                <Testt component={"#F35B60"} />
                            </div>
                            <div className="short_sentences">
                                <div className="textshort_sentences">
                                    <p className="txt">
                                        {infEloquence.values.short_sentences}
                                    </p>
                                    <p className="txt2">короткие </p>
                                    <p className="txt2"> предложения</p>
                                </div>
                                <Bubble2 component={"#13D784"} />
                            </div>
                            <div className="short_words">
                                <div className="textshort_words">
                                    <p className="txt">
                                        {infEloquence.values.short_words}
                                    </p>
                                    <p className="txt2">короткие слова</p>
                                </div>
                                <Bubble3 component={"#13D784"} />
                            </div>
                            <div className="active_words">
                                <div className="textactive_words">
                                    <p className="txt">
                                        {infEloquence.values.action_words}
                                    </p>
                                    <p className="txt2">активные </p>
                                    <p className="txt2"> слова</p>
                                </div>
                                <Bubble4 component={"#13D784"} />
                            </div>
                        </div>
                        <div className="imgbigCloud">
                            <ReactSVG className="bigCloud" src={bigCloud} />
                        </div>
                    </div>
                </div>
            </div>
        </>
    );
}

export default Eloquence;


.\src\components\Graphs\eloquence\styleText.css
-----------------------------------------------
.EloquenceAllText{
    display: flex;
    flex-direction: column;
    gap: 16px;
    align-items: flex-start;
    width: 100%;
    padding: 16px;
    background: #F7FAFF;
    border-radius: 12px;
}

.textInfTitle{
    font-weight: 500;
}

.Eloquencetext2, .Eloquencetext1, .Eloquencetext3{
    display: flex;
    align-items: center;
    width: 100%;
    color: #17282F;
    font-weight: 400;
    font-size: 16px;
    font-family: 'Onest';
    font-style: normal;
    line-height: 20px;
}

.li{
    display: flex;
    align-items: center;
    width: 100%;
    color: rgb(0 0 0 / 46%);
    font-weight: 400;
    font-size: 16px;
    font-family: 'Onest';
    font-style: normal;
    line-height: 20px;
}

.textInfTitle1{
    margin-right: 5px ;
    color: #17282F;
}

.EloquenceTextBloc{
    display: flex;
    flex-direction: column;
    gap: 16px;
    align-items: flex-start;
    width: 100%;
    margin-top: 10px;
    padding: 16px;
    background: #F7FAFF;
    border-radius: 12px;
}

.EloquenceTextTitle{
    display: flex;
    align-items: center;
    color: #350A8E;
    font-weight: 700;
    font-size: 18px;
    font-family: 'Montserrat Alternates';
    font-style: normal;
    line-height: 20px;
}

.EloquenceTexts{
    display: inline-block;
    width: 100%;
    overflow: auto;
    color: #17282f;
    font-weight: 400;
    font-size: 16px;
    font-family: "Onest";
    line-height: 20px;
}

.blocWords{
    display: flex;
    gap: 8px;
    align-items: center;
    margin-right: 16px;
    padding: 4px 12px;
    color: #37476A;
    font-weight: 500;
    font-size: 20px;
    font-family: "Onest";
    font-style: normal;
    line-height: normal;
    background: #FFF;
    border-radius: 8px;
}

.EloquenceTextWords{
    display: flex;
    flex-flow: row wrap;
    justify-content: start;
}

.countWords{
    margin-left: 6px;
    color: rgb(53 10 142 / 50%);
    font-weight: 600;
    font-size: 16px;
    font-family: "Montserrat Alternates";
    font-style: normal;
    line-height: normal;
}

.strings{
    color: rgb(3 28 61 / 70%);
    font-weight: 400;
    font-size: 20px;
    font-family: "Onest";
    font-style: normal;
    line-height: normal;
}


.\src\components\Graphs\eloquence\img\bubble.tsx
------------------------------------------------
import React from 'react';
interface IProps {
    component: string
}

export default function Bubble(props:IProps) {
   let colors = props.component;
    return (
        < >
            <svg width="171" height="182" viewBox="0 0 171 182" fill="none" xmlns="http://www.w3.org/2000/svg">
                <circle cx="37.5054" cy="120.709" r="32.9875" transform="rotate(-85.4295 37.5054 120.709)" fill={colors}/>
                <circle cx="130.486" cy="51.9845" r="23.6985" transform="rotate(-85.4295 130.486 51.9845)" fill={colors}/>
                <circle cx="31.6889" cy="170.813" r="10.8355" transform="rotate(-85.4295 31.6889 170.813)" fill={colors}/>
                <circle cx="137.613" cy="128.687" r="32.9875" fill={colors} fillOpacity="0.6"/>
                <circle cx="56.05" cy="44.225" r="20.3" fill={colors} fillOpacity="0.6"/>
                <rect x="14" y="29" width="145" height="145" rx="72.5" fill={colors}/>
                <circle cx="33.2121" cy="66.3376" r="32.9875" fill={colors} fillOpacity="0.6"/>
            </svg>
        </>
    );
}


.\src\components\Graphs\eloquence\img\bubble2.tsx
-------------------------------------------------
import React from 'react';
interface IProps {
    component: string
}

function Bubble2(props:IProps) {
    let colors = props.component;

    return (
        <>
            <svg width="168" height="184" viewBox="0 0 168 184" fill="none" xmlns="http://www.w3.org/2000/svg">
                <ellipse cx="33.7851" cy="62.9072" rx="32.9875" ry="32.9875" transform="rotate(-30.9751 33.7851 62.9072)" fill={colors}/>
                <ellipse cx="48.2841" cy="33.9075" rx="32.9875" ry="32.9875" transform="rotate(-30.9751 48.2841 33.9075)" fill={colors} fillOpacity="0.6"/>
                <ellipse cx="143.757" cy="98.6084" rx="23.6985" ry="23.6985" transform="rotate(-30.9751 143.757 98.6084)" fill={colors}/>
                <rect x="11" y="10" width="145" height="145" rx="72.5" fill={colors}/>
                <ellipse cx="144.69" cy="144.562" rx="10.8355" ry="10.8355" transform="rotate(-85.4295 144.69 144.562)" fill={colors}/>
                <ellipse cx="142.219" cy="75.7655" rx="19.211" ry="19.211" transform="rotate(-30.9751 142.219 75.7655)" fill={colors} fillOpacity="0.6"/>
            </svg>


        </>
    );
}

export default Bubble2;

.\src\components\Graphs\eloquence\img\bubble3.tsx
-------------------------------------------------
import React from 'react';
interface IProps {
    component: string
}

function Bubble3(props: IProps) {
    let colors = props.component;
    return (
        <>
            <svg width="154" height="185" viewBox="0 0 154 185" fill="none" xmlns="http://www.w3.org/2000/svg">
                <circle cx="116.965" cy="46.3401" r="32.9875" transform="rotate(-119.206 116.965 46.3401)" fill={colors} fillOpacity="0.6"/>
                <circle cx="20.4399" cy="109.507" r="20.3" transform="rotate(-119.206 20.4399 109.507)" fill={colors}/>
                <circle cx="58.8597" cy="151.276" r="32.9875" transform="rotate(-119.206 58.8597 151.276)" fill={colors} fillOpacity="0.6"/>
                <rect x="9" y="29" width="145" height="145" rx="72.5" fill={colors}/>
                <circle cx="142.689" cy="37.4125" r="10.8355" transform="rotate(-85.4295 142.689 37.4125)" fill={colors}/>
                <circle cx="20.4399" cy="142.857" r="20.3" transform="rotate(-119.206 20.4399 142.857)" fill={colors}/>
            </svg>


        </>
    );
}

export default Bubble3;

.\src\components\Graphs\eloquence\img\bubble4.tsx
-------------------------------------------------
import React from 'react';
interface IProps {
    component: string
}

function Bubble4(props:IProps) {
    let colors = props.component;
    return (
        <>
            <svg width="183" height="184" viewBox="0 0 183 184" fill="none" xmlns="http://www.w3.org/2000/svg">
                <circle cx="33.4014" cy="101.695" r="32.9875" transform="rotate(86.9403 33.4014 101.695)" fill={colors} fillOpacity="0.6"/>
                <circle cx="154.408" cy="86.0765" r="20.3" transform="rotate(86.9403 154.408 86.0765)" fill={colors}/>
                <rect x="19" y="10" width="145" height="145" rx="72.5" fill={colors}/>
                <circle cx="162.58" cy="57.589" r="20.3" transform="rotate(86.9403 162.58 57.589)" fill={colors}/>
                <circle cx="131.802" cy="33.1012" r="32.9875" transform="rotate(86.9403 131.802 33.1012)" fill={colors} fillOpacity="0.6"/>
                <circle cx="81.6391" cy="167.037" r="10.8355" transform="rotate(-85.4295 81.6391 167.037)" fill={colors}/>
            </svg>
        </>
    );
}

export default Bubble4;

.\src\components\Graphs\EmotionalArousal\index.tsx
--------------------------------------------------
import React from "react";
import "./style.css";
import { ReactSVG } from "react-svg";
import flaw from "./img/недостаток.svg";
import medium from "./img/среднее.svg";
import surplus from "./img/излишне.svg";

const textForFlawTitle: string = "Низкий уровень эмоционального возбуждения";
const textForFlaw: string = "Ваше выступление бесцветно и не интересно";
const textForMediumTitle: string =
    "Оптимальный уровень эмоционального возбуждения";
const textForMedium: string =
    "Позволит наиболее успешно реализовать замысел выступления";
const textForSurplusTitle: string = "Излишнее эмоциональное возбуждение";
const textForSurplus: string =
    "Снижается способность контролировать результат выступления.";
function check(data: number) {
    if (data <= 0.4) {
        return (
            <div className="allEmotionalArousal">
                {paint(
                    flaw,
                    "imkEmotionalArousal",
                    textForFlaw,
                    textForFlawTitle
                )}
                {paint(medium, "imkEmotionalArousal1")}
                {paint(surplus, "imkEmotionalArousal1")}
            </div>
        );
    }
    if (data <= 0.8) {
        return (
            <div className="allEmotionalArousal">
                {paint(flaw, "imkEmotionalArousal1")}
                {paint(
                    medium,
                    "imkEmotionalArousal",
                    textForMedium,
                    textForMediumTitle
                )}
                {paint(surplus, "imkEmotionalArousal1")}
            </div>
        );
    }
    if (data > 0.8) {
        return (
            <div className="allEmotionalArousal">
                {paint(flaw, "imkEmotionalArousal1")}
                {paint(medium, "imkEmotionalArousal1")}
                {paint(
                    surplus,
                    "imkEmotionalArousal",
                    textForSurplus,
                    textForSurplusTitle
                )}
            </div>
        );
    }
}

function paint(img: string, classN: string, text?: string, textTitle?: string) {
    return (
        <div className="blockEmotionalArousal">
            <ReactSVG src={img} className={classN} />
            <div className="textEmotionalArousal"> {textTitle} </div>
            <div className="tEmotionalArousal">{text}</div>
        </div>
    );
}

type Props = {
    emotional_arousal?: number;
};

export default function EmotionalArousal(props: Props) {
    return <>{check(props.emotional_arousal!)}</>;
}


.\src\components\Graphs\EmotionalArousal\style.css
--------------------------------------------------
.blockEmotionalArousal{
    display: flex;
    flex-direction: column;
    gap: 16px;
    align-items: center;
    justify-content: center;
    width: 33.3%;
    margin: 5px;
    padding: 16px;
    background: #F7FAFF;
    border-radius: 32px;
}

.allEmotionalArousal{
    display: flex;
    justify-content: space-between ;
    width: 100%;
    background: #fff;
}

.textEmotionalArousal{
    display: flex;
    align-items: center;
    color: #37476A;
    font-weight: 600;
    font-size: 16px;
    font-family: 'Montserrat Alternates';
    font-style: normal;
    line-height: 20px;
    text-align: center;}

.tEmotionalArousal{
    display: flex;
    align-items: center;
    color: #7C8EB5;
    font-weight: 400;
    font-size: 16px;
    font-family: 'Onest';
    font-style: normal;
    line-height: 20px;
    text-align: center;
}

.imkEmotionalArousal{
    mask-image: linear-gradient(rgb( 0 0 0 / 50%) 0%, black 0);
}

.imkEmotionalArousal1{
    mask-image: linear-gradient(rgb( 0 0 0 / 50%) 100%, black 0);
}


.\src\components\Graphs\Emotionality\Emotionality.tsx
-----------------------------------------------------
import React from "react";
import "./style.css";
import { ISimel } from "../../../models/graph/inteface/ISimel";
import Smiley from "../SmileBlock/index";
import okImg from "./img/ok.svg";
import happyImg from "./img/happy.svg";
import angryImg from "./img/angry.svg";

type Props = {
    total: {
        neutral: number;
        happiness: number;
        anger: number;
    };
};

function Emotionality(props: Props) {
    let inf: ISimel = {
        items: [
            {
                id: 1,
                title: "Злость",
                procent: props.total.anger,
                colorProcent: "#FF4E78",
                icon: angryImg,
            },
            {
                id: 2,
                title: "Без эмоций",
                procent: props.total.neutral,
                colorProcent: "#7C8EB5",
                icon: okImg,
            },
            {
                id: 3,
                title: "Радость",
                procent: props.total.happiness,
                colorProcent: "#10CE7E",
                icon: happyImg,
            },
        ],
    };

    return (
        <>
            <div className="allEmotionality">
                <div className="imgAllEmotionality">
                    <Smiley component={inf} />
                </div>
            </div>
        </>
    );
}

export default Emotionality;


.\src\components\Graphs\Emotionality\index.tsx
----------------------------------------------
import { createXDescriptionFromData } from "../-Base/helpers";

import GraphColor from "../../../models/graph/_colors";
import LineGraph from "../-Base/Line";
import {
    EmotionalityChannel,
    EmotionalityDataItem,
    EmotionalityItem,
} from "../../../models/graph/emotionality";
import convertEmotionalityData from "../../../@adapters/Graphs/emotionality";

type Props = {
    data: EmotionalityDataItem[];
    channel: EmotionalityChannel;
    emotions: EmotionalityItem[];
};

export default function EmotionalityGraph({ data, channel, emotions }: Props) {
    const channelsData = convertEmotionalityData(data, channel, emotions);

    return (
        <LineGraph
            items={channelsData}
            descriptionX={createXDescriptionFromData(data)}
            range={{ min: 0, max: 1 }}
            descriptionY={[0, 0.2, 0.4, 0.6, 0.8, 1]}
            colors={{
                [EmotionalityItem.ANGER]: GraphColor.RED,
                [EmotionalityItem.HAPPINESS]: GraphColor.GREEN,
                [EmotionalityItem.NEUTRAL]: GraphColor.DARKGRAY,
            }}
        />
    );
}


.\src\components\Graphs\Emotionality\style.css
----------------------------------------------
.allEmotionality{
    display: flex;
    flex-direction: column;
    gap: 16px;
    align-items: flex-start;
    box-sizing: border-box;
    width:100%;
    padding: 16px 8px;
    background: #FFF;
    isolation: isolate;
}

.imgAllEmotionality{
    display: flex;
    flex-direction: row;
    justify-content:space-between;
    width:100%;
}

.textEmotionality{
    display: flex;
    align-items: center;
    font-weight: 400;
    font-size: 20px;
    font-style: normal;
    line-height: 25px;
}



.\src\components\Graphs\EmotionalScale\index.tsx
------------------------------------------------
import { useState } from "react";
import Scale from "../Scale";
import "./style.scss";
import text from "./img/text.svg";
import video from "./img/video.svg";
import volume_high from "./img/volume-high.svg";
import { ReactSVG } from "react-svg";
import GraphColor from "../../../models/graph/_colors";
import { cn } from "@bem-react/classname";
import {
    ChannelItem,
    EmotionalityDataItem,
} from "../../../models/graph/emotionality";
import { IDescriptionScale } from "../../../models/graph/inteface/IDescriptionScale";
import convertSecondsIntoTime from "../../../@adapters/Time/convertSeconds";

type Props = {
    values: EmotionalityDataItem[];
    endTime?: number;
};
const CN = cn("EmotionalScale");

function covertvaluesData(data: ChannelItem[]) {
    let result: IDescriptionScale[] = [];

    data.forEach((el: any) => {
        let tempMax = 0;
        let emotion = "";

        Object.entries(el).forEach((item: any) => {
            if (item[1] > tempMax) {
                tempMax = item[1];
                emotion = item[0];
            }
        });

        result.push({
            title: "",
            value: tempMax * 100,
            color:
                emotion === "anger"
                    ? GraphColor.RED
                    : emotion === "happiness"
                    ? GraphColor.GREEN
                    : GraphColor.GRAY,
        });
    });

    return result;
}

export default function EmotionalScale(props: Props) {
    const [activeIndex, setActiveIndex] = useState(1);
    const handleClick = (index: any) => setActiveIndex(index);
    const checkActive = (index: any, className: any) =>
        activeIndex === index ? className : "";

    let infVideo: IDescriptionScale[] = covertvaluesData(
        props.values.map((n) => n.video),
    );
    let infText: IDescriptionScale[] = covertvaluesData(
        props.values.map((n) => n.text),
    );
    let infAudio: IDescriptionScale[] = covertvaluesData(
        props.values.map((n) => n.audio),
    );

    // ___________________ время ________________

    const timeEnd = props.endTime!;

    return (
        <>
            <div className={CN("textBloc")}>
                <div className={CN("text1")}>
                    <b className="textInfTitle1"> Эмоциональность</b> -
                    характеризуется долей и распределением базовых эмоций в
                    выступлении.
                </div>
                <div className={CN("blocksAll")}>
                    <div className={CN("blockText")}>
                        <div
                            className={CN("block")}
                            style={{ background: "#7C8EB5" }}
                        />
                        <div className={CN("Text")}> нейтральная</div>
                    </div>
                    <div className={CN("blockText")}>
                        <div
                            className={CN("block")}
                            style={{ background: "#24F19B" }}
                        />
                        <div className={CN("Text")}> радость</div>
                    </div>
                    <div className={CN("blockText")}>
                        <div
                            className={CN("block")}
                            style={{ background: "#FE6972" }}
                        />
                        <div className={CN("Text")}> злость</div>
                    </div>
                </div>
            </div>
            <div className="EmotionalScaletabs">
                <button
                    className={`EmotionalScaletab ${checkActive(
                        1,
                        "EmotionalScaleactive",
                    )}`}
                    onClick={() => handleClick(1)}
                >
                    <ReactSVG src={video} />
                    Видео
                </button>
                <button
                    className={`EmotionalScaletab ${checkActive(
                        2,
                        "EmotionalScaleactive",
                    )}`}
                    onClick={() => handleClick(2)}
                >
                    <ReactSVG src={volume_high} />
                    Аудио
                </button>
                <button
                    className={`EmotionalScaletab ${checkActive(
                        3,
                        "EmotionalScaleactive",
                    )}`}
                    onClick={() => handleClick(3)}
                >
                    <ReactSVG src={text} />
                    Текст
                </button>
            </div>
            <div className={CN("panels")}>
                {props.endTime ? (
                    <span className={CN("text")}>
                        {convertSecondsIntoTime(0)}
                    </span>
                ) : (
                    <></>
                )}
                <div
                    className={`panel ${checkActive(
                        1,
                        "EmotionalScaleactive",
                    )}`}
                >
                    <Scale
                        fractions={infVideo}
                        hasPointer={true}
                        endTime={props.endTime}
                    />
                </div>
                <div
                    className={`panel ${checkActive(
                        2,
                        "EmotionalScaleactive",
                    )}`}
                >
                    <Scale
                        fractions={infAudio}
                        hasPointer={true}
                        endTime={props.endTime}
                    />
                </div>
                <div
                    className={`panel ${checkActive(
                        3,
                        "EmotionalScaleactive",
                    )}`}
                >
                    <Scale
                        fractions={infText}
                        hasPointer={true}
                        endTime={props.endTime}
                    />
                </div>
                {props.endTime ? (
                    <span className={CN("text")}>
                        {convertSecondsIntoTime(timeEnd)}
                    </span>
                ) : (
                    <></>
                )}
            </div>
        </>
    );
}


.\src\components\Graphs\EmotionalScale\style.scss
-------------------------------------------------
.EmotionalScaletabs {
    display: flex;
    width: 40%;
    display: flex;
    width: 40%;
}

.EmotionalScaletab {
    display: flex;
    flex-direction: row;
    gap: 6px;
    align-items: center;
    justify-content: center;
    width: 20%;
    margin: 8px;
    padding: 8px 12px;
    color: #7c8eb5;
    font-weight: 600;
    font-size: 12px;
    font-style: normal;
    background: rgb(36 119 244 / 0%);
    border: none;
    display: flex;
    flex-direction: row;
    gap: 6px;
    align-items: center;
    justify-content: center;
    width: 20%;
    margin: 8px;
    padding: 8px 12px;
    color: #7c8eb5;
    font-weight: 600;
    font-size: 12px;
    font-style: normal;
    background: rgb(36 119 244 / 0%);
    border: none;

    svg {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
    }
}

.EmotionalScaletab.EmotionalScaleactive {
    display: flex;
    color: #2477f4;
    background: rgb(36 119 244 / 13%);
    border-radius: 8px;
}

.panel {
    display: none;
    width: 100%;
    // padding: 10px;
}

.panel.EmotionalScaleactive {
    display: block;
    flex-direction: row;
}

.EmotionalScale {
    &-textBloc {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        width: 100%;
        padding: 16px 20px;
        background: #f7faff;
        border-radius: 12px;
    }

    &-text1 {
        padding-top: 10px;
        color: #17282f;
        font-weight: 400;
        font-size: 16px;
        font-style: normal;
        line-height: 20px;
    }

    &-block {
        width: 20px;
        height: 20px;
        margin: 5px;
        border-radius: 4px;
    }

    &-blockText {
        display: flex;
        flex-direction: row;
        gap: 10px;
        align-items: center;
    }

    &-Text {
        color: #37476a;
        font-weight: 400;
        font-size: 14px;
        font-style: normal;
        line-height: 18px;
    }

    &-panels {
        position: relative;
        display: flex;
        flex-flow: row nowrap;
        gap: 8px;
        align-items: center;
        justify-content: center;
        width: 100%;
        padding: 25px 16px 16px;
        overflow-x: auto;
        overflow-y: hidden;
        background-color: #f7faff;
        // height: 150px;
        border-radius: 20px;
        user-select: none;
    }

    &-text {
        display: inline-block;
        width: 46px;
        color: #7c8eb5;
        font-weight: 400;
        font-size: 14px;
        font-family: "Onest";
        font-style: normal;
        line-height: 16px;
    }
}

b.textInfTitle1 {
    font-weight: 500;
}


.\src\components\Graphs\Energy\index.tsx
----------------------------------------
import GraphColor from "../../../models/graph/_colors";

import LineGraph from "../-Base/Line";
import { createXDescriptionFromData } from "../-Base/helpers";
import { EnergyDataItem, EnergyType } from "../../../models/graph/energy";
import convertEnergyData from "../../../@adapters/Graphs/energy";

type Props = {
    data: EnergyDataItem[];
    param: EnergyType | null;
    average: number;
};

export default function EnergyGraph({ data, param = null, average }: Props) {
    const data2 = convertEnergyData(data, param);
    return (
        <LineGraph
            average={100-(average*100)}
            items={data2}
            descriptionX={createXDescriptionFromData(data)}
            range={{ min: 0, max: 1 }}
            descriptionY={[0, 0.2, 0.4, 0.6, 0.8, 1]}
            colors={{
                [EnergyType.ENERGY]: GraphColor.BLUE,
            }}
        />
    );
}


.\src\components\Graphs\EnergyLine\index.tsx
--------------------------------------------
import { cn } from "@bem-react/classname";
import GraphColor from "../../../models/graph/_colors";
import "./style.scss";

type Props = {
    maxValue: number;
    value: number;
    color?: string;
};


{
    /* <EnergyLine maxValue={50} value={value} /> */
}
{
    /* <EnergyLine maxValue={100} value={value} /> */
}

const cnEnergyLIne = cn("energy-line");
export default function EnergyLine({
    maxValue,
    value,
    color = GraphColor.BLUE,
}: Props) {
    return (
        <div className={cnEnergyLIne()}>
            <div
                className={cnEnergyLIne("fill")}
                style={{
                    width: `${
                        maxValue <= value
                            ? 100
                            : maxValue === 50
                            ? value * 2
                            : maxValue - 50 <= value
                            ? (value - 50) * 2
                            : 0
                    }%`,
                    background: color,
                    borderRadius:
                        maxValue - value > 0.3 ? "40px 0 0 40px" : "40px",
                }}
            ></div>
        </div>
    );
}


.\src\components\Graphs\EnergyLine\style.scss
---------------------------------------------
.energy-line {
    position: relative;
    width: 100%;
    height: 20px;
    background: #d4dff4;
    border-radius: 40px;

    &-fill {
        position: absolute;
        height: 100%;
        border-radius: 40px 0 0 40px;
    }
}


.\src\components\Graphs\EnergySmile\index.tsx
---------------------------------------------
import React from "react";
import slip from "./img/спящий.svg";
import crazy from "./img/безумный.svg";
import medium from "./img/средне.svg";
import { cn } from "@bem-react/classname";
import { ReactSVG } from "react-svg";
import EnergyLine from "../EnergyLine";
import "./style.scss";

const cnEnergySmile = cn("energy-smile");

type Props = {
    energy: number;
};
function paintSmile(img: string, className: string, text: string) {
    return (
        <>
            <div className={cnEnergySmile(className)}>
                <ReactSVG src={img} className={cnEnergySmile("center-smile")} />
                {text}
            </div>
        </>
    );
}
function paint(energy: number) {
    if (energy < 0.01) {
        energy = 0.0136;
    }
    if (energy < 0.5) {
        return (
            <div className={cnEnergySmile()}>
                {paintSmile(slip, "smile", "Спящий")}
                <EnergyLine value={energy * 100} maxValue={50} />
                {paintSmile(medium, "smile1", "Энергичный")}
                <EnergyLine value={0} maxValue={50} />
                {paintSmile(crazy, "smile1", "Безумный")}
            </div>
        );
    }
    if (energy === 0.5) {
        return (
            <div className={cnEnergySmile()}>
                {paintSmile(slip, "smile", "Спящий")}
                <EnergyLine value={50} maxValue={50} />
                {paintSmile(medium, "smile", "Энергичный")}
                <EnergyLine value={0} maxValue={50} />
                {paintSmile(crazy, "smile1", "Безумный")}
            </div>
        );
    }
    if (energy > 0.5) {
        return (
            <div className={cnEnergySmile()}>
                {paintSmile(slip, "smile", "Спящий")}
                <EnergyLine value={50} maxValue={50} />
                {paintSmile(medium, "smile", "Энергичный")}
                <EnergyLine value={energy * 50} maxValue={50} />
                {paintSmile(crazy, "smile1", "Безумный")}
            </div>
        );
    }
}

export default function EnergySmile(props: Props) {
    return <>{paint(props.energy)}</>;
}


.\src\components\Graphs\EnergySmile\style.scss
----------------------------------------------
.energy-smile{
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  padding: 10px;

  &-smile{
    display: flex;
    // align-items: center;
    flex-direction: column;
    width: 20%;
    color: #37476A;
    font-weight: 600;
    font-size: 20px;
    font-family: 'Montserrat Alternates';
    font-style: normal;
  }

  &-center-smile{
    text-align: center;
  }

  &-smile1{
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 20%;
    color: #37476A80;
    font-weight: 600;
    font-size: 20px;
    font-family: 'Montserrat Alternates';
    font-style: normal;
    mask-image: linear-gradient(rgb( 0 0 0 / 50%) 100%, black 0);


  }


}

.\src\components\Graphs\Expressiveness\index.tsx
------------------------------------------------
import GraphColor from "../../../models/graph/_colors";

import LineGraph from "../-Base/Line";
import { createXDescriptionFromData } from "../-Base/helpers";

import convertExpressivenessData from "../../../@adapters/Graphs/expressiveness";
import {
    ExpressivenessDataItem,
    ExpressivenessType,
} from "../../../models/graph/expressiveness";

type Props = {
    data: ExpressivenessDataItem[];
    param: ExpressivenessType | ExpressivenessType[] | null;
};

export default function ExpressivenessGraph({ data, param = null }: Props) {
    const data2 = convertExpressivenessData(data, param);
    return (
        <LineGraph
            items={data2}
            descriptionX={createXDescriptionFromData(data)}
            range={{ min: 0, max: 1 }}
            descriptionY={[0, 0.2, 0.4, 0.6, 0.8, 1]}
            withMedian={false}
            colors={{
                [ExpressivenessType.NEUTRAL]: GraphColor.DARKGRAY,
                [ExpressivenessType.HAPPINESS]: GraphColor.GREEN,
                [ExpressivenessType.ANGER]: GraphColor.RED,
            }}
        />
    );
}


.\src\components\Graphs\Informative\index.tsx
---------------------------------------------
import BrickedGraph from "../-Base/Bricked";
import { InformativeDataItem } from "../../../models/graph/informative";
import convertInformativeData from "../../../@adapters/Graphs/informative";
import InformativeText from "./InformativeText";

type Props = {
    items: InformativeDataItem[];
};

export default function InformativeGraph({ items }: Props) {
    return (
        <>
            <InformativeText />
            <BrickedGraph
                items={items.map((el) => convertInformativeData(el))}
            />
        </>
    );
}


.\src\components\Graphs\Informative\Informative.css
---------------------------------------------------
.inf{
    width: 100%;
    background: #FFF;
}

.\src\components\Graphs\Informative\InformativeGraph.tsx
--------------------------------------------------------
import React, {useState} from 'react';
import './Informative.css'
import Inf from './index'
import { GraphContext } from '../-Base/helpers';
type valuesItem = {
    seq_number: number,
    time_start: number,
    time_end: number,
    text: string,
    type: string
}
type Props={
    values: valuesItem[],
}
function Informative(props: Props) {

    const [currentTime, setCurrentTime] = useState(0);
    return (
        <>
            <div className="inf">
                <GraphContext.Provider value={{ currentTime, setCurrentTime }}>
                    <Inf items={props.values}/>
                </GraphContext.Provider>
            </div>
        </>
    );
}
export default Informative;

.\src\components\Graphs\Informative\InformativeText.tsx
-------------------------------------------------------
import React from "react";
import "./styleText.scss";
function InformativeText() {
    return (
        <>
            <div className="blocText">
                <div className="textInf">
                    <b className="textInfTitle">Информативность </b>
                    определяется предоставлением точной информации, полнота
                    которой снижается при появлении в речи не несущих смысла
                    слов и длительных пауз, а также неречевых звуков.
                </div>
                <div className="blocColor">
                    <div className="Square">
                        <div
                            className="colorSquare"
                            style={{ background: "#410DAE" }}
                        >
                            {" "}
                        </div>
                        <div className="textSquare">слова-паразиты</div>
                    </div>
                    <div className="Square">
                        <div
                            className="colorSquare"
                            style={{ background: "#FE6972" }}
                        >
                            {" "}
                        </div>
                        <div className="textSquare">неречевые звуки</div>
                    </div>
                    <div className="Square">
                        <div
                            className="colorSquare"
                            style={{ background: "#FFB800" }}
                        >
                            {" "}
                        </div>
                        <div className="textSquare">пустые паузы</div>
                    </div>
                    <div className="Square">
                        <div
                            className="colorSquare"
                            style={{ background: "#ADB9D4" }}
                        >
                            {" "}
                        </div>
                        <div className="textSquare">информативная часть</div>
                    </div>
                </div>
            </div>
        </>
    );
}

export default InformativeText;


.\src\components\Graphs\Informative\InformativScale.tsx
-------------------------------------------------------
import "./Informative.css";
import Scale from "../Scale";
import { cn } from "@bem-react/classname";
import GraphColor from "../../../models/graph/_colors";

const CN = cn("inf");

type Props = {
    informative: number;
    parasite: number;
    sounds: number;
    empty: number;
};

export default function InformativScale(props: Props) {
    return (
        <div className={CN("inf")}>
            <Scale
                fractions={[
                    {
                        title: "Слова-паразиты",
                        value: props.parasite < 0 ? 0 : props.parasite * 100,
                        color: GraphColor.PURPLE,
                    },
                    {
                        title: "Неречевые звуки",
                        value: props.sounds < 0 ? 0 : props.sounds * 100,
                        color: GraphColor.IRED,
                    },
                    {
                        title: "Пустые паузы",
                        value: props.empty < 0 ? 0 : props.empty * 100,
                        color: GraphColor.ORANGE,
                    },
                    {
                        title: "Информативная часть",
                        value:
                            props.informative < 0 ? 0 : props.informative * 100,
                        color: GraphColor.GRAY,
                    },
                ]}
            />
        </div>
    );
}


.\src\components\Graphs\Informative\style.scss
----------------------------------------------
.blocText{
    display: flex;
    flex-direction: column;
    gap: 16px;
    align-items: flex-start;
    width:1200px;
    padding: 16px;
    background: #F7FAFF;
    border-radius: 12px;

}

.textInf{
    display: flex;
    align-items: center;
    width: 90%;
    color: #17282F;
    font-weight: 500;
    font-size: 16px;
    font-family: 'Onest';
    font-style: normal;
    line-height: 20px;
}

.blocColor{
    display: flex;
    flex-direction: row;
    gap: 6px;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    padding: 0 8px;

}

.colorSquare1, .colorSquare2,.colorSquare3,.colorSquare4 {
    width: 20px;
    height: 20px;
    background: linear-gradient(74.12deg, #410DAE 0%, #7524FA 100%);
    border-radius: 4px;
}

.colorSquare2{
    background: linear-gradient(78.41deg, #FE6972 0%, #FF4E78 100%);
}

.colorSquare3{
    background: linear-gradient(32.08deg, #FFB800 0%, #FDA743 100%);
}

.colorSquare4{
    background: #ADB9D4;
}

.Square{
    display: flex;
    flex-direction: row;
    gap: 10px;
    align-items: center;
    width:25%;
    padding: 0;
}

.\src\components\Graphs\Informative\styleText.scss
--------------------------------------------------
.blocText{
  display: flex;
  flex-direction: column;
  gap: 16px;
  align-items: flex-start;
  width: 100%;
  margin-bottom: 10px;
  padding: 16px;
  background: #F7FAFF;
  border-radius: 12px;
}

.textInf {
  display: inline-block;
  width: 100%;
  overflow: auto;
  color: #17282f;
  font-weight: 400;
  font-size: 16px;
  font-family: "Onest";
  line-height: 20px;
}

.textInfTitle{
  font-weight: 500;
}

.blocColor{
  display: flex;
  flex-direction: row;
  gap: 6px;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  padding: 0 8px;
}

.Square {
  display: flex;
  flex-direction: row;
  gap: 10px;
  align-items: center;
}

.colorSquare{
  width: 20px;
  height: 20px;
  border-radius: 4px;
}

.textSquare{
display: flex;
align-items: center;
color: #37476A;
font-weight: 400;
font-size: 14px;
font-style: normal;
line-height: 18px;
}



.\src\components\Graphs\LineGraphVideo\helper.ts
------------------------------------------------
import GraphColor from "../../../models/graph/_colors";

const MIN_HEIGHT = 20;

export function getHeightByValue(value: number) {
    value *= 100;
    if (value < MIN_HEIGHT) return MIN_HEIGHT;
    else if (value < 60) return 50;
    else return value;
}

export enum EMOTION {
    ANGRY = "angry",
    HAPPINESS = "happiness",
    NEUTRAL = "neutral",
}

export function getColorByEmotion(emotion: EMOTION) {
    switch (emotion) {
        case EMOTION.ANGRY:
            return GraphColor.RED;
        case EMOTION.HAPPINESS:
            return GraphColor.GREEN;
        default:
            return GraphColor.GRAY;
    }
}


.\src\components\Graphs\LineGraphVideo\index.tsx
------------------------------------------------
import "./style.scss";
import { cn } from "@bem-react/classname";

import { CongruenceItem } from "../../../models/graph/congruence";
import {
    Fragment,
    // MouseEventHandler,
    useContext,
    useEffect,
    useState,
    useRef,
} from "react";
import { Tooltip } from "react-tooltip";
import convertSecondsIntoTime from "../../../@adapters/Time/convertSeconds";

import { ValueTime } from "../../Analytics/helpers";
import { VideoTimeContext } from "../../Context/helpers";
import GraphSecondPointer from "../-Base/-SecondPointer";
import { EMOTION, getColorByEmotion, getHeightByValue } from "./helper";
import { convertTime } from "../../Archive/helpers";

type Props = {
    elements: CongruenceItem[];
    endTime: number;
};

const CN = cn("ColumnChart");

export default function ColumnChart2(props: Props) {
    const last_time_end = props.elements.at(-1)!.time_end;
    const timeEnd = props.endTime;

    const { currentTime, setCurrentTime } = useContext(VideoTimeContext);
    const [isPointerMoving, setPointerMoving] = useState(false);
    // const [pointerX, setPointerX] = useState(0);
    const { updateTime } = useContext(ValueTime);

    const sliderRef = useRef<HTMLDivElement>(null);
    const [sliderValue, setSliderValue] = useState(0);

    useEffect(() => {
        const handleMouseMove = (event: MouseEvent) => {
            if (sliderRef.current) {
                const sliderWidth = sliderRef.current.offsetWidth;
                const offsetX =
                    event.pageX - sliderRef.current.offsetLeft - 176;
                // const newValue = Math.round((offsetX / sliderWidth) * 100);
                const newValue = (offsetX / sliderWidth) * 100;
                setSliderValue(newValue);
            }
        };

        const handleMouseUp = () => {
            document.removeEventListener("mousemove", handleMouseMove);
            document.removeEventListener("mouseup", handleMouseUp);
        };

        if (sliderRef.current) {
            const currentSliderRef = sliderRef.current;

            currentSliderRef.addEventListener("mousedown", () => {
                document.addEventListener("mousemove", handleMouseMove);
                document.addEventListener("mouseup", handleMouseUp);
            });

            return () => {
                currentSliderRef.removeEventListener("mousedown", () => {
                    document.removeEventListener("mousemove", handleMouseMove);
                    document.removeEventListener("mouseup", handleMouseUp);
                });
            };
        }
    }, []);

    // время
    // const onMouseMove: MouseEventHandler<HTMLDivElement> = (e) => {
    //     // if (isPointerMoving) {
    //     //     setPointerX((prev) => {
    //     //         const value = prev + e.movementX;
    //     //         return value > 0 ? value : 0;
    //     //     });
    //     // }
    // };

    const choiseBlock = (event: React.MouseEvent<HTMLDivElement>) => {
        const dataValue = +event.currentTarget.dataset.time! as number;

        if (dataValue || dataValue === 0) {
            setCurrentTime(dataValue);
        }
    };

    useEffect(() => {
        if (isPointerMoving) {
            const time = Math.round((timeEnd * sliderValue) / 100);
            setCurrentTime(time);
            updateTime(time);
        }
    }, [sliderValue]);

    useEffect(() => {
        if (!isPointerMoving) {
            setSliderValue((currentTime / timeEnd) * 100);
        }
    }, [currentTime]);

    // --------------- было в предыдущей версии --------------

    // const onMouseMove: MouseEventHandler<HTMLDivElement> = (e) => {
    //     if (isPointerMoving) {
    //         setPointerX((prev) => {
    //             const value = prev + e.movementX;
    //             return value > 0 ? value : 0;
    //         });
    //     }
    // };
    // useEffect(() => {
    //     if (!isPointerMoving) {
    //         setPointerX(currentTime * _1SEC_PX);
    //     }
    // }, [currentTime]);

    // useEffect(() => {
    //     if (isPointerMoving) {
    //         const time = Math.floor(pointerX / _1SEC_PX);
    //         setCurrentTime(time);
    //         updateTime(time);
    //     }
    // }, [pointerX]);

    return (
        <div
            className={CN()}
            ref={sliderRef}
            onMouseDown={() => setPointerMoving(true)}
            onMouseUp={() => setPointerMoving(false)}
            onMouseLeave={() => setPointerMoving(false)}
            // onMouseMove={onMouseMove}

            // --------------- было в предыдущей версии --------------
            // style={
            //     {
            //         cursor: isPointerMoving ? "col-resize" : "auto",
            //         height: "100%",
            //     }
            // }
            // onMouseDown={() => setPointerMoving(true)}
            // onMouseUp={() => setPointerMoving(false)}
            // onMouseLeave={() => setPointerMoving(false)}
            // onMouseMove={onMouseMove}
        >
            <GraphSecondPointer
                offsetX={-25}
                left={
                    sliderValue > 100 ? 100 : sliderValue <= 0 ? 0 : sliderValue
                }
                // --------------- было в предыдущей версии --------------
                // left={pointerX}
                text={convertTime(currentTime)}
                // text={new Date(currentTime * 1000)
                //     .toISOString()
                //     .substring(14, 19)}
            />
            {props.elements.map((el, i) => (
                <Fragment key={i}>
                    <div
                        className={CN("brick")}
                        data-tooltip-id={"col-brick-" + i}
                        onDoubleClick={choiseBlock}
                        data-time={el.time_start}
                        style={{
                            backgroundColor: getColorByEmotion(
                                el.type as EMOTION,
                            ),
                            height: getHeightByValue(el.value) + "%",
                            width:
                                ((el.time_end - el.time_start) * 100) /
                                    last_time_end +
                                // props.endTime +
                                "%",
                        }}
                    ></div>
                    {el.type !== EMOTION.NEUTRAL && (
                        <Tooltip
                            id={"col-brick-" + i}
                            place={"top-start"}
                            noArrow={true}
                            className={CN("tooltip")}
                        >
                            {"Рассогласование "}
                            {el.type === EMOTION.HAPPINESS ? (
                                <span className={CN("tooltip-happiness")}>
                                    радости
                                </span>
                            ) : (
                                <span className={CN("tooltip-anger")}>
                                    злости
                                </span>
                            )}
                            {" на "}
                            {convertSecondsIntoTime(el.time_start)}.
                        </Tooltip>
                    )}
                </Fragment>
            ))}
        </div>
    );
}


.\src\components\Graphs\LineGraphVideo\style.scss
-------------------------------------------------
.ColumnChart {
    position: relative;
    display: flex;
    flex-direction: row;
    gap: 2px;
    align-items: flex-end;
    justify-content: start;
    width: 100%;
    height: 100px;

    &-brick {
        border-radius: 6px;
    }

    &-tooltip {
        gap: 6px;
        padding: 8px 12px;
        color: #37476a !important;
        font-weight: 400;
        font-size: 12px !important;
        font-family: "Onest" !important;
        font-style: normal;
        line-height: normal;
        background: #fff !important;
        border: 1px solid #7c8eb5;
        border-radius: 12px !important;
        box-shadow: 2px 2px 12px 0 rgb(173 185 212 / 30%);

        &-happiness {
            color: #1eae5c;
            font-weight: 500;
        }

        &-anger {
            color: #ff4e78;
            font-weight: 500;
        }
    }
}


.\src\components\Graphs\NonMonotony\index.tsx
---------------------------------------------
import GraphColor from "../../../models/graph/_colors";

import LineGraph from "../-Base/Line";
import { createXDescriptionFromData } from "../-Base/helpers";
import {
    NonMonotonyDataItem,
    NonMonotonyType,
} from "../../../models/graph/monotony";
import {
    convertMonotonyData,
    dependenceMonotonyData,
} from "../../../@adapters/Graphs/monotony";

type Props = {
    data: NonMonotonyDataItem[];
    param: NonMonotonyType | null;
    average: number;
    value: number;
};

export default function NonMonotonyGraph({
    data,
    param = null,
    average,
    value,
}: Props) {
    const data2 = convertMonotonyData(data, param);

    const dependece = dependenceMonotonyData(param, average);
    return (
        <LineGraph
            average={dependece.average}
            withMedian={dependece.withMedian}
            items={data2}
            descriptionX={createXDescriptionFromData(data)}
            range={{ min: dependece.min, max: dependece.max }}
            descriptionY={dependece.descriptionY}
            colors={{
                [NonMonotonyType.RATE]: GraphColor.BLUE,
                [NonMonotonyType.VOLUME]: GraphColor.RED,
                [NonMonotonyType.TONE]: GraphColor.ORANGE,
            }}
        />
    );
}


.\src\components\Graphs\PieChartBlock\index.tsx
-----------------------------------------------
import React from "react";
import "./style.scss";
import { ReactSVG } from "react-svg";
import { IPieChart } from "../../../models/graph/inteface/IPieChart";
import art from "./img/artColor.svg";
import scientific from "./img/scientificColor.svg";
import officialBusiness from "./img/officialBusinessInColor.svg";
import journalistic from "./img/journalisticColor.svg";
import colloquial from "./img/colloquialColor.svg";
interface IComponentProps {
    component: IPieChart;
}
function paint(item: (string | number)[], img: string) {
    let precen = Math.round(Number(item[0]));

    let procent;
    if (precen > 9 && precen < 99) {
        procent = precen.toString();
    } else if (precen === 0) {
        procent = "000";
    } else if (precen <= 5) {
        procent = "0";
    } else if (precen >= 100) {
        procent = "10";
    } else {
        procent = "00";
    }
    return (
        <div className="PieChart">
            <div className="imgPieChartScintific">
                <ReactSVG className={"imkPie" + procent} src={img} />
            </div>
            <p className="textPieChart">{item[1]}</p>
            <p className="precentPieChart">{Math.round(Number(item[0]))}%</p>
        </div>
    );
}
export default function PieChartBlock(props: IComponentProps) {
    let artInf = [props.component.artistic.valueOf(), "художественный"];
    let colloquialInf = [props.component.colloquial.valueOf(), "разговорный"];
    let journalisticInf = [
        props.component.official.valueOf(),
        "официально-деловой",
    ];
    let scientificInf = [props.component.scientific.valueOf(), "научный"];
    let officialBusinessInf = [
        props.component.publicistic.valueOf(),
        "публицистический",
    ];
    return (
        <>
            <div className="textPieChartBlock">
                Использование определенного набора слов и выражений для
                достижения заданных коммуникативных целей выступления определяет
                его
                <b className="textInfTitle"> стилевое единство.</b>
            </div>

            <div className="allPieChart">
                {paint(scientificInf, scientific)}
                {paint(officialBusinessInf, officialBusiness)}
                {paint(journalisticInf, journalistic)}
                {paint(colloquialInf, colloquial)}
                {paint(artInf, art)}
            </div>
        </>
    );
}


.\src\components\Graphs\PieChartBlock\style.scss
------------------------------------------------
.textPieChart{
    color: #37476A;
    font-weight: 600;
    font-size: 14px;
    font-style: normal;
    line-height: 17px;
}

.textPieChartBlock{
    gap: 16px;
    width: 100%;
    margin-bottom: 30px;
    padding: 16px;
    overflow: auto;
    color: #17282F;
    font-weight: 400;
    font-size: 16px;
    font-style: normal;
    line-height: 20px;
    background: #F7FAFF;
    border-radius: 12px;

}

.textInfTitle{
    font-weight: 500;
}

.precentPieChart{
    color: #2477F4;
    font-weight: 700;
    font-size: 20px;
    font-style: normal;
    line-height: 24px;
}

.allPieChart{
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    width: 100%;

}

.PieChart{
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    width: 25%;
}

.imkPie0{
    mask-image: conic-gradient(#fff 0%, #fff1 1%, #fff1 100%);
}

.imkPie000{
    mask-image: conic-gradient(#fff 0%, #fff1 0%, #fff1 100%);
}

.imkPie00{
    mask-image: conic-gradient(#fff 5%, #fff1 1%, #fff1 100%);
}

.imkPie1{
    mask-image: conic-gradient(#fff 10%, #fff1 1%, #fff1 100%);
}

.imkPie2{
    mask-image: conic-gradient(#fff 20%, #fff1 1%, #fff1 100%);
}

.imkPie3{
    mask-image: conic-gradient(#fff 30%, #fff1 1%, #fff1 100%);
}

.imkPie4{
    mask-image: conic-gradient(#fff 40%, #fff1 1%, #fff1 100%);
}

.imkPie5{
    mask-image: conic-gradient(#fff 50%, #fff1 1%, #fff1 100%);
}

.imkPie6{
    mask-image: conic-gradient(#fff 60%, #fff1 1%, #fff1 100%);
}

.imkPie7{
    mask-image: conic-gradient(#fff 70%, #fff1 1%, #fff1 100%);
}

.imkPie8{
    mask-image: conic-gradient(#fff 80%, #fff1 1%, #fff1 100%);
}

.imkPie9{
    mask-image: conic-gradient(#fff 90%, #fff1 1%, #fff1 100%);
}

.imkPie10{
    mask-image: conic-gradient(#fff 100%, #fff1 1%, #fff1 100%);
}


.\src\components\Graphs\Progressbar\index.tsx
---------------------------------------------
import React from "react";
import { cn } from "@bem-react/classname";

import "./style.scss";

type Props = {
    bgcolor?: string;
    completed: number;
    maxValue?: number;
};

export default function ProgressBar({
    bgcolor = "rgb(36, 119, 244)",
    completed,
    maxValue = 100,
}: Props) {
    const cnProgressBar = cn("ProgressBar");

    return (
        <div className={cnProgressBar()}>
            <div
                className={cnProgressBar("line")}
                style={
                    {
                        "--value_line":
                            completed >= maxValue
                                ? "100%"
                                : (completed * 100) / maxValue + "%",
                        "--color_line": bgcolor,
                        "--border_radius": "50px 0 0 50px",
                    } as React.CSSProperties
                }
            ></div>
        </div>
    );
}


.\src\components\Graphs\Progressbar\style.scss
----------------------------------------------
.ProgressBar {
    width: 100%;
    height: 25px;
    background-color: #D4DFF4;
    border-radius: 50px;
    overflow: hidden;

    &-line{
        width:var(--value_line);
        height: 100%;
        background-color: var(--color_line);
        border-radius: var(--border_radius);
    }

    &-label{
        padding: 15px;
        color: white;
        font-weight: "bold";
    }
}

@keyframes value_line {
    from{--value_line:0px}
}

@keyframes color_line {
    from{--color_line:#000}
}

@keyframes border_radius {
    from{--border_radius:50px 0 0 50px}
}

.\src\components\Graphs\Scale\index.tsx
---------------------------------------
import "./style.scss";
import { cn } from "@bem-react/classname";
import GraphColor from "../../../models/graph/_colors";
import { IDescriptionScale } from "../../../models/graph/inteface/IDescriptionScale";
import convertSecondsIntoTime from "../../../@adapters/Time/convertSeconds";
import GraphSecondPointer from "../-Base/-SecondPointer";
import { useContext, useState, useRef, useEffect } from "react";
import { ValueTime } from "../../Analytics/helpers";
import { VideoTimeContext } from "../../Context/helpers";
import { convertTime } from "../../Archive/helpers";

const CN = cn("Scale");
interface IComponentProps {
    fractions: IDescriptionScale[];
    endTime?: number;
    hasPointer?: boolean;
}

export default function Scale({
    fractions,
    endTime,
    hasPointer = false,
}: IComponentProps) {
    const timeEnd = endTime;

    const { currentTime, setCurrentTime } = useContext(VideoTimeContext);
    const [isPointerMoving, setPointerMoving] = useState(false);
    const { updateTime } = useContext(ValueTime);

    const sliderRef = useRef<HTMLDivElement>(null);
    const [sliderValue, setSliderValue] = useState(0);

    useEffect(() => {
        const handleMouseMove = (event: MouseEvent) => {
            if (sliderRef.current) {
                const sliderWidth = sliderRef.current.offsetWidth;
                const offsetX =
                    event.pageX - sliderRef.current.offsetLeft - 176;
                const newValue = (offsetX / sliderWidth) * 100;
                setSliderValue(newValue);
            }
        };

        const handleMouseUp = () => {
            document.removeEventListener("mousemove", handleMouseMove);
            document.removeEventListener("mouseup", handleMouseUp);
        };

        if (sliderRef.current) {
            const currentSliderRef = sliderRef.current;

            currentSliderRef.addEventListener("mousedown", () => {
                document.addEventListener("mousemove", handleMouseMove);
                document.addEventListener("mouseup", handleMouseUp);
            });

            return () => {
                currentSliderRef.removeEventListener("mousedown", () => {
                    document.removeEventListener("mousemove", handleMouseMove);
                    document.removeEventListener("mouseup", handleMouseUp);
                });
            };
        }
    }, []);

    // время

    const choiseBlock = (event: React.MouseEvent<HTMLDivElement>) => {
        const dataValue = +event.currentTarget.dataset.time! as number;

        if (dataValue || dataValue === 0) {
            setCurrentTime(dataValue);
        }
    };

    useEffect(() => {
        if (isPointerMoving) {
            const time = Math.round((timeEnd! * sliderValue) / 100);
            setCurrentTime(time);
            updateTime(time);
        }
    }, [sliderValue]);

    useEffect(() => {
        if (!isPointerMoving) {
            setSliderValue((currentTime / timeEnd!) * 100);
            console.log("setSliderValue", (currentTime / timeEnd!) * 100);
        }
    }, [currentTime]);

    return (
        <div
            className={CN()}
            ref={sliderRef}
            onMouseDown={() => setPointerMoving(true)}
            onMouseUp={() => setPointerMoving(false)}
            onMouseLeave={() => setPointerMoving(false)}
        >
            {hasPointer && (
                <GraphSecondPointer
                    offsetX={-25}
                    offsetY={-24}
                    left={
                        sliderValue > 100
                            ? 100
                            : sliderValue <= 0
                            ? 0
                            : sliderValue
                    }
                    // переделать получение времени
                    text={convertTime(currentTime)}
                />
            )}
            <div className={CN("wrapper")}>
                {fractions.map((number, idx) => (
                    <div
                        key={idx}
                        className={CN("content")}
                        style={{
                            backgroundColor: number.color,
                            color:
                                number.color === GraphColor.GRAY
                                    ? "#7C8EB5"
                                    : GraphColor.WHITE,
                            width: number.value + "%",
                        }}
                    >
                        <div
                            className={CN("text", {
                                unvisible: number.value < 15,
                            })}
                        >
                            {number.title}
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
}


.\src\components\Graphs\Scale\style.scss
----------------------------------------
.Scale {
    position: relative;

    &-wrapper {
        display: flex;
        flex-direction: row;
        align-items: center;
        width: 100%;
        height: 40px;
        overflow: hidden;
        background: #d4dff4;
        border-color: inherit;
        border-radius: 20px;
    }

    &-content {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 40px;
    }

    &-text {
        font-weight: 400;
        font-size: 16px;
        font-family: "Onest";
        line-height: 17px;
        text-align: center;

        &_unvisible {
            display: none;
        }
    }
}


.\src\components\Graphs\SmileBlock\index.tsx
--------------------------------------------
import React from 'react';
import { ReactSVG } from 'react-svg'
import './style.scss'
import {ISimelDescription} from "../../../models/graph/inteface/ISimelDescription";
import {ISimel} from "../../../models/graph/inteface/ISimel";

interface IComponentProps {
    component: ISimel
}

function paint (item:ISimelDescription, img:string ){
    let procent
    if (item.procent > 9 && item.procent<100){
        procent = item.procent.toString()[0]
    }else if (item.procent >= 100){
        procent = "11"
    }else if (item.procent === 0){
        procent = "12"
    }
    else {
        procent = "1"
    }
    return <div className='contentPaint'>
        <div >
            <ReactSVG className={'imk'+ procent} src={img}/>
        </div>
        <p className="contentPaintText">
            {item.title}
        </p>
        <p className="contentPaintPercent" style={{color:item.colorProcent}}>
            {item.procent+'%'}
        </p>
    </div>
}

export default function Smiley(props:IComponentProps) {
    let inf = props.component;
    let listItems1;
    let listItems2;
    let listItems3;
        inf.items.map((number) =>{
            if (number.id === 1)
            {
                listItems1 = paint(number, number.icon)
            }
            if (number.id === 2){
                listItems2 = paint(number, number.icon)
            }
            if (number.id === 3){
                listItems3 = paint(number, number.icon)
            }
        }
    );

    return (
        <>
                {listItems1}
                {listItems2}
                {listItems3}
        </>
    );}


.\src\components\Graphs\SmileBlock\style.scss
---------------------------------------------
.contentPaint{
    display: flex;
    flex-direction: row;
    gap: 16px;
    align-items: center;
    height: 108px;
    padding: 16px 24px;
    background: #F7FAFF;
    border-radius: 32px;
}

.contentPaintText, .contentPaintPercent{
    display: flex;
    align-items: center;
    font-weight: 600;
    font-style: normal;
    line-height: 29px;
}

.contentPaintText{
    color: #37476A;
}

.contentPaintPercent{
}

.imk11{
    mask-image: linear-gradient(rgb( 0 0 0 / 50%)0%, black 0);
}

.imk12{
    mask-image: linear-gradient(rgb( 0 0 0 / 50%) 100%, black 0);
}

.imk1{
    mask-image: linear-gradient(rgb( 0 0 0 / 50%) 90%, black 0);
}

.imk2{
    mask-image: linear-gradient(rgb( 0 0 0 / 50%) 80%, black 0);
}

.imk3{
    mask-image: linear-gradient(rgb( 0 0 0 / 50%) 70%, black 0);
}

.imk4{
    mask-image: linear-gradient(rgb( 0 0 0 / 50%) 60%, black 0);
}

.imk5{
    mask-image: linear-gradient(rgb( 0 0 0 / 50%) 50%, black 0);
}

.imk6{
    mask-image: linear-gradient(rgb( 0 0 0 / 50%) 40%, black 0);
}

.imk7{
    mask-image: linear-gradient(rgb( 0 0 0 / 50%) 30%, black 0);
}

.imk8{
    mask-image: linear-gradient(rgb( 0 0 0 / 50%) 20%, black 0);
}

.imk9{
    mask-image: linear-gradient(rgb( 0 0 0 / 50%) 10%, black 0);
}


.\src\components\Graphs\Stats\index.tsx
---------------------------------------
import { cn } from "@bem-react/classname";

import StatsLineGraph from "../-Base/StatsLine";
import GraphColor from "../../../models/graph/_colors";

import { createXDescriptionFromData } from "../-Base/helpers";
import { StatsDataItem } from "../../../models/graph/stats";

import "./style.scss";
import LineGraph from "../-Base/Line";
import { IStatisticItem } from "../../../models/diary";

const CN = cn("stats-graph");

type Props = { data: IStatisticItem[] };

const X = "value";


function createXDataDescriptionFromData(data: IStatisticItem[]) {
    return data.map((el) => el.date);
}

export default function StatsGraph({ data }: Props) {
    const restruction = (data: IStatisticItem[]) => {
        const arr: number[] = [];
        for (let i = 0; i < data.length; i++) {
            if (data[i].value !== null) {
                const cur = (data[i].value / 100) as number;
                arr.push(cur);
            } else {
                const cur = -0.001;
                arr.push(cur);
            }
        }
        return arr;
    };

    return (
        <>
            {restruction(data).length > 0 ? (
                <StatsLineGraph
                    items={restruction(data).map((x, ind) => ({
                        name: ind,
                        [X]: x,
                        // [pX]:
                        //     data[ind].value === null
                        //         ? -1
                        //         : (data[ind].value as number),
                        vv: -0.3,
                    }))}
                    colors={{ [X]: GraphColor.BLUE }}
                    descriptionX={createXDataDescriptionFromData(data)}
                    descriptionY={[0, 0.2, 0.4, 0.6, 0.8, 1]}
                    withMedian={false}
                    // поменять по времени, 7 дней
                    visible={restruction(data).length > 7 ? false : true}
                    // visible={true}
                />
            ) : undefined}
        </>
    );
}


.\src\components\Graphs\Stats\style.scss
----------------------------------------























.\src\components\Graphs\SwitchButton\index.tsx
----------------------------------------------
import { ReactSVG } from "react-svg";
import { cn } from "@bem-react/classname";
import "./style.scss";

const CN = cn("SwitchButton");

type Props = {
    title: string;
    icon?: string;
    onClick: Function;
    isActive: boolean;
};

export default function SwitchButton(props: Props) {
    return (
        <div
            className={CN("switch", { active: props.isActive })}
            onClick={() => props.onClick()}
        >
            {props.icon && <ReactSVG src={props.icon} />}
            {props.title}
        </div>
    );
}


.\src\components\Graphs\SwitchButton\style.scss
-----------------------------------------------
.SwitchButton {
    &-switch {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        gap: 6px;
        margin-left: 5px;
        margin-right: 5px;
        padding: 8px 12px;

        color: #2477F4;
        font-weight: 600;
        font-size: 12px;
        font-family: Montserrat Alternates;
        font-style: normal;
        background: rgb(36 119 244 / 13%);
        border: none;
        border-radius: 8px;
        cursor: pointer;

        svg {
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
        }

        &_active {
            display: flex;
            color: #7C8EB5;
            background: rgb(36 119 244 / 0%);
        }
    }

}

.\src\components\Graphs\Timeline\index.tsx
------------------------------------------
import { cn } from "@bem-react/classname";
import GraphColor from "../../../models/graph/_colors";

import "./style.scss";

import { useContext, useEffect, useRef, useState } from "react";
import { getWindowWidth } from "../../../tools/window";
import convertSecondsIntoTime from "../../../@adapters/Time/convertSeconds";



type Props = {
    startTime?: number;
    endTime?: number;
    data: TimelineItem[];
};

type TimelineItem = {
    id?: number;
    text?: string;
    time: number;
    color?: string;
};
export default function TimelineGraph({
    startTime = 0,
    endTime = 0,
    data,
}: Props) {
    const convertStart = convertSecondsIntoTime(startTime);
    const convertEnd = convertSecondsIntoTime(endTime);

    const [isOpened, setIsOpened] = useState(false);
    const [indOpened, setIndOpened] = useState<number>();

    const [helpWidth, setHelpWidth] = useState(0);

    const wrapperRef = useRef<HTMLDivElement>(null);
    const helpRef = useRef<HTMLDivElement>(null);
    const CN = cn("timeline-graph");
    const cnGraphHelp = cn("graph-help-line");

    const [right, setRight] = useState("");

    const handleMousePosition: React.MouseEventHandler<HTMLDivElement> = (
        e
    ) => {
        const windowWidth = getWindowWidth();
        if (windowWidth * 0.95 > e.clientX + helpWidth) {
            setRight("auto");
        } else {
            setRight("10px");
        }
    };

    useEffect(() => {
        if (helpRef.current) {
            setHelpWidth(helpRef.current.getBoundingClientRect().width);
        }
    }, [helpRef.current]);

    // const { setCurrentTime } = useContext(VideoTimeContext);

    // const choiseBlock = (event: React.MouseEvent<HTMLDivElement>) => {
    //     const dataValue = +event.currentTarget.dataset.time! as number;
    //     if (dataValue) {
    //         setCurrentTime(dataValue);
    //     }
    // };

    return (
        <div className={CN()}>
            <div className={CN("time")}>{convertStart}</div>
            <div className={CN("body")}>
                {data.map((el) => (
                    <div
                        key={el.id}
                        style={{
                            backgroundColor:
                                el.color === GraphColor.DARKGRAY
                                    ? GraphColor.GRAY
                                    : el.color || GraphColor.GRAY,
                        }}
                        className={CN("element")}
                        // onClick={choiseBlock}
                        // data-time={el.time}
                    >
                        <div
                            onMouseMove={handleMousePosition}
                            onMouseEnter={() => {
                                setIndOpened(el.id);
                                setIsOpened(true);
                            }}
                            onMouseLeave={() => setIsOpened(false)}
                            className={cnGraphHelp()}
                            ref={wrapperRef}
                            // data-tooltip-id={"line-brick-" + el.id}
                        ></div>
                        {/* <Tooltip
                            id={"line-brick-" + el.id}
                            place={"bottom-end"}
                            noArrow={true}
                            className={CN("tooltip")}
                            style={{ borderColor: el.color }}
                        >
                            <span className={CN("tooltip-text")}>
                                {convertTime(el.time)} {el.text}
                            </span>
                        </Tooltip> */}
                    </div>
                ))}
            </div>
            <div className={CN("time")}>{convertEnd}</div>
        </div>
    );
}


.\src\components\Graphs\Timeline\style.scss
-------------------------------------------
.timeline-graph {
    // border: thin solid red;
    display: flex;
    align-items: center;
    justify-content: space-between;
    height: 20px;

    &-time {
        color: #7c8eb5;
        font-size: 0.875rem;
    }

    &-body {
        display: flex;
        flex: 1 0 auto;
        height: 100%;
        margin: 0 8px;

        & > div {
            &:first-child {
                border-radius: 40% 0 0 40%;
            }

            &:last-child {
                border-radius: 0 40% 40% 0;
            }
        }
    }

    &-help {
        &_time {
            padding: 0 8px 0 0;
            color: gray;
        }
    }

    &-element {
        flex: 1 0 auto;
        margin: 0 1px;

        &_gray {
            background: #d4dff4;
        }

        &_red {
            background: #fe5d74;
        }

        &_blue {
            background: #2477f4;
        }
    }
    &-tooltip {
        padding: 8px 12px !important;
        max-width: 450px !important;
        z-index: 100;
        border-radius: 12px !important;
        border: 1px solid #7c8eb5;
        background: #fff !important;
        line-height: 12px !important;
        box-shadow: 2px 2px 12px 0px rgba(173, 185, 212, 0.3);

        &-text {
            color: #37476a;
            font-size: 12px;

            font-family: "Onest";
            font-weight: 500;
        }
    }
}

.graph-help-line {
    height: 100%;

    &-content {
        position: absolute;
        z-index: 1;
        width: max-content;
        padding: 8px 12px;
        font-weight: 500;
        font-size: 0.75rem;
        background-color: white;
        border-radius: 12px;
    }
}


.\src\components\Graphs\unityOfStyle\index.tsx
----------------------------------------------
import "./UnityOfStyl.css";
import Scale from "../Scale";
import { IScaleDataType } from "../../../models/graph/inteface/scale";
import GraphColor from "../../../models/graph/_colors";

type Props = {
    scientific: number;
    official: number;
    publicistic: number;
    colloquial: number;
    artistic: number;
};

const convertUnityOfStyleInTitle = (title: string) => {
    switch (title) {
        case "scientific":
            return "Научный";
        case "official":
            return "Официально-деловой";
        case "publicistic":
            return "Публицистический";
        case "colloquial":
            return "Разговорный";
        case "artistic":
            return "Художественный";
        default:
            return "";
    }
};

export default function UnityOfStylScale(props: Props) {
    const MAX_STYLE = 0.5;
    const SECOND_MAX_STYLE = 0.2;
    
    let maxTitle: string[] = [];
    let maxSecondTitles: string[] = [];

    Object.entries(props).forEach((el) => {
        if (el[1] > MAX_STYLE) maxTitle.push(el[0]);
        else if (el[1] > SECOND_MAX_STYLE) maxSecondTitles.push(el[0]);
    });

    return (
        <div className="inf">
            <Scale
                fractions={
                    maxTitle.length > 0
                        ? [
                              {
                                  title: convertUnityOfStyleInTitle(
                                      maxTitle[0],
                                  ),
                                  value: props[maxTitle[0] as keyof Props],
                                  color: GraphColor.BLUE,
                              },
                              {
                                  title: "Другие стили",
                                  value: 1 - props[maxTitle[0] as keyof Props],
                                  color: GraphColor.GRAY,
                              },
                          ]
                        : [
                              {
                                  title: "Отсутствует единство стиля",
                                  value: 1,
                                  color: GraphColor.GRAY,
                              },
                          ]
                }
            />
        </div>
    );
}


.\src\components\Graphs\unityOfStyle\text.ts
--------------------------------------------
export default function AddTextUnityOfStyle(scientific: number,
                                            official: number,
                                            publicistic: number,
                                            colloquial: number,
                                            artistic: number){
    let max = 0;
    let styles: number[] = [scientific, official, publicistic, colloquial, artistic]
    let strings: string[] = [` научный`,` официально-деловой`,` публицистический`,` разговорный`,` художественный`]
    let str  = ``;
    let str1 = ``;
    for (let i = 0; i <= styles.length - 1; i++) {
        if (styles[i] > max)
        {
            max = styles[i];
        }
    }
    let count = 0
    let str2 =``;
    if (max > 50){
        str = `Ярко выражен `+ strings[styles.indexOf(max)];
        for (let i = 0; i <= styles.length - 1; i++) {
            if (styles[i] > 20 && styles[i]<max)
            {
                ++count;
                str1 = `но также преобладает ` + strings[i];
                if (count>=1){
                    str2 = str2+` `+strings[i];
                }

            }
        }
        if (count >= 3){
            str = str + `, но наблюдается преобладание и других стилей`
        }else if (count === 0){
            str = str + ` стиль.` ;
        }else if (count == 2){
            str= str+ `, но также преобладают ` + str2 +` стили.`;
        }
        else {
            str = str + `, ` + str1+` стиль.`;
        }
    }
    else {
        str = `Отсутствует единство стиля.`
    }
    return str
}

.\src\components\Graphs\unityOfStyle\UnityOfStyl.css
----------------------------------------------------
.text1{
    display: flex;
    align-items: center;
    height: 40px;
    color: #7C8EB5;
    font-size: 20px;
    font-family: 'Onest';
    font-style: normal;
    line-height: 25px;
}

.\src\components\Graphs\unityOfStyle\UnityOfStyl.tsx
----------------------------------------------------
import React from "react";
import "./UnityOfStyl.css";
import PieChartBlock from "../PieChartBlock";
import { IPieChart } from "../../../models/graph/inteface/IPieChart";

type Props = {
    scientific: number;
    official: number;
    publicistic: number;
    colloquial: number;
    artistic: number;
};

function UnityOfStyl(props: Props) {
    return (
        <>
            <div className="inf">
                <PieChartBlock component={props} />
            </div>
        </>
    );
}

export default UnityOfStyl;


.\src\components\Graphs\СolumnСhart\index.tsx
---------------------------------------------
import "./style.scss";
import { cn } from "@bem-react/classname";
import GraphColor from "../../../models/graph/_colors";
import { CongruenceItem } from "../../../models/graph/congruence";
import {
    Fragment,
    MouseEventHandler,
    useContext,
    useEffect,
    useLayoutEffect,
    useRef,
    useState,
} from "react";
import { Tooltip } from "react-tooltip";
import convertSecondsIntoTime from "../../../@adapters/Time/convertSeconds";
import { _1SEC_PX } from "../-Base/helpers";
import { ValueTime } from "../../Analytics/helpers";
import { VideoTimeContext } from "../../Context/helpers";
import GraphSecondPointer from "../-Base/-SecondPointer";

enum EMOTION {
    ANGRY = "angry",
    HAPPINESS = "happiness",
    NEUTRAL = "neutral",
}

function getColorByEmotion(emotion: EMOTION) {
    switch (emotion) {
        case EMOTION.ANGRY:
            return GraphColor.RED;
        case EMOTION.HAPPINESS:
            return GraphColor.GREEN;
        default:
            return GraphColor.GRAY;
    }
}

const MIN_HEIGHT = 20;

function getHeightByValue(value: number) {
    value *= 100;
    if (value < MIN_HEIGHT) return MIN_HEIGHT;
    else if (value < 60) return 50;
    else return value;
}

type Props = {
    elements: CongruenceItem[];
};

const CN = cn("ColumnChart");

export default function ColumnChart(props: Props) {
    const last_time_end = props.elements.at(-1)!.time_end;

    const { currentTime, setCurrentTime } = useContext(VideoTimeContext);
    const [isPointerMoving, setPointerMoving] = useState(false);
    const [pointerX, setPointerX] = useState(0);
    const { updateTime } = useContext(ValueTime);

    const onMouseMove: MouseEventHandler<HTMLDivElement> = (e) => {
        if (isPointerMoving) {
            setPointerX((prev) => {
                const value = prev + e.movementX;
                return value > 0 ? value : 0;
            });
        }
    };
    useEffect(() => {
        if (!isPointerMoving) {
            setPointerX(currentTime * _1SEC_PX);
            // setPointerX(currentTime * secondarySecond);
        }
    }, [currentTime]);

    useEffect(() => {
        if (isPointerMoving) {
            const time = Math.floor(pointerX / _1SEC_PX);
            setCurrentTime(time);
            updateTime(time);
        }
    }, [pointerX]);

    // ширина родителя

    const parentRef = useRef<HTMLDivElement>(null);

    const handleClick = () => {
        if (parentRef.current) {
            const parentWidth = parentRef.current.offsetWidth;
            setWidthLineGraph(parentWidth);
            console.log(parentWidth);
        }
    };

    const [widthLineGraph, setWidthLineGraph] = useState<number>();

    const [secondarySecond, setSecondarySet] = useState<number>();

    useEffect(() => {
        if (widthLineGraph) {
            // const secondPX = Math.floor(widthLineGraph / last_time_end);
            const secondPX = widthLineGraph / last_time_end;
            setSecondarySet(secondPX);
        }
    }, [widthLineGraph]);

    useEffect(() => {
        if (secondarySecond) {
            console.log("secondarySecond", secondarySecond);
        }
    }, [secondarySecond]);

    return (
        <div
            className={CN()}
            style={{
                cursor: isPointerMoving ? "col-resize" : "auto",
                // height: "100%",
            }}
            onMouseDown={() => setPointerMoving(true)}
            onMouseUp={() => setPointerMoving(false)}
            onMouseLeave={() => setPointerMoving(false)}
            onMouseMove={onMouseMove}
            onMouseEnter={handleClick}
            ref={parentRef}
        >
            <GraphSecondPointer
                offsetX={-25}
                left={pointerX}
                text={new Date(currentTime * 1000)
                    .toISOString()
                    .substring(14, 19)}
            />
            {props.elements.map((el, i) => (
                <Fragment key={i}>
                    <div
                        className={CN("brick")}
                        data-tooltip-id={"col-brick-" + i}
                        style={{
                            backgroundColor: getColorByEmotion(
                                el.type as EMOTION,
                            ),
                            height: getHeightByValue(el.value) + "%",
                            width:
                                ((el.time_end - el.time_start) * 100) /
                                    last_time_end +
                                "%",
                        }}
                    ></div>
                    {el.type !== EMOTION.NEUTRAL && (
                        <Tooltip
                            id={"col-brick-" + i}
                            place={"top-start"}
                            noArrow={true}
                            className={CN("tooltip")}
                        >
                            {"Рассогласование "}
                            {el.type === EMOTION.HAPPINESS ? (
                                <span className={CN("tooltip-happiness")}>
                                    радости
                                </span>
                            ) : (
                                <span className={CN("tooltip-anger")}>
                                    злости
                                </span>
                            )}
                            {" на "}
                            {convertSecondsIntoTime(el.time_start)}.
                        </Tooltip>
                    )}
                </Fragment>
            ))}
        </div>
    );
}


.\src\components\Graphs\СolumnСhart\style.scss
----------------------------------------------
.ColumnChart {
    position: relative;
    display: flex;
    flex-direction: row;
    gap: 2px;
    align-items: flex-end;
    justify-content: start;
    width: 100%;
    height: 100px;

    &-brick {
        border-radius: 6px;
    }

    &-tooltip {
        gap: 6px;
        padding: 8px 12px;
        color: #37476a !important;
        font-weight: 400;
        font-size: 12px !important;
        font-family: "Onest" !important;
        font-style: normal;
        line-height: normal;
        background: #fff !important;
        border: 1px solid #7c8eb5;
        border-radius: 12px !important;
        box-shadow: 2px 2px 12px 0 rgb(173 185 212 / 30%);

        &-happiness {
            color: #1eae5c;
            font-weight: 500;
        }

        &-anger {
            color: #ff4e78;
            font-weight: 500;
        }
    }
}


.\src\components\Header\index.tsx
---------------------------------
import { cn } from "@bem-react/classname";
import ProfilePreview from "../ProfilePreview";

import Notification from "../Notification";



import "./style.scss";

type Props = {
    imageUrl?: string;
    displayName?: string;
};

const cnHeader = cn("header");

export default function Header(props: Props) {
    return (
        <header className={cnHeader()}>
            <div className={cnHeader("content")}>
                <ProfilePreview {...props} />
                <div className={cnHeader("notifications")}>
                    <Notification />
                </div>
            </div>
        </header>
    );
}


.\src\components\Header\style.scss
----------------------------------
.header {
    flex: 0 0 auto;

    &-content {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: space-between;
        width: 100%;
        padding: 25px 40px;
    }

    &-notifications {
        position: absolute;
        top: 40px;
        right: 40px;
        align-items: center;
        width: 400px;

        & span span {
            margin: 0;
            // из-за двойной обертки ReactSVG
            padding: 0 6px;
        }
    }
}


.\src\components\Loader\index.tsx
---------------------------------
import { cn } from "@bem-react/classname";
import lottie from "lottie-web";
import { useRef, useEffect } from "react";
import "./style.scss";

export default function LoaderLogo() {
    const cnLogoAnimation = cn("LoaderLogo");
    const AnimationContainer = useRef<HTMLDivElement>(null);

    useEffect(() => {
        const animation = lottie.loadAnimation({
            container: AnimationContainer.current!,
            renderer: "svg", // Вы можете выбрать другой рендерер, если нужно
            loop: true,
            autoplay: true,
            animationData: require("./preloader.json"), // Замените путь на путь к вашему файлу анимации JSON
        });

        return () => {
            animation.destroy(); // Опционально, если вы хотите удалить анимацию при размонтировании компонента
        };
    }, []);

    return (
        <div className={cnLogoAnimation()}>
            <div
                ref={AnimationContainer}
                className={cnLogoAnimation("animation")}
            ></div>
        </div>
    );
}


.\src\components\Loader\style.scss
----------------------------------
.LoaderLogo {
    width: 100%;
    max-width: 400px;
    height: 228px;
    max-height: 228px;

    &-animation {
        width: 100%;
        height: 100%;
    }
}


.\src\components\Menu\index.tsx
-------------------------------
import { ReactSVG } from "react-svg";
import { cn } from "@bem-react/classname";
import MenuItem from "./MenuItem";
import logoMini from "./icons/logo-micro.svg";

import images from "./icons";
import "./style.scss";
import { useLocation, useNavigate } from "react-router-dom";
import { useAppDispatch } from "../../hooks/redux";
import { logout } from "../../store/slices/user";
import RoutesEnum from "../../models/routes";

import { useState } from "react";
import logoutImg from "./ModalExit/img/logout.svg";
import exitImg from "./ModalExit/img/exit.svg";
import Button from "../ui-kit/Button";
import ModalWindow from "../ModalWindow/ModalWindow";
const cnMenu = cn("menuStyle");

export default function Menu() {
    const navigate = useNavigate();
    const dispatch = useAppDispatch();
    const [isModal, setIsModal] = useState(false);

    const closeModal = () => {
        setIsModal(false);
    };

    const showModal = () => {
        setIsModal(true);
    };

    const location = useLocation();
    const currentLocation = location ? location.pathname.split("/")[1] : "";

    const items = [
        {
            title: "Главная",
            img: images.Home,
            onClick: () => navigate(RoutesEnum.HOME),
            current:
                currentLocation === RoutesEnum.HOME.split("/")[1] ||
                currentLocation === "",
        },
        // {
        //     title: "Обучение",
        //     onClick: () => navigate(RoutesEnum.LEARNING),
        //     img: images.Teacher,
        // },
        {
            title: "Репетиции",
            onClick: () => navigate(RoutesEnum.REPETITION),
            img: images.Repetition,
            current: currentLocation === RoutesEnum.REPETITION.split("/")[1],
        },
        // {
        //     title: "Импровизация",
        //     onClick: () => navigate(RoutesEnum.IMPROVISATION),
        //     img: images.Improvization,
        // },
        {
            title: "Дневник",
            onClick: () => navigate(RoutesEnum.DIARY),
            img: images.Book,
            current: currentLocation === RoutesEnum.DIARY.split("/")[1],
        },
        {
            title: "Настройки",
            onClick: () => navigate(RoutesEnum.SETTINGS),
            img: images.Setting,
            current: currentLocation === RoutesEnum.SETTINGS.split("/")[1],
        },
        {
            title: "Выход",
            onClick: showModal,
            img: images.Logout,
            current: false,
        },
    ];

    return (
        <div className={cnMenu()}>
            <div className={cnMenu("logo-item")}>
                <span>
                    <ReactSVG src={logoMini} className={cnMenu("logo")} />
                </span>
                <span className={cnMenu("slow")}> {"Speech Up"}</span>
            </div>
            <ul>
                {items.map((props, idx) => (
                    <li key={idx}>
                        <MenuItem {...props} ind={idx} />
                    </li>
                ))}
            </ul>
            <ModalWindow
                title="Выход"
                icon={logoutImg}
                isVisible={isModal}
                onClose={() => closeModal()}
            >
                <div className={cnMenu("modal")}>
                    <div className={cnMenu("ImgText")}>
                        <ReactSVG src={exitImg} className={cnMenu("modal-svg")}/>
                        <span className={cnMenu("textQ")}>
                            Вы уверены, что хотите выйти из аккаунта?
                        </span>
                        <span className={cnMenu("text")}>
                            Вы всегда сможете вернуться и продолжить тренировки
                            с нами, но к чему останавливаться?
                        </span>
                    </div>
                    <div className={cnMenu("modalBtn")}>
                        <Button
                            className={cnMenu("Btn")}
                            style={{ background: "#2477F4" }}
                        >
                            <span className="" onClick={() => closeModal()}>
                                Хочу остаться
                            </span>
                        </Button>
                        <Button
                            className={cnMenu("Btn")}
                            style={{
                                background: "#F3F5F9",
                                color: "#37476A",
                            }}
                        >
                            <span
                                className=""
                                onClick={async () => {
                                    // await dispatch(accountApi.endpoints.logout.initiate(null));
                                    await dispatch(logout());
                                    // navigate(RoutesEnum.LOGIN);
                                    window.location.reload();
                                }}
                            >
                                Выйти из аккаунта
                            </span>
                        </Button>
                    </div>
                </div>
            </ModalWindow>
        </div>
    );
}


.\src\components\Menu\style.scss
--------------------------------
.menuStyle {
    position: absolute;
    left: 0;
    z-index: 10;
    width: 90px;
    height: 90vh;
    min-height: 560px;
    max-height: 1200px;
    overflow: hidden;
    background-color: white;
    border-right: 1px solid #e4e6ea;
    border-radius: 0 50px 50px 0;
    transition: width 0.5s ease-out;

    &-logo-item {
        display: flex;
        align-content: center;
        align-items: center;
        justify-content: start;
    }

    &-slow {
        display: inline-block;
        margin-bottom: 15px;
        font-weight: 700;
        font-size: 24px;
        font-family: "Onest";
        white-space: nowrap;
    }

    &-logo {
        height: 80px;
        padding: 30px 25px 90px;
        text-align: center;
    }

    & > ul {
        display: flex;
        flex-flow: column nowrap;
        gap: 10px;
        justify-content: space-between;
        height: 100%;
        height: calc(90vh - 120px);

        & > li:nth-child(4) {
            margin-top: auto !important;
        }
    }

    &-modal {
        display: flex;
        flex-direction: column;
        gap: 16px;
        align-items: flex-start;
        justify-content: center;
        width: 1000px;
        padding: 16px;
        background: #fff;
        border-radius: 24px;
    }

    &-modalBtn {
        display: flex;
        gap: 8px;
        align-items: center;
        align-self: stretch;
    }

    &-Btn {
        display: flex;
        flex: 1 0 0;
        gap: 8px;
        align-items: center;
        justify-content: center;
        padding: 16px 32px;
        border-radius: 14px;
    }

    &-ImgText {
        display: flex;
        flex-direction: column;
        gap: 16px;
        align-items: center;
        align-self: stretch;
        justify-content: center;
        padding-bottom: 0;
    }

    &-textQ {
        color: #37476a;
        font-weight: 500;
        font-size: 24px;
        font-family: "Montserrat Alternates";
        font-style: normal;
        line-height: normal;
    }

    &-text {
        color: #7c8eb5;
        font-weight: 400;
        font-size: 20px;
        font-family: "Onest";
        font-style: normal;
        line-height: normal;
        text-align: center;
    }
}

.menuStyle:hover {
    width: 260px;
    transition: width 0.5s ease-out;
}

.\src\components\Menu\icons\index.ts
------------------------------------


import Book from "./book.svg"
import Home from "./home.svg"
import Improvization from "./improvization.svg"
import Logout from "./logout.svg"
import Repetition from "./repetition.svg"
import Setting from "./setting.svg"
import Teacher from "./teacher.svg"


const images = {
    Book,
    Home,
    Improvization,
    Logout,
    Repetition,
    Setting,
    Teacher
    
}

export default images

.\src\components\Menu\MenuItem\index.tsx
----------------------------------------
import { ReactSVG } from "react-svg";
import { cn } from "@bem-react/classname";

import "./style.scss";
import { MouseEventHandler } from "react";

type Props = {
    ind: number;
    title: string;
    onClick: MouseEventHandler<HTMLElement>;
    img: string;
    current: boolean;
};

export default function MenuItem(props: Props) {
    const cnMenuItem = cn("MenuItem");

    return (
        <div
            className={cnMenuItem({ selected: props.current })}
            onClick={props.onClick}
        >
            <span className={cnMenuItem("span-logo")}>
                <ReactSVG
                    src={props.img}
                    className={cnMenuItem("span-logo-svg")}
                />
            </span>
            <span className={cnMenuItem("title")}>{props.title}</span>
        </div>
    );
}


.\src\components\Menu\MenuItem\style.scss
-----------------------------------------
.MenuItem {
    display: flex;
    align-content: center;
    align-items: center;
    justify-content: start;
    height: 60px;
    margin-bottom: 20px;
    padding-top: 20px;
    padding-bottom: 20px;
    padding-left: 32px;
    color: #90a0c1;
    font-weight: 600;
    font-size: 16px;
    font-family: "Montserrat Alternates";
    font-style: normal;
    line-height: 20px;
    cursor: pointer;

    &:hover,
    &_selected {
        color: #2477f4;
        background: linear-gradient(
            270deg,
            rgb(36 119 244 / 10%) 0%,
            rgb(255 255 255 / 0%) 100%
        );
        border-right: 3px solid #2477f4;
        border-radius: 40px 0 0 40px;

        & svg {
            fill: #2477f4;
        }
    }

    &-span-logo {
        padding-right: 5%;

        &-svg {
            width: 25px;
            height: 25px;
            fill: #90a0c1;
        }
    }

    &-title {
        margin-left: 33px;
    }
}


.\src\components\ModalWindow\ModalWindow.tsx
--------------------------------------------
import React, { ReactElement, ReactNode, useEffect } from "react";
import "./style.scss";
import { ReactSVG } from "react-svg";
import { cn } from "@bem-react/classname";

interface IWindowModalProps {
    isVisible: boolean;
    title?: string;
    icon?:string;
    footer?: ReactElement;
    onClose: Function;
    children?: ReactNode;
    closeOnClickOutside?:boolean
}

export default function ModalWindow({
    isVisible = false,
    title,
    icon=process.env.PUBLIC_URL +"/images/upload-icon.svg",
    footer,
    onClose,
    children,
    closeOnClickOutside=true
}: IWindowModalProps) {
    const keydownHandler = ({ key }: any) => {
        switch (key) {
            case "Escape":
                onClose();
                break;
            default:
                break;
        }
    };

    useEffect(() => {
        document.addEventListener("keydown", keydownHandler);
        return () => document.removeEventListener("keydown", keydownHandler);
    });

    const cnModalWindow = cn("ModalWindow");

    return !isVisible ? null : (
        <div className={cnModalWindow()} onClick={() => (closeOnClickOutside && onClose())}>
            <div className={cnModalWindow("dialog")} onClick={(e) => e.stopPropagation()}>
                {title && (
                    <div className={cnModalWindow("header")}>
                        <ReactSVG
                            src={icon}
                            className={cnModalWindow("header-icon")}
                        />
                        <span className={cnModalWindow("header-title")}>
                            {title}
                        </span>
                        <ReactSVG
                            src={process.env.PUBLIC_URL + "/images/close.svg"}
                            className={cnModalWindow("header-icon-close")}
                            onClick={()=>onClose()}
                        />
                    </div>
                )}
                <div className={cnModalWindow("body")}>
                    <div className={cnModalWindow("content")}>{children}</div>
                </div>
                {footer && <div className={cnModalWindow("footer")}>{footer}</div>}
            </div>
        </div>
    );
}


.\src\components\ModalWindow\style.scss
---------------------------------------
.ModalWindow {
    position: fixed;
    inset: 0;
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    background-color: rgb(0 0 0 / 25%);
    animation-name: appear;
    animation-duration: 300ms;

    &-dialog {
        position: relative;
        display: flex;
        flex-direction: column;
        width: auto;
        max-width: auto;
        max-height: calc(100vh - 100px);
        margin: 0 20px 0 100px;
        overflow: hidden;
        text-align: left;
        background: white;
        border-radius: 25px;
        box-shadow: 0 4px 8px 0 rgb(0 0 0 / 20%), 0 6px 20px 0 rgb(0 0 0 / 19%);
        animation-name: animatetop;
        animation-name: slide-in;
        animation-duration: 0.3s;
    }

    &-header {
        display: flex;
        flex-flow: row nowrap;
        gap: 10px;
        align-items: center;
        justify-content: start;
        padding: 1rem 1.5rem 0;
        font-size: 16px;
        line-height: 20px;

        &-title {
            flex-grow: 1;
            color: #37476A;
            font-weight: 600;
            font-size: 1em;
            font-family: 'Montserrat Alternates';
            font-style: normal;
            line-height: 1em;
        }

        &-icon {
            display: flex;
            flex-flow: row nowrap;
            align-items: center;
            justify-content: center;
            width: 28px;

            &-close {
                cursor: pointer;
            }
        }
    }


    &-body {
        overflow: auto;
    }

    &-content {
        padding: 1rem;
    }

    @keyframes appear {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    @keyframes slide-in {
        from {
            transform: translateY(-10px);
        }

        to {
            transform: translateY(0);
        }
    }

    &-footer {
        display: flex;
        align-items: center;
        padding: 1rem;
    }
}

.\src\components\Notification\index.tsx
---------------------------------------
import { cn } from "@bem-react/classname";
import HeaderNotification from "./-Header";

import { Dispatch, SetStateAction, createContext, useEffect, useState } from "react";
import NotificationItem, { TYPE_NOTIFICATION } from "./-NotificationItem";

import "./style.scss";
import { useGetNotificationsQuery } from "../../store/api/notification";

export const NotificationContext = createContext({
    isShow: true,
    setIsShow: (() => {}) as Dispatch<SetStateAction<boolean>>,
});

export default function Notification() {
    const cnNotification = cn("Notification");

    const [isShow, setIsShow] = useState(false);

    const [userNotifications, setUserNotifications] = useState([]);
    const allNotifications = useGetNotificationsQuery();

    useEffect(()=>{
        if(allNotifications && allNotifications.data && allNotifications.data!.data) {
            setUserNotifications(allNotifications.data!.data)
        }
    },[allNotifications])

    return (
        <>
            <NotificationContext.Provider value={{ isShow, setIsShow }}>
                <div className={cnNotification({ expanded: isShow })}>
                    <HeaderNotification />

                    {isShow && (
                        <div
                            className={cnNotification("content", {
                                expanded: !isShow,
                            })}
                        >
                            {userNotifications.length > 0 ? (<><div className={cnNotification("content-date")}>
                                Сегодня
                            </div>
                            <NotificationItem
                                title="Взгляните на свой прогресс!"
                                description="В Дневнике обновилась статистика, пора узнать результат!"
                                type={TYPE_NOTIFICATION.NOTICE}
                                status={true}
                                linkTitle=""
                            />
                            <div className={cnNotification("content-date")}>
                                Вчера
                            </div>
                            <NotificationItem
                                title="У вас заканчиваются репетиции!"
                                description="Осталось всего 2 репетиции. Выберите тариф, чтобы продолжить совершенствовать свои навыки."
                                type={TYPE_NOTIFICATION.LINK}
                                status={false}
                                linkTitle="Выбрать тариф"
                            /></>) : <div className={cnNotification("content-date")}>Нет новых уведомлений</div>}
                            
                        </div>
                    )}
                </div>
            </NotificationContext.Provider>
        </>
    );
}


.\src\components\Notification\style.scss
----------------------------------------
.Notification {
    // position: relative;
    z-index: 100;
    display: flex;
    flex-direction: column;
    width: 100%;
    height: 100%;
    border-radius: 18px;
   

    &_expanded {
        z-index: 1;
    }

    &-content {
        z-index: 100;
        display: flex;
        flex-direction: column;
        gap: 8px;
        align-items: flex-start;
        height: 100%;
        max-height: 80vh;
        padding: 24px 8px 24px 24px;
        overflow: auto;
        font-size: 0.8rem;
        background: #FFF;
        border-radius: 20px;
        box-shadow: 4px 4px 14px 0 rgb(124 142 181 / 11%);

        &_expanded {
            z-index: -1;
        }

        &-date{
            color: #7C8EB5;
            font-weight: 500;
            font-size: 12px;
            font-family: "Onest";
            font-style: normal;
            line-height: normal;
        }
    }
}

.\src\components\Notification\-Header\index.tsx
-----------------------------------------------
import { ReactSVG } from "react-svg";
import { useContext } from "react";
import { cn } from "@bem-react/classname";

import { NotificationContext } from "..";

import Arrow from "../icons/arrow.svg";
import NotificationStatus from "../icons/notification-status.svg";
import "./style.scss";

export default function HeaderNotification() {
    const cnHeaderNotification = cn("HeaderNotification");
    const {isShow, setIsShow}= useContext(NotificationContext);

    return (
        <div
            className={cnHeaderNotification()}
            onClick={() => setIsShow((prev) => !prev)}
        >
            <ReactSVG
                src={NotificationStatus}
                wrapper="span"
                className={cnHeaderNotification("icon")}
            />
            <span className={cnHeaderNotification("title")}>Уведомления</span>
            <ReactSVG
                src={Arrow}
                wrapper="span"
                className={cnHeaderNotification("icon")}
                style={{ rotate: isShow ? "180deg" : "" }}
            />
        </div>
    );
}


.\src\components\Notification\-Header\style.scss
------------------------------------------------
.HeaderNotification {
    display: flex;
    flex-flow: row nowrap;
    gap: 8px;
    align-items: center;
    justify-content: end;
    padding-bottom: 10px;
    color: #7c8eb5;
    cursor: pointer;


    &-title {
        color: #7c8eb5;
        font-weight: 600;
        font-size: 1.25rem;
        font-family: "Montserrat Alternates";
    }

    &-icon {
        display: flex;
        flex-flow: row nowrap;
        align-items: center;
        justify-content: center;
        width: 28px;

        svg {
            // из-за двойной обертки ReactSVG
            display: flex;
            flex-flow: row nowrap;
            align-items: center;
            justify-content: center;
        }
    }
}

.\src\components\Notification\-NotificationItem\index.tsx
---------------------------------------------------------
import { cn } from "@bem-react/classname";


import { ReactSVG } from "react-svg";

import statusUp from "../icons/status-up.svg";
import arrowIcon from "../icons/arrow.svg";
import "./style.scss";
import { useNavigate } from "react-router-dom";
import RoutesEnum from "../../../models/routes";


type NotificationItem = {
    title:string,
    description: string,
    type: TYPE_NOTIFICATION,
    status: boolean,
    linkTitle: string,
}

export enum TYPE_NOTIFICATION {
    NOTICE="normal",
    LINK="link"
}

export default function NotificationItem({title,description,type,status,linkTitle}: NotificationItem) {
    const cnNotificationItem = cn("NotificationItem");

    const navigate = useNavigate();
    
    return (
        <div className={cnNotificationItem({blue:type===TYPE_NOTIFICATION.LINK})}>
            <div className={cnNotificationItem("circle",{visible:status})}></div>
            {type===TYPE_NOTIFICATION.NOTICE && (<div className={cnNotificationItem("icon")}><ReactSVG src={statusUp}/></div>)}
            <div className={cnNotificationItem("col")}>
                <div className={cnNotificationItem("title",{white:type===TYPE_NOTIFICATION.LINK})}>{title}</div>
                <div className={cnNotificationItem("description",{white:type===TYPE_NOTIFICATION.LINK})}>{description}</div>
               {type===TYPE_NOTIFICATION.LINK && (<div className={cnNotificationItem("link")} onClick={()=>navigate(RoutesEnum.SETTINGS)}>{linkTitle}<ReactSVG src={arrowIcon} wrapper="span" className={cnNotificationItem("link-icon")}/></div>)} 
            </div>
        </div>
    );
}


.\src\components\Notification\-NotificationItem\style.scss
----------------------------------------------------------
.NotificationItem {
    position: relative;
    display: flex;
    flex-flow: row nowrap;
    gap: 10px;
    width: 100%;
    padding: 8px;
    font-size: 14px;
    background: #F3F5F9;
    border-radius: 12px;

    &_blue {
        color: #FFF;
        background: #2477F4;
    }

    &-circle {
        position: absolute;
        top: 0;
        left: 0;
        display: none;
        width: .7em;
        height: .7em;
        background: #FFB800;
        border-radius: 50%;

        &_visible {
            display: inline-block;
        }
    }

    &-icon {
        display: flex;
        flex-flow: row nowrap;
        align-items: center;
    }

    &-col {
        display: flex;
        flex-flow: column nowrap;
        padding-left: 8px;
    }

    &-title {
        color: #37476A;
        font-weight: 600;
        font-size: 14px;
        font-family: "Montserrat Alternates";
        line-height: normal;


        &_white {
            color: #FFF;
        }
    }

    &-description {
        color: #7C8EB5;
        font-weight: 400;
        font-size: 14px;
        font-family: "Onest";
        line-height: normal;

        &_white {
            color: rgb(255 255 255 / 70%);
        }
    }

    &-link {
        display: flex;
        gap: 8px;
        align-items: center;
        justify-content: center;
        width: auto;
        padding: 6px 6px 6px 10px;
        font-weight: 600;
        font-size: 12px;
        font-family: "Montserrat Alternates";
        font-style: normal;
        line-height: normal;
        background: #FFB800;
        border-radius: 6px;
        cursor: pointer;

        &-icon {
            display: flex;
            flex-flow: row nowrap;
            align-items: center;
            rotate: -90deg;

            svg{
                width: 10px;
            }
        }
    }

}

.\src\components\Pagination\index.tsx
-------------------------------------
import { ReactSVG } from "react-svg";

import "./style.scss";
import { cn } from "@bem-react/classname";

import arrow_left from "./arrows/arrow-left.svg";
import arrow_right from "./arrows/arrow-right.svg";

type Props = {
    videosPerPage: number;
    totalVideos: number;
    paginate: Function;
    funcNextPage: Function;
    funcPrevPage: Function;
    currentPage: number;
};

export default function Pagination(props: Props) {
    const pageNumbers = [];
    const maxPage = Math.ceil(props.totalVideos / props.videosPerPage);

    for (let i = 1; i <= maxPage; i++) {
        pageNumbers.push(i);
    }

    let currentPageNumbers = [];
    const numbersPerPagination = 5;
    const deltaPages = Math.floor(numbersPerPagination / 2);

    if (props.currentPage <= numbersPerPagination - 1) {
        currentPageNumbers = pageNumbers.slice(0, numbersPerPagination);
    } else if (props.currentPage + deltaPages > maxPage) {
        let tempDelta =
            Math.abs(maxPage - (props.currentPage + deltaPages)) + deltaPages;
        currentPageNumbers = pageNumbers.slice(
            props.currentPage - tempDelta - 1,
            maxPage
        );
    } else {
        currentPageNumbers = pageNumbers.slice(
            props.currentPage - deltaPages - 1,
            props.currentPage + deltaPages
        );
    }

    const cnPagination = cn("pagination-block");

    return (
        <div className={cnPagination()}>
            <>
                <div
                    className={cnPagination("button", {
                        active: props.currentPage !== pageNumbers[0],
                    })}
                >
                    <ReactSVG
                        src={arrow_left}
                        onClick={() => props.funcPrevPage()}
                        className={cnPagination("button-svg")}
                    />
                </div>
                {currentPageNumbers.at(0) !== pageNumbers.at(0) && (
                    <div className={cnPagination("dot")}>...</div>
                )}

                {currentPageNumbers.map((number) => (
                    <div
                        key={number}
                        className={cnPagination("number", {
                            current: number === props.currentPage,
                        })}
                        onClick={() => props.paginate(number-1)}
                    >
                        {number}
                    </div>
                ))}

                {currentPageNumbers.at(-1) !== pageNumbers.at(-1) && (
                    <div className={cnPagination("dot")}>...</div>
                )}
                <div
                    className={cnPagination("button", {
                        active: props.currentPage !== maxPage,
                    })}
                >
                    <ReactSVG
                        src={arrow_right}
                        onClick={() => props.funcNextPage(maxPage)}
                    />
                </div>
            </>
        </div>
    );
}


.\src\components\Pagination\style.scss
--------------------------------------
.pagination-block{
    display: flex;
    flex-flow: row nowrap;
    gap: 2rem;
    align-content: center;
    align-items: center;
    justify-content: center;
    width: 100%;
    padding-top: 30px;
    padding-bottom: 30px;
    

    &-button{
        width: 1.5rem;
        cursor: pointer;
        fill: rgb(124 142 181 / 50%);

        &-svg div{
            display: flex;
            flex-flow: row nowrap;
            align-items: center;
            justify-content: center;
            width: 1.5rem;
        }
        
        &_active{
            fill:rgb(36 119 244 / 100%);
        }
    }

    &-number{
        color: #7C8EB5;
        font-weight: 500;    
        font-size: 20px;
        font-family: 'Montserrat Alternates';
        font-style: normal;
        line-height: 24px;
        cursor: pointer;

        &_current {
            color: #2477F4;
            font-weight: 700;
        }
    }

    &-dot{
        color: #7C8EB5;
        font-weight: 500;    
        font-size: 20px;
        font-family: 'Montserrat Alternates';
        font-style: normal;
        line-height: 24px;
    }
}

.\src\components\PersonalArea\index.tsx
---------------------------------------
import { cn } from "@bem-react/classname";
import "./style.scss";

import CurrentTariff from "../../plugs/personalArea/currentTariff.json";
import AllTariffs from "../../plugs/personalArea/allTariffs.json";
import { ReactSVG } from "react-svg";

import User from "./icon/user.png";
import Cake from "./icon/cake.svg";
import Building from "./icon/building.svg";
import Message from "./icon/sms.svg";
import Call from "./icon/call.svg";
import Tag from "./icon/tag.svg";
import Arrow from "./icon/arrow.svg";
import Receive from "./icon/receive.svg";
import { useAppDispatch, useAppSelector } from "../../hooks/redux";
import { useEffect, useState } from "react";
import { useSendUserAvatarMutation } from "../../store/api/user";

import LoadImage from "./LoadImage";
import Gallery from "./icon/gallery.svg";
import AvatarEditor from "react-avatar-editor";
import { setProfileAvatar } from "../../store/slices/profileSlice";

type Props = {
    isArchive: boolean;
};

type IconsArr = {
    icon: string;
    value: string;
};

export default function PersonalArea({ isArchive = false }: Props) {
    const cnPersonalSettings = cn("personal-settings");
    const cnPersonalUser = cn("personal-area");
    const cnTariffBlock = cn("tariff-block");
    const cnArchiveTariff = cn("archive-tariff");

    const store = useAppSelector((state) => state.profile.user);
    const avatar = useAppSelector((state) => state.profile.avatar);

    const [storeUser, setStoreUser] = useState(store);
    const [iconArr, setIconArr] = useState<IconsArr[]>([]);
    const [active, setActive] = useState<string>();

    useEffect(() => {
        if (store && store!.firstname) {
            setStoreUser(store);
            setIconArr([
                {
                    icon: Cake,
                    value: store.birthday.split("-").reverse().join("."),
                },
                { icon: Building, value: store.city },
                { icon: Message, value: store.email },
                { icon: Call, value: store.phone },
            ]);
        }
    }, [store]);

    const [sendUserAvatar, userAvatarResponse] = useSendUserAvatarMutation();
    const { isSuccess, isError } = userAvatarResponse;

    useEffect(() => {
        if (isSuccess) window.location.reload();
    }, [isSuccess]);

    useEffect(() => {
        if (isError) console.log(userAvatarResponse);
    }, [isError]);

    const changeActive = () => {
        !active ? setActive("active") : setActive("");
    };

    const closePopup = () => {
        changeActive();
    };

    const [editor, setEditor] = useState<AvatarEditor>();
    const [scaleValue, setScaleValue] = useState<number>();

    const [selectedImg, setSelectedImg] = useState<string>(
        `/api/users/account/avatar/${store.id}`,
    );

    const setEditorRef = (editor: AvatarEditor) => {
        setEditor(editor);
    };

    const onCrop = () => {
        if (editor) {
            editor!
                .getImage()
                .toBlob(
                    (res) => (res ? sendUserAvatar(res) : undefined),
                    "image/jpeg",
                );
            setNewPic(true);
            // editor!
            //     .getImageScaledToCanvas()
            //     .toBlob(
            //         (res) => (res ? sendUserAvatar(res) : undefined),
            //         "image/jpeg"
            //     );
        }
    };

    const onScaleChange = (scaleValue: number) => {
        setScaleValue(scaleValue);
    };

    const profileImageChange = (fileChangeEvent: any) => {
        fileChangeEvent.preventDefault();
        const file = fileChangeEvent.target.files![0];
        if (file) {
            const { type } = file;
            if (
                type.endsWith("jpeg") ||
                type.endsWith("jpg")
                // || type.endsWith("png")
            ) {
                setSelectedImg(file);
            }
        }
    };

    const dispatch = useAppDispatch();
    const [newPic, setNewPic] = useState(false);

    useEffect(() => {
        if (newPic) {
            setNewPic(false);
            const getData = async () => {
                setTimeout(() => {
                    const newkey=Math.ceil(Math.random() * 100);
                    dispatch(setProfileAvatar(`/api/users/account/avatar/${store.id}?rnd=${newkey}`));
                }, 5000);
            };
            getData();
        }
    }, [newPic]);

    return (
        <div className={cnPersonalSettings()}>
            <div
                className={cnPersonalUser(
                    "shield",
                    cnPersonalUser(`shield-${active}`),
                )}
                onClick={closePopup}
            ></div>
            <div className={cnPersonalSettings("left")}>
                <div className={cnPersonalUser("")}>
                    <div className={cnPersonalUser("photo")}>
                        {avatar && (
                            <img
                                src={avatar}
                                alt={store.lastname}
                            />
                        )}
                    </div>
                    <div className={cnPersonalUser("name")}>
                        {storeUser && (
                            <span>{`${storeUser!.firstname} ${
                                storeUser!.lastname
                            }`}</span>
                        )}{" "}
                    </div>
                    <form>
                        <input
                            className={cnPersonalUser("input")}
                            id="image"
                            type="file"
                            name="img"
                            accept="image/jpeg"
                            onChange={profileImageChange}
                            onClick={changeActive}
                        />
                        <label
                            htmlFor="image"
                            className={cnPersonalUser(
                                "btn",
                                cnPersonalUser("label"),
                            )}
                        >
                            <ReactSVG src={Gallery} />
                            <span>{"Изменить фото"}</span>
                        </label>
                        <div
                            className={cnPersonalUser(
                                "change",
                                cnPersonalUser(`change-${active}`),
                            )}
                        >
                            <div className={cnPersonalUser("current-photo")}>
                                <LoadImage
                                    imageSrc={selectedImg}
                                    scaleValue={scaleValue}
                                    onScaleChange={onScaleChange}
                                    setEditorRef={setEditorRef}
                                    onCrop={onCrop}
                                    closePopup={closePopup}
                                />
                            </div>
                        </div>
                    </form>
                    <ul className={cnPersonalUser("list")}>
                        {storeUser &&
                            iconArr.map((el, ind) => (
                                <li
                                    key={ind}
                                    className={cnPersonalUser("item")}
                                >
                                    <ReactSVG src={el.icon} />
                                    <span>{el.value}</span>
                                </li>
                            ))}
                    </ul>
                </div>
            </div>
            <div className={cnPersonalSettings("right")}>
                <div className={cnTariffBlock()}>
                    <div className={cnTariffBlock("description")}>
                        <ReactSVG src={Tag} />
                        <div className={cnTariffBlock("description-list")}>
                            <p className={cnTariffBlock("text")}>
                                {"Текущий тариф"}
                            </p>
                            <p className={cnTariffBlock("text")}>
                                {CurrentTariff.data.tariff}
                            </p>
                            <p
                                className={cnTariffBlock("text")}
                            >{`Осталось ${CurrentTariff.data.left} репетиций`}</p>
                        </div>
                    </div>
                    <button className={cnTariffBlock("btn")}>
                        <span>{"Пополнить"}</span>
                        <ReactSVG src={Arrow} />
                    </button>
                </div>
                <div className={cnArchiveTariff()}>
                    <div className={cnArchiveTariff("header")}>
                        <p className={cnArchiveTariff("title")}>
                            {"История платежей"}
                        </p>
                        <button className={cnArchiveTariff("btn")}>
                            <ReactSVG src={Receive} />
                            <span>{"Выгрузить чек"}</span>
                        </button>
                    </div>
                    <div className={cnArchiveTariff("list-wrapper")}>
                        <ul className={cnArchiveTariff("list")}>
                            <li className={cnArchiveTariff("item")}>
                                <p className={cnArchiveTariff("item-date")}>
                                    {"Дата"}
                                </p>
                                <p className={cnArchiveTariff("item-tariff")}>
                                    {"Тариф"}
                                </p>
                                <p className={cnArchiveTariff("item-sum")}>
                                    {"Сумма"}
                                </p>
                                <p className={cnArchiveTariff("item-period")}>
                                    {"Период"}
                                </p>
                            </li>
                            {isArchive &&
                                AllTariffs &&
                                AllTariffs.values.map((el, ind) => (
                                    <li
                                        key={ind + 1}
                                        className={cnArchiveTariff("item")}
                                    >
                                        <p
                                            className={cnArchiveTariff(
                                                "item-date",
                                            )}
                                        >
                                            {el.date}
                                        </p>
                                        <p
                                            className={cnArchiveTariff(
                                                "item-tariff",
                                            )}
                                        >
                                            {" "}
                                            <span>{el.tariff}</span>
                                            {`, ${el.repetition}`}
                                        </p>
                                        <p
                                            className={cnArchiveTariff(
                                                "item-sum",
                                            )}
                                        >
                                            {el.sum}
                                        </p>
                                        <p
                                            className={cnArchiveTariff(
                                                "item-period",
                                            )}
                                        >
                                            {el.period}
                                        </p>
                                    </li>
                                ))}
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    );
}


.\src\components\PersonalArea\style.scss
----------------------------------------
.personal-settings {
    display: flex;
    gap: 1.5rem;
    width: 100%;
    margin-bottom: 50px;

    &-left {
    }

    &-right {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        width: 100%;
    }
}

.personal-area {
    min-width: 320px;
    background: #fff;
    border-radius: 20px;

    &-photo {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 400px;
        overflow: hidden;
    }

    &-photo > img {
        max-width: 320px;
        // width: 320px;
        // height: auto;
        max-height: 400px;
    }

    &-change {
        position: absolute;
        top: 50%;
        left: 50%;
        display: none;
        padding: 2rem;
        background: #fff;
        border-radius: 20px;
        transform: translate(-50%, -50%);
    }

    &-change-active {
        display: block;
    }

    &-shield {
        position: absolute;
        inset: 0;
        display: none;
        width: 100%;
        height: 100%;
        background: rgb(69 69 69 / 70%);
    }

    &-shield-active {
        display: block;
    }

    &-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        padding: 1rem;
    }

    &-name {
        display: flex;
        justify-content: center;
        margin: 0.5rem auto 0;

        & > span {
            color: #2477f4;
            font-weight: 600;
            font-size: 24px;
            font-family: "Montserrat Alternates";
        }
    }

    &-btn {
        display: flex;
        gap: 8px;
        align-items: center;
        justify-content: center;
        margin: 1rem 3rem 0;
        padding: 6px 8px 6px 12px;
        background: #ffb800;
        border: 0;
        border-radius: 8px;
        cursor: pointer;

        & > span {
            color: #fff;
            font-weight: 600;
            font-size: 14px;
            font-family: "Montserrat Alternates";
        }
    }

    &-item {
        display: flex;
        gap: 0.5rem;
        align-items: center;

        & > span {
            color: #37476a;
            font-weight: 400;
            font-size: 16px;
            font-family: "Onest";
        }
    }

    &-input {
        position: absolute;
        visibility: hidden;
        opacity: 0;
    }

    &-label {
        width: 180px;
        cursor: pointer;
    }
}

.change-foto {
    &-range {
        width: 100%;
    }
}

.tariff-block {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    padding: 16px;
    background: #2477f4;
    border-radius: 24px;

    &-description {
        display: flex;
        gap: 2rem;

        &-list {
            display: flex;
            flex-direction: column;
        }
    }

    &-text {
        color: #fff;
        font-weight: 700;
        font-size: 32px;
        font-family: "Montserrat Alternates";
        letter-spacing: 0.64px;
    }

    &-text:first-child {
        margin-top: 0.5rem;
        margin-bottom: 1rem;
        color: #fff;
        font-size: 16px;
        letter-spacing: 0;
    }

    &-text:last-child {
        margin-top: 0.5rem;
        color: #fff;
        font-weight: 500;
        font-size: 16px;
        letter-spacing: 0.32px;
        // margin-bottom: 1rem;
    }

    &-text:nth-child(2)::first-letter {
        font-size: 40px;
    }

    &-btn {
        display: flex;
        gap: 8px;
        align-items: center;
        justify-content: center;
        padding: 8px 8px 8px 12px;
        background: #ffb800;
        border: 0;
        border-radius: 10px;

        & > span {
            color: #fff;
            font-weight: 600;
            font-size: 20px;
            font-family: "Montserrat Alternates";
        }
    }
}

.archive-tariff {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    width: 100%;
    padding: 1rem;
    font-family: "Onest";
    background: #fff;
    border-radius: 24px;

    &-header {
    }

    &-title {
        color: #37476a;
        font-weight: 600;
        font-size: 16px;
        font-family: "Montserrat Alternates";
    }

    &-btn {
        display: flex;
        gap: 4px;
        align-items: center;
        padding: 4px 10px 4px 4px;
        background: rgb(178 194 228 / 40%);
        border: 0;
        border-radius: 6px;

        & > span {
            color: #7c8eb5;
            font-weight: 500;
            font-size: 12px;
            font-family: "Montserrat Alternates";
            text-align: center;
        }
    }

    &-list {
        &-wrapper {
        }
    }

    &-header {
        display: flex;
        justify-content: space-between;
    }

    &-list {
        display: flex;
        flex-direction: column;
    }

    &-item:first-child {
        margin-bottom: 0.5rem;
        padding: 0;
        border-bottom: none;

        & > p {
            padding: 0;
            color: #4b5f8a;
            font-weight: 500;
            font-size: 16px;
            letter-spacing: 0.32px;
        }
    }

    &-item:last-child {
        border-bottom: none;
    }

    &-item {
        display: flex;
        padding-top: 8px;
        border-bottom: 1px solid rgb(178 194 228 / 50%);

        & > p {
            color: #7c8eb5;
            font-weight: 400;
            font-size: 16px;
            letter-spacing: 0.32px;
        }

        &-date,
        &-tariff,
        &-sum,
        &-period {
            width: 25%;
            padding: 8px 0;
            color: #7c8eb5;
            font-weight: 400;
            font-size: 16px;
            letter-spacing: 0.32px;
        }

        &-date {
        }

        &-tariff {
            & > span {
                color: #4b5f8a;
                font-weight: 700;
                text-transform: capitalize;
            }
        }

        &-sum {
        }

        &-period {
        }
    }
}


.\src\components\PersonalArea\LoadImage\index.tsx
-------------------------------------------------
import { cn } from "@bem-react/classname";
import { ReactSVG } from "react-svg";
import ReactAvatarEditor from "react-avatar-editor";

import "./style.scss";

import User from "./../icon/user.png";
import Arrow from "./../icon/arrow.svg";

type Props = {
    imageSrc?: string;
    scaleValue?: number;
    onScaleChange: Function;
    setEditorRef?: any;
    onCrop?: any;
    closePopup: Function;
};

export default function LoadImage({
    imageSrc,
    onCrop,
    setEditorRef,
    scaleValue,
    onScaleChange,
    closePopup,
}: Props) {
    const cnPersonalUser = cn("personal-area");
    const cnChangeFoto = cn("change-foto");
    const cnTariffBlock = cn("tariff-block");

    const changeScale = (scaleValueEvent: { target: { value: string } }) => {
        const scaleValue = parseFloat(scaleValueEvent.target.value);
        onScaleChange(scaleValue);
    };
    const cropImg = (e: { preventDefault: () => void }) => {
        // сюда вставить отправку на сервер
        e.preventDefault();
        onCrop();
        closePopup();
    };
    return (
        <>
            <ReactAvatarEditor
                scale={scaleValue}
                width={320}
                height={400}
                rotate={parseFloat("0")}
                image={imageSrc ? imageSrc : User}
                ref={setEditorRef}
                className={cnChangeFoto("avatar")}
            />
            <div>
                <input
                    name="scale"
                    type="range"
                    value={scaleValue}
                    onChange={changeScale}
                    min={"1"}
                    max="2"
                    step="0.01"
                    defaultValue="1"
                    className={cnChangeFoto("range")}
                />
            </div>
            <button onClick={cropImg} className={cnTariffBlock("btn")}>
                <span>{"Принять"}</span>
                <ReactSVG src={Arrow} />
            </button>
        </>
    );
}


.\src\components\PersonalArea\LoadImage\style.scss
--------------------------------------------------
.personal-area {
    min-width: 320px;
    overflow: hidden;
    background: #fff;
    border-radius: 20px;

    &-photo {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 400px;
        overflow: hidden;
    }

    &-photo > img {
        max-width: 320px;
        max-height: 400px;
    }

    &-change {
        position: absolute;
        top: 50%;
        left: 50%;
        display: none;
        padding: 2rem;
        background: #fff;
        border-radius: 20px;
        transform: translate(-50%, -50%);
    }

    &-change-active {
        display: block;
    }

    &-shield {
        position: absolute;
        inset: 0;
        display: none;
        width: 100%;
        height: 100%;
        background: rgb(69 69 69 / 70%);
    }

    &-shield-active {
        display: block;
    }

    &-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        padding: 1rem;
    }

    &-name {
        display: flex;
        justify-content: center;
        margin: 0.5rem auto 0;

        & > span {
            color: #2477f4;
            font-weight: 600;
            font-size: 24px;
            font-family: "Montserrat Alternates";
        }
    }

    &-btn {
        display: flex;
        gap: 8px;
        align-items: center;
        justify-content: center;
        margin: 1rem auto 0;
        padding: 6px 8px 6px 12px;
        background: #ffb800;
        border: 0;
        border-radius: 8px;

        & > span {
            color: #fff;
            font-weight: 600;
            font-size: 14px;
            font-family: "Montserrat Alternates";
        }
    }

    &-item {
        display: flex;
        gap: 0.5rem;
        align-items: center;

        & > span {
            color: #37476a;
            font-weight: 400;
            font-size: 16px;
            font-family: "Onest";
        }
    }

    &-input {
        position: absolute;
        visibility: hidden;
        opacity: 0;
    }

    &-label {
        width: 180px;
        cursor: pointer;
    }
}

.change-foto {
    &-range {
        width: 100%;
    }
}


.\src\components\PreviewBlock\index.tsx
---------------------------------------
import { useContext, useEffect, useMemo, useRef, useState } from "react";
import { ForwardedInput } from "../ui-kit/Input";
import Button from "../ui-kit/Button";
import { VideoUploadContext } from "../RepetitionComponents/RepetitionStart";
import ReactPlayer from "react-player";

import { ReactSVG } from "react-svg";
import { cn } from "@bem-react/classname";
import "./style.scss";
import rerecordIcon from "./icon/rerecoding.svg";
import videoRemoveIcon from "./icon/video-remove.svg";
import { MAX_MINUTES_FOR_VIDEO, MIN_MINUTES_FOR_VIDEO } from "../../constants";
import { convertSecondIntoPrettyDuration } from "../../@adapters/Time/convertSeconds";

type IPreviewBlock = {
    titleRerecordBtn?: string;
    titleContinueBtn?: string;
    titleHelpForInput?: string;
    onClickRerecordBtn: Function;
};

export function getPrettyDuration(seconds: number): number {
    return seconds ? Math.floor((seconds + 1) / 60) : 0;
}


function getPrettySizeFile(size: number, decimals = 2): string {
    if (size === 0) {
        return "0";
    } else {
        const info_for_step = 1024;
        var dm = decimals < 0 ? 0 : decimals;
        var sizes = ["байт", "КБ", "МБ", "ГБ", "ТБ"];
        var i = Math.floor(Math.log(size) / Math.log(info_for_step));
        return (
            parseFloat((size / Math.pow(info_for_step, i)).toFixed(dm)) +
            " " +
            sizes[i]
        );
    }
}

export default function PreviewBlock({
    titleRerecordBtn = "Загрузить другой файл",
    titleContinueBtn = "Начать анализ репетиции",
    titleHelpForInput = "Задайте название",
    onClickRerecordBtn,
}: IPreviewBlock) {
    const cnPreview = cn("cnPreview");

    // for input
    const [isFileNameValid, setFilenamevalid] = useState(true);
    const fileName = useRef<HTMLInputElement>(null);

    // get videofile from content
    const { currentFile, setCurrentInfoData, currentInfoData } =
        useContext(VideoUploadContext);

    const [sizeVideo, setSizeVideo] = useState(0);
    const [canMoved, setCanMoved] = useState(true);
    const [isNormDuration, setIsNormDuration] = useState(true);

    const videoRef = useRef<HTMLVideoElement | any>();
    let mediaSource = new MediaSource();
    const mimeCodec = "video/mp4";

    function sourceOpen() {
        // console.log(mediaSource.readyState); // open
        const sourceBuffer = mediaSource.addSourceBuffer(mimeCodec);

        const getBuff = async () => {
            const buf = await currentFile.arrayBuffer();
            sourceBuffer.appendBuffer(buf);

            sourceBuffer.addEventListener("updateend", () => {
                mediaSource.endOfStream();
                // console.log(mediaSource.readyState); // ended
            });
        };
        getBuff();
    }

    useEffect(() => {
        if ("MediaSource" in window && videoRef.current) {
            try {
                videoRef.current.srcObject = mediaSource;
                // console.log(videoRef.current)
            } catch (error) {
                videoRef.current.src = URL.createObjectURL(currentFile);
                // console.log("mediasource", error, videoRef.current)
            }
            mediaSource.addEventListener("sourceopen ", sourceOpen);
        } else {
            // console.error("Unsupported MIME type or codec: ", mimeCodec);
        }
    }, [videoRef.current]);

    const [durationVideo, setDurationVideo] = useState(
        Number(currentInfoData.duration),
    );
    console.log("currentInfoData.duration", currentInfoData.duration)

    const getDurationVideo = async (n: number) => {
        if (n && durationVideo === 0) {
            if (n === 0 && currentFile.size === 0) setDurationVideo(0);
            if (n === Infinity) setDurationVideo(0);
            else setDurationVideo(n);
        }
    };

    useEffect(() => {
        if (durationVideo > 0) {
            const normDuration = getPrettyDuration(durationVideo);
            if (
                normDuration > MAX_MINUTES_FOR_VIDEO ||
                normDuration < MIN_MINUTES_FOR_VIDEO
            ) {
                setIsNormDuration(false);
                setCanMoved(false);
            }
        }
    }, [durationVideo]);

    useEffect(() => {
        if (currentFile && currentFile.size > 0) {
            setSizeVideo(currentFile.size);
        }
    }, [currentFile]);

    const clickUpload = async () => {
        if (canMoved && isFileNameValid) {
            if (fileName.current?.value) {
                setCurrentInfoData({
                    title: fileName.current?.value,
                    duration: durationVideo + "",
                    description: "",
                    file: currentFile,
                });
            } else {
                setFilenamevalid(false);
            }
        }
    };

    return (
        <>
            <div className={cnPreview()}>
                <div className={cnPreview("row")}>
                    <div className={cnPreview("col")}>
                        <div className={cnPreview("video-block")}>
                            {currentFile && (
                                <ReactPlayer
                                    width={"100%"}
                                    height={"100%"}
                                    ref={videoRef}
                                    url={URL.createObjectURL(currentFile)}
                                    muted={true}
                                    controls={true}
                                    onDuration={getDurationVideo}
                                />
                            )}
                        </div>
                    </div>

                    <div className={cnPreview("col")}>
                        <div className={cnPreview("title")}>
                            <span className={cnPreview("title-videoname")}>
                                {currentFile.name}
                            </span>
                            <span className={cnPreview("title-characters")}>
                                {sizeVideo && getPrettySizeFile(sizeVideo)} •{" "}
                                {durationVideo &&
                                    convertSecondIntoPrettyDuration(
                                        durationVideo,
                                    )}
                            </span>
                        </div>
                        <div className={cnPreview("input-block")}>
                            <label>
                                <div className={cnPreview("input-block-title")}>
                                    <span
                                        className={cnPreview(
                                            "input-block-title-gray-bold",
                                        )}
                                    >
                                        {titleHelpForInput}:{" "}
                                    </span>
                                    <span
                                        className={cnPreview(
                                            "input-block-title-gray",
                                        )}
                                    >
                                        Не более 80 символов
                                    </span>
                                </div>
                                <ForwardedInput
                                    className={cnPreview("input", {
                                        wrong: !isFileNameValid,
                                    })}
                                    required
                                    placeholder="Название файла"
                                    maxLength={80}
                                    customref={fileName}
                                    invalid={!isFileNameValid}
                                    onBlur={(e) =>
                                        setFilenamevalid(
                                            e.target.checkValidity(),
                                        )
                                    }
                                />
                            </label>
                        </div>
                    </div>
                </div>

                <div
                    className={cnPreview("error", { visible: !isNormDuration })}
                >
                    <div className={cnPreview("row")}>
                        <div className={cnPreview("error-icon")}>
                            <ReactSVG src={videoRemoveIcon} />
                        </div>
                        <div className={cnPreview("col")}>
                            <span className={cnPreview("error-text-red")}>
                                Ой, кажется, это видео не подходит!
                            </span>
                            <span className={cnPreview("error-text")}>
                                Мы можем проанализировать ваше видео, только
                                если его длительность составляет от{" "}
                                {MIN_MINUTES_FOR_VIDEO} {"до "}
                                {MAX_MINUTES_FOR_VIDEO} минут.
                            </span>
                        </div>
                    </div>
                </div>

                <div className={cnPreview("row")}>
                    <div className={cnPreview("col")}>
                        <div className={cnPreview("btn")}>
                            <div className={cnPreview("btn")}>
                                <Button
                                    className={cnPreview("btn-gray")}
                                    onClick={() => onClickRerecordBtn()}
                                >
                                    <ReactSVG src={rerecordIcon} />
                                    {titleRerecordBtn}
                                </Button>
                            </div>
                        </div>
                    </div>
                    <div className={cnPreview("col")}>
                        <div className={cnPreview("btn")}>
                            <Button
                                className={cnPreview("btn-blue", {
                                    error: !canMoved,
                                })}
                                onClick={clickUpload}
                            >
                                {titleContinueBtn}
                            </Button>
                        </div>
                    </div>
                </div>
            </div>
        </>
    );
}


.\src\components\PreviewBlock\style.scss
----------------------------------------
.cnPreview {
    &-row {
        display: flex;
        flex-flow: row nowrap;
        gap: 15px;
        justify-content: center;
        padding-bottom: 8px;
    }

    &-col {
        display: flex;
        flex-flow: column nowrap;
        gap: 10px;
        align-items: flex-start;
        justify-content: start;
        width: 100%;
    }

    &-title {
        display: flex;
        flex-flow: column nowrap;
        gap: 8px;

        &-videoname {
            color: #000;
            font-weight: 500;
            font-size: 16px;
            font-family: "Onest";
            font-style: normal;
            line-height: 20px;
        }

        &-characters {
            color: #7c8eb5;
            font-weight: 400;
            font-size: 16px;
            font-family: "Onest";
            font-style: normal;
            line-height: 20px;
        }
    }

    &-input {
        color: #37476a;
        font-weight: 400;
        font-size: 16px;
        font-family: "Onest";
        font-style: normal;
        line-height: 20px;
        border: 1px solid #b2c2e4;
        border-color: #b2c2e4;
        border-radius: 12px;

        &_wrong{
            border: 2px solid #FF4E78;
        }
    }

    &-input::placeholder{
        color: #37476A;
        font-weight: 400;
        font-size: 16px;
        font-family: 'Onest';
        font-style: normal;
        line-height: 20px;
    }

    &-input-block {
        width: 100%;
        text-align: start;

        &-title {
            font-family: "Montserrat Alternates";
            font-style: normal;

            &-gray {
                @extend .cnPreview-input-block-title;

                color: rgb(124 142 181 / 50%);
                font-weight: 500;
                font-size: 12px;
                line-height: 15px;

                &-bold {
                    @extend .cnPreview-input-block-title-gray;

                    color: #7c8eb5;
                    font-weight: 600;
                    font-size: 16px;
                    line-height: 20px;
                }
            }
        }
    }

    &-video-block {
        width: 100%;
        max-width: 600px;
        height: 100%;
    }

    &-btn {
        display: flex;
        flex-flow: row nowrap;
        gap:10px;
        align-items: center;
        justify-content: center;
        width: 100%;
        height: 40px;

        &-text {
            font-weight: 600;
            font-size: 16px;
            font-family: "Montserrat Alternates";
            font-style: normal;
            line-height: 20px;
        }

        &-gray {
            @extend .cnPreview-btn-text;
            @extend .cnPreview-btn;

            width: 100%;
            color: #2477f4;
            background: #f3f5f9;
            border-radius: 9px;
        }

        &-blue {
            @extend .cnPreview-btn-text;
            @extend .cnPreview-btn;

            width: 100%;
            border-radius: 9px;

            &_error{
                cursor: not-allowed;
            }
        }
    }

    &-error{
        display: none;
        padding: 10px;
        background-color: #ffff;
        border-radius: 16px;

        &-icon{

        }

        &-text{
            color: #7C8EB5;
            font-size: 16px;
            font-family: "Onest";

            &-red{
                color: #FF4E78;
                font-weight: 500;
                font-size: 20px;
                font-family: "Onest";

            }
        }

        &_visible{
            display: block;
        }

    }

    &-loading{
        display: flex;
        flex-flow: column nowrap;
        // width: 100%;
        gap: 10px;
        align-items: center;
        justify-content: center;

        &-title{
            color: #37476A;
            font-weight: 600;
            font-size: 24px;
            font-family: "Montserrat Alternates";

            &-error{
                color: #FF4E78;
                font-weight: 600;
                font-size: 24px;
                font-family: "Montserrat Alternates";
            }
        }

        &-description{
            color: #7C8EB5;
            font-weight: 500;
            font-size: 16px;
            font-family: "Montserrat Alternates";
        }
    }
}


.\src\components\ProfilePreview\index.tsx
-----------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";
import NoPhoto from "./assets/no-photo.png";

type Props = {
    imageUrl?: string;
    displayName?: string;
};

const cnProfilePreview = cn("profile-preview");

export default function ProfilePreview(props: Props) {
    return (
        <div className={cnProfilePreview()}>
            <img
                className={cnProfilePreview("photo")}
                src={props.imageUrl || NoPhoto}
                alt="Avatar"
            />
            <div className={cnProfilePreview("text")}>
                {props.displayName ? (
                    <>
                        <span>Добрый день,</span>
                        <span
                            className={cnProfilePreview("text", {
                                username: true,
                            })}
                        >
                            {props.displayName}
                        </span>
                    </>
                ) : (
                    <span>Добрый день!</span>
                )}
            </div>
        </div>
    );
}


.\src\components\ProfilePreview\style.scss
------------------------------------------
.profile-preview {
    display: flex;
    align-items: center;

    &-photo {
        width: 60px;
        height: 60px;
        margin: 0 16px 0 0;
        object-fit: cover;
        border: 4px solid white;
        border-radius: 100%;
    }

    &-text {
        display: flex;
        flex-direction: column;
        color: #7c8eb5;
        font-weight: 600;
        font-size: 1rem;
        font-family: "Montserrat Alternates";
        font-style: normal;
        line-height: normal;

        &_username {
            padding: 5px 0;
            color: #2477f4;
            font-weight: 600;
            font-size: 1.375rem;
        }
    }
}


.\src\components\RadioBtnQuestion\index.tsx
-------------------------------------------
import { Fragment, useRef, useState } from "react";
import "./style.scss";
import { cn } from "@bem-react/classname";
import { ReactSVG } from "react-svg";
import svgg from "../Menu/icons/book.svg";

import { IQuestion, typeQuestion } from "../../models/survey";
import { LocalAnswer } from "../../store/slices/survey";

type Props = {
    question: IQuestion;
    addAnswers: Function;
};

export default function RadioBtnQuestion(props: Props) {
    const cnMain = cn("radio-main");

    const [selectedOption, setSelectedOption] = useState<string>();
    const anotherValue = useRef<HTMLInputElement>(null);

    function handleChange(id: string) {
        setSelectedOption(id);
        let isAnother = props.question.choices.filter(el=>el.id === id)[0].another;

        if (!isAnother){
            if(anotherValue && anotherValue.current) anotherValue.current!.value = "";
            props.addAnswers({
                id_question: props.question.id,
                type_question: typeQuestion.radio,
                id_choices: [id],
                another_choices: "",
            } as LocalAnswer);
        }
    }

    const changeAnotherAnswer = (id: string) => {
        if(anotherValue && anotherValue.current!.value.length !== 0){
            props.addAnswers({
                id_question: props.question.id,
                type_question: typeQuestion.radio,
                id_choices: [id],
                another_choices: anotherValue.current!.value,
            } as LocalAnswer);
        }
    }

    return (
        <div className={cnMain()}>
            <h3 className={cnMain("title")}>{props.question.title}</h3>
            <div className={cnMain(`${props.question.type_choice}`)}>
                {props.question.choices.map((el, index) => (
                    <Fragment key={index}>
                        {!el.another && (
                            <div
                                key={el.id}
                                className={cnMain(
                                    `${props.question.type_choice}-item`,
                                    {
                                        checked: selectedOption === el.id,
                                    }
                                )}
                            >
                                {props.question.icons && (
                                    <ReactSVG
                                        src={svgg}
                                        className={cnMain(
                                            `${props.question.type_choice}-item-icon`
                                        )}
                                    />
                                )}

                                <label
                                    className={cnMain(
                                        `${props.question.type_choice}-item-label`
                                    )}
                                >
                                    <input
                                        type="radio"
                                        value={el.id}
                                        checked={selectedOption === el.id}
                                        onChange={() => handleChange(el.id)}
                                        className={cnMain(
                                            `${props.question.type_choice}-item-label-radio`
                                        )}
                                    />
                                    <div
                                        className={cnMain(
                                            `${props.question.type_choice}-item-label-custom-radio__label`
                                        )}
                                    >
                                        <strong>{el.title}</strong>
                                    </div>
                                </label>
                            </div>
                        )}
                        {el.another && (
                            <div className={cnMain("another")}>
                                <label className={cnMain("another-label")}>
                                    <input
                                        type="radio"
                                        value={el.id}
                                        className={cnMain(
                                            "another-label-radio"
                                        )}
                                        checked={selectedOption === el.id}
                                        onChange={() => handleChange(el.id)}
                                    />
                                    <div
                                        className={cnMain(
                                            "another-label-custom-radio__label"
                                        )}
                                    >
                                        <strong>Другое:</strong>
                                    </div>
                                    <input
                                        type="text"
                                        placeholder={el.title}
                                        className={cnMain(
                                            "another-label-input-text"
                                        )}
                                        disabled={selectedOption !== el.id}
                                        ref={anotherValue}
                                        onChange={()=>changeAnotherAnswer(el.id)}
                                    />
                                </label>
                            </div>
                        )}
                    </Fragment>
                ))}
            </div>
        </div>
    );
}


.\src\components\RadioBtnQuestion\style.scss
--------------------------------------------
.radio-main{
    font-size: 18px;
    line-height: 20px;

    &-title{
        padding-bottom: 10px;
        color: #031C3D;
        font-weight: 600;
        font-size: 20px;
        font-family: 'Montserrat Alternates';
        font-style: normal;
        line-height: 24px;
    }

    &-col-answers{
        display: grid;
        grid-template-columns: 1fr  1fr;
        gap: 2px;
        justify-items: start;

        &-item{
            display: flex;
            flex-direction: row;
            gap: 12px;
            align-items: center;
            justify-content: center;
            padding-top: 10px;
            color: #7C8EB5;
            font-family: 'Montserrat Alternates';

            &-icon{
                width: 24px;
                height: 24px;
            }

            &-label{
                font-weight: 600;
                font-size:  1em;
                font-family: 'Montserrat Alternates';
                font-style: normal;
                line-height:  1em;
                cursor: pointer;
                user-select: none;

                    // &-radio
                &-radio:checked, &-radio:not(:checked) {
                    display: none;
                }
    
                &-radio:checked + &-custom-radio__label, &-radio:not(:checked) + &-custom-radio__label {
                    position: relative;
                    display: inline-block;
                    margin-bottom: 5px;
                    padding: 6px 0 0 40px;
                }
    
                &-radio:not(:checked) + &-custom-radio__label::before  {
                    position: absolute;
                    top: 0;
                    left: 0;
                    width: 28px;
                    height: 28px;
                    border: 2px solid #B2C2E4;
                    border-radius: 8px;
                    content: '';

                }

                &-radio:checked + &-custom-radio__label::before {
                    position: absolute;
                    top: 0;
                    left: 0;
                    width: 32px;
                    height: 32px;
                    background: #2477F4;
                    border-radius: 8px;
                    outline: 2px solid #FFF; 
                    outline-offset: -4px;
                    content: ''; 
                    
                }
    
                &-radio:checked + &-custom-radio__label::after {
                    // content: '';
                    // width: 24px;
                    // // width: 1.3em;
                    // height: 24px;
                    // left: 4px;
                    // top: 4px;
                    // position: absolute;
                    // background: #2477F4;
                    // border-radius: 6px;
                    // // z-index: 1;

                    // background-repeat: no-repeat;
                    // background-position: center center;
                    // background-size: 50% 50%;
                    // background-image: url("./images/rectangle-answer.png");
            
                }    
            }
        }

        &_checked{
            color: #FFF;
            background: #2477F4;
            box-shadow: 0 0 14px rgb(124 142 181 / 25%);
            fill: #FFF;
        }
    }

    &-block-answers{
        display: flex;
        flex-flow: row wrap;
        gap: 12px;
        align-items: center;
        width: 100%;

        &-item{
            display: flex;
            flex-direction: row nowrap;
            gap: 12px;
            align-items: flex-start;
            justify-content: start;
            width: 100%;
            color: #7C8EB5;

            // background: red;
            border-radius: 9px;
            // fill: #7C8EB5;

            &-icon{
                width: 24px;
                height: 24px;
            }

            &-label{
                font-weight: 600;
                font-size:  1em;
                font-family: 'Montserrat Alternates';
                font-style: normal;
                line-height:  1em;
                cursor: pointer;
                user-select: none;

                &-radio{
                    display: none;
                }

                &-radio:checked, &-radio:not(:checked) {
                    display: none;
                }
    
                &-radio:checked + &-custom-radio__label, &-radio:not(:checked) + &-custom-radio__label {
                    position: relative;
                    display: inline-block;
                    margin-bottom: 5px;
                    padding: 6px 0 0 40px;
                }
    
                &-radio:not(:checked) + &-custom-radio__label::before  {
                    position: absolute;
                    top: 0;
                    left: 0;
                    width: 28px;
                    height: 28px;
                    border: 2px solid #B2C2E4;
                    border-radius: 8px;
                    content: '';

                }

                &-radio:checked + &-custom-radio__label::before {
                    position: absolute;
                    top: 0;
                    left: 0;
                    width: 32px;
                    height: 32px;
                    background: #2477F4;
                    border-radius: 8px;
                    outline: 2px solid #FFF; 
                    outline-offset: -4px;
                    content: ''; 
                    
                }
            }

        }
    }

    &-icon-rows{
        display: flex;
        flex-flow: row wrap;
        gap: 12px;
        align-items: center;
        width: 100%;

        &-item{
            display: flex;
            flex-direction: row;
            gap: 12px;
            align-items: center;
            justify-content: center;
            padding: 10px;
            color: #7C8EB5;
            background: rgb(36 119 244 / 10%);
            border-radius: 9px;
            fill: #7C8EB5;

            &-icon{
                display: inline;
                width: 24px;
                height: 24px;
            }

            &-label{
                font-weight: 600;
                font-size:  1em;
                font-family: 'Montserrat Alternates';
                font-style: normal;
                line-height:  1em;
                cursor: pointer;
                user-select: none;

                &-radio{
                    display: none;
                }

            }

            &_checked{
                color: #FFF;
                background: #2477F4;
                box-shadow: 0 0 14px rgb(124 142 181 / 25%);
                fill: #FFF;
            }

        }
    }

    &-another{
        width: 100%;
        padding: 12px;
        font-family: 'Montserrat Alternates';

        &-label{
            display: flex;
            flex-flow: row wrap;
            gap: 10px;
            align-items: center;
            justify-content: flex-start;
            color: #7C8EB5;
            font-weight: 600;
            font-size: 1em;
            font-style: normal;
            line-height: 1em;


            &-radio:checked, &-radio:not(:checked) {
                display: none;
            }

            &-radio:checked + &-custom-radio__label, &-radio:not(:checked) + &-custom-radio__label {
                position: relative;
                display: inline-block;
                margin-bottom: 5px;
                padding: 6px 0 0 40px;
            }

            &-radio:not(:checked) + &-custom-radio__label::before  {
                position: absolute;
                top: 0;
                left: 0;
                width: 28px;
                height: 28px;
                border: 2px solid #B2C2E4;
                border-radius: 8px;
                content: '';

            }

            &-radio:checked + &-custom-radio__label::before {
                position: absolute;
                top: 0;
                left: 0;
                width: 32px;
                height: 32px;
                background: #2477F4;
                border-radius: 8px;
                outline: 2px solid #FFF; 
                outline-offset: -4px;
                content: ''; 
                
            }
    
            &-input-text{
                flex-grow: 1;
                align-self: stretch;
                height: 50px;
                padding-left: 1em;
                color: #7C8EB5;
                font-size: 1em;
                border: 2px solid #B2C2E4;
                border-radius: 16px;
            }

            &-input-text::placeholder{
                color: #7C8EB5;
                font-weight: 500;
                font-size: 1em;
                font-style: normal;
            }
        }
        
    }
}

  

.\src\components\RadioBtnQuestion\RadioItem\index.tsx
-----------------------------------------------------
import React, { useState } from "react";
import { cn } from "@bem-react/classname";
import "./style.scss";

type Props = {
    idItem: number;
    titleItem: string;
    addAnswers: Function;
    currentIdItem: number;
}


export default function RadioItem(props: Props) {
    const cnRadioItem = cn("RadioItem");

    function handleChange(id: number) {
        props.addAnswers(id);
    }

    return (
        <div>
            <div
                className={cnRadioItem(`col-answers-item`, {
                    checked: props.idItem === props.currentIdItem,
                })}
            >

                <label
                    className={cnRadioItem(
                        `col-answers-item-label`
                    )}
                >
                    <input
                        type="radio"
                        value={props.idItem}
                        checked={props.idItem === props.currentIdItem}
                        onChange={() => handleChange(props.idItem)}
                        className={cnRadioItem(
                            `col-answers-item-label-radio`
                        )}
                    />
                    <div
                        className={cnRadioItem(
                            `col-answers-item-label-custom-radio__label`
                        )}
                    >
                        <strong>{props.titleItem}</strong>
                    </div>
                </label>
            </div>
        </div>
    );
}


.\src\components\RadioBtnQuestion\RadioItem\style.scss
------------------------------------------------------
.RadioItem {
    &-col-answers {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2px;
        justify-items: start;

        &-item {
            display: flex;
            flex-direction: row;
            gap: 12px;
            align-items: center;
            justify-content: start;
            padding-top: 10px;
            color: #7C8EB5;
            font-family: 'Montserrat Alternates';

            &-icon {
                width: 24px;
                height: 24px;
            }

            &-label {
                font-weight: 500;
                font-size: 16px;
                font-family: 'Montserrat Alternates';
                font-style: normal;
                line-height: 20px;
                cursor: pointer;
                user-select: none;

                // &-radio
                &-radio:checked,
                &-radio:not(:checked) {
                    display: none;
                }

                &-radio:checked+&-custom-radio__label,
                &-radio:not(:checked)+&-custom-radio__label {
                    position: relative;
                    display: inline-block;
                    margin-bottom: 5px;
                    padding: 6px 0 0 40px;
                }

                &-radio:not(:checked)+&-custom-radio__label::before {
                    position: absolute;
                    top: 0;
                    left: 0;
                    width: 28px;
                    height: 28px;
                    border: 2px solid #B2C2E4;
                    border-radius: 8px;
                    content: '';

                }

                &-radio:checked+&-custom-radio__label::before {
                    position: absolute;
                    top: 0;
                    left: 0;
                    width: 32px;
                    height: 32px;
                    background: #2477F4;
                    border-radius: 8px;
                    outline: 2px solid #FFF;
                    outline-offset: -4px;
                    content: '';

                }

                &-radio:checked+&-custom-radio__label::after {
                    // content: '';
                    // width: 24px;
                    // // width: 1.3em;
                    // height: 24px;
                    // left: 4px;
                    // top: 4px;
                    // position: absolute;
                    // background: #2477F4;
                    // border-radius: 6px;
                    // // z-index: 1;

                    // background-repeat: no-repeat;
                    // background-position: center center;
                    // background-size: 50% 50%;
                    // background-image: url("./images/rectangle-answer.png");

                }
            }
        }

        &_checked {
            color: #031C3D;
            background: #2477F4;
            box-shadow: 0 0 14px rgb(124 142 181 / 25%);
            fill: #FFF;
        }
    }
}

.\src\components\RecommendationDairyGraph\index.tsx
---------------------------------------------------
import React, { useState } from "react";
import { cn } from "@bem-react/classname";

import "./style.scss";
import { ReactSVG } from "react-svg";

type Props = {
    icon?: string;
    text?: string;
};
export default function RecommendationDairyGraph(props: Props) {
    const cnRec = cn("Recommend");
    const stateBtn = ["Свернуть", "Развернуть"];
    const [isShow, setIsShow] = useState(true);

    return (
        <div className={cnRec()}>
            <div className={cnRec("header")}>
                <div className={cnRec("nameIcon")}>
                    {props.icon && (
                        <ReactSVG src={props.icon} className={cnRec("icon")} />
                    )}
                    <span className={cnRec("title")}>Рекомендации</span>
                </div>
                <span
                    onClick={() => setIsShow((prev) => !prev)}
                    className={cnRec("btn")}
                >
                    {isShow ? stateBtn[0] : stateBtn[1]}
                </span>
            </div>
            {isShow && (
                <div className={cnRec("content")}>
                    {/* сюда надо вставить от БЕ возврат когда будет */}
                    <div className={cnRec("text")}>
                        {/* За рассматриваемый период Ваш общий результат подготовки
                        к публичному выступлению улучшился на 10 процентов!.. */}
                        {
                            "За рассматриваемый период Ваш общий результат подготовки к публичному выступлению не изменился. "
                        }
                    </div>
                    {/* сюда надо вставить от БЕ возврат когда будет */}
                    <div className={cnRec("text1")}>
                        {/* Этому способствовало повышение ясности и динамичности
                        выступления. Между тем, наблюдаются низкая
                        информативность и аргументированность выступления.
                        Отмечается не значительная динамика убедительности
                        выступления. Здесь следует обратить внимание на
                        согласованность эмоций, выражаемых по различным
                        коммуникативным каналам. */}
                        {
                            "Возможно это связано с отсутствием репетиций (Возможно это связано с отсутствием статистики по Вашим репетициям)."
                        }
                    </div>
                    {/* сюда надо вставить от БЕ возврат когда будет */}
                    {/* <div className={cnRec("text1")}>
                        Вам следует внимательнее отнестись к{" "}
                        <b className={cnRec("textDark")}>нашим рекомендациям</b>{" "}
                        по улучшению{" "}
                        <b className={cnRec("textBlue")}>
                            связности выступления
                        </b>{" "}
                        и{" "}
                        <b className={cnRec("textBlue")}>
                            соблюдению коммуникативных норм
                        </b>
                        .
                    </div> */}
                </div>
            )}
        </div>
    );
}


.\src\components\RecommendationDairyGraph\style.scss
----------------------------------------------------
.Recommend{
  display: flex;
  flex-direction: column;
  align-self: stretch;
  margin: 16px 0 0;
  padding: 16px;
  background: #F7FAFF;

  &-header {
    display: flex;
    flex-flow: row nowrap;
    gap: 10px;
    align-items: center;
    justify-content: space-between;
    padding: 10px 0;
  }

  &-nameIcon{
    display: flex;

    svg{
      display: flex;
      align-items: center;
      justify-content: center;
    }
  }

  &-btn{
    color: #2477F4;
    font-weight: 500;
    font-size: 16px;
    font-family: "Montserrat Alternates";
    font-style: normal;
    line-height: normal;
    cursor: pointer;
  }

  &-title{
    padding: 0 10px;
    color: #37476A;
    font-weight: 600;
    font-size: 16px;
    font-family: "Montserrat Alternates";
    font-style: normal;
    line-height: normal;
  }

  &-content{
    display: flex;
    flex-direction: column;
    color: #37476A;
    font-size: 16px;
    font-family: "Onest";
    font-style: normal;
    line-height: normal;
  }

  &-text{
    font-weight: 500;
  }

  &-text1{
    margin:  16px 0 0;
    font-weight: 400;
  }

  &-textDark{
    color: #37476A;
    font-weight: 500;
  }

  &-textBlue{
    color: #2477F4;
    font-weight: 500;
  }

}

.\src\components\RepetitionComponents\ListInput\index.tsx
---------------------------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";
import { ReactNode, useEffect, useState } from "react";
import { ReactSVG } from "react-svg";
import deleteBtn from "./assets/delete-btn.svg";
import plusBtn from "./assets/plus-btn.svg";

type Props = {
    saveResultPlan: Function;
};

const LIMIT_POINT_PLAN = 20;

export default function ListInput(props: Props) {
    const ListInputStyle = cn("ListInput");

    const [inputValues, setInputValues] = useState<Array<String>>(
        new Array(1).fill("")
    );

    const addInput = () => {
        if (inputValues.length < LIMIT_POINT_PLAN)
            setInputValues((inputValues) => [...inputValues, ""]);
    };

    const removeInput = (index: number) => {
        if (inputValues.length > 1) {
            let temp = [
                ...inputValues.slice(0, index),
                ...inputValues.slice(index + 1),
            ];
            setInputValues(temp);
        }
    };

    const addInputValues = (index: number, value: string) => {
        let temp = [...inputValues];
        temp[index] = value;
        setInputValues(temp);
    };

    useEffect(() => {
        props.saveResultPlan(inputValues);
    }, [inputValues]);

    return (
        <div className={ListInputStyle()}>
            <div className={ListInputStyle("list-block-input")}>
                {inputValues.map((el, id) => (
                    <div key={id} className={ListInputStyle("block-input")} >
                        <span className={ListInputStyle("index")}>
                            {id + 1}:
                        </span>
                        <input
                            id={"" + id}
                            key={id}
                            className={ListInputStyle("input")}
                            value={el + ""}
                            onChange={(e) => addInputValues(id, e.target.value)}
                        />

                        <div className={ListInputStyle("block-input-btn")}>
                            <ReactSVG
                                src={deleteBtn}
                                onClick={() => removeInput(id)}
                            />
                        </div>
                    </div>
                ))}
            </div>

            <button
                className={ListInputStyle("button")}
                onClick={() => addInput()}
            >
                <ReactSVG src={plusBtn} />
                Добавить еще пункт
            </button>
        </div>
    );
}


.\src\components\RepetitionComponents\ListInput\style.scss
----------------------------------------------------------
.ListInput {
    display: flex;
    flex-flow: column nowrap;
    font-size: 20px;
    font-family: 'Montserrat Alternates';
    font-style: normal;
    line-height: 24px;

    &-index{
        color: #37476A;
        font-weight: 600;
    }


    &-list-block-input {
        flex-flow: column nowrap;
    }

    &-block-input {
        display: grid;
        grid-template-columns: 40px 1fr 40px;
        gap:10px;
        align-items: center;
        justify-items: start;
        width: 100%;
        height: 40px;
        margin-top: 5px;

        &-input{
            width: 100%;
            height: 100%;

        }

        &-btn{
            padding-left: 5px;
            cursor: pointer;
        }
    }

    &-input {
        width: 100%;
        height: 100%;
        padding: 0 16px;
        color: #37476A;
        font-weight: 500;
        font-size: 16px;
        font-family: 'Montserrat Alternates';
        font-style: normal;
        line-height: 20px;
        border: 2px solid #B2C2E4;
        border-radius: 8px;
    }

    &-button{
        display: flex;
        flex-flow: row nowrap;
        gap:10px;
        width: 244px;
        height: 40px;
        margin-top: 20px;
        padding: 8px;
        color: #FFF;
        font-weight: 600;
        font-size: 16px;
        line-height: 20px;
        background: #FFB800;
        border: none;
        border-radius: 9px;
    }

}

.\src\components\RepetitionComponents\RepetitionStart\index.tsx
---------------------------------------------------------------
import {
    Dispatch,
    SetStateAction,
    createContext,
    useEffect,
    useState,
} from "react";

import { Link, useNavigate } from "react-router-dom";

import ModalWindow from "../../ModalWindow/ModalWindow";
import Upload from "../../Upload";
import PreviewBlock from "../../PreviewBlock";

import { cn } from "@bem-react/classname";
import "./style.scss";

import { ReactSVG } from "react-svg";
import downloand_btn from "./img/download_btn.svg";
import online_btn from "./img/online_btn.svg";
import notice_btn from "../Setup/icons/note_icon.svg";
import loadingPic from "./img/loading.svg";

import { useSendVideoMutation } from "../../../store/api/userVideo";
import RoutesEnum from "../../../models/routes";
import {
    MAX_MINUTES_FOR_VIDEO,
    MIN_MINUTES_FOR_VIDEO,
} from "../../../constants";

export interface IInfoVideo {
    title: string;
    duration: string;
    description: string;
    file: File;
}

export const initialInfoVideo: IInfoVideo = {
    title: "",
    duration: "",
    description: "",
    file: new File([], "empty"),
};

export const VideoUploadContext = createContext({
    currentFile: new File([], "empty"),
    setCurrentFile: (() => {}) as Dispatch<SetStateAction<File>>,
    currentInfoData: initialInfoVideo,
    setCurrentInfoData: (() => {}) as Dispatch<SetStateAction<IInfoVideo>>,
});

export default function RepetitionStart() {
    const cnRepetitionStart = cn("RepetitionStart");

    const [isModal, setModal] = useState(false);
    const [currentFile, setCurrentFile] = useState<File>(new File([], "empty"));

    const showModal = async () => {
        setCurrentFile(new File([], "empty"));
        setModal(true);
    };

    const closeModal = () => {
        setCurrentFile(new File([], "empty"));
        setModal(false);
    };

    // loading modal
    const [isLoadingModal, setIsLoadingModal] = useState(false);
    const [currentInfoData, setCurrentInfoData] =
        useState<IInfoVideo>(initialInfoVideo);

    useEffect(() => {
        if (currentInfoData && currentInfoData.title.length > 0) {
            sendVideoData();
            closeModal();
            showLoadingModal();
        }
    }, [currentInfoData]);

    const [videoSendRequest, videoSendResponse] = useSendVideoMutation();
    const { isLoading, isSuccess, isError } = videoSendResponse;
    const [isErrorWithSuccess, setIsErrorWithSuccess] = useState(false);

    const navigate = useNavigate();

    const sendVideoData = async () => {
        if (currentInfoData) {
            await videoSendRequest(currentInfoData);
            // navigate(RoutesEnum.DIARY);
        }
    };

    const showLoadingModal = async () => {
        setIsLoadingModal(true);
    };

    const closeLoadingModal = () => {
        setIsLoadingModal(false);
    };

    // answers from back
    useEffect(() => {
        if (isSuccess) {
            const data = videoSendResponse.data;
            if (data.success) {
                setCurrentFile(new File([], "empty"));
                setCurrentInfoData(initialInfoVideo);
            } else {
                setIsErrorWithSuccess(true);
                setCurrentFile(new File([], "empty"));
                setCurrentInfoData(initialInfoVideo);
            }
        }
    }, [isSuccess]);

    useEffect(() => {
        if (isError) {
            const error = videoSendResponse.error as Response;
            console.log(videoSendResponse.error);
            setCurrentFile(new File([], "empty"));
            setCurrentInfoData(initialInfoVideo);
        }
    }, [isError]);

    // const videoData  = useGetVideoQuery("feb81d20-2bb0-4622-b41a-3c6d50c6b3f8");

    return (
        <div className={cnRepetitionStart()}>
            <div className={cnRepetitionStart("text")}>
                <div className={cnRepetitionStart("text-dark-blue")}>
                    <ReactSVG src={notice_btn} />
                    Подготовка к репетиции
                </div>
                <div className={cnRepetitionStart("text-black")}>
                    Запишите репетицию прямо сейчас или загрузите имеющееся
                    видео.
                </div>
                <div className={cnRepetitionStart("text-gray")}>
                    <span className={cnRepetitionStart("text-gray-bold")}>
                        Онлайн запись репетиции:
                    </span>{" "}
                    при наличии веб-камеры и микрофона вы можете репетировать в
                    режиме онлайн прямо из сервиса.
                </div>
                <div className={cnRepetitionStart("text-gray")}>
                    <span className={cnRepetitionStart("text-gray-bold")}>
                        Загрузка репетиции:
                    </span>{" "}
                    если у вас имеется готовое видео, которое вы хотите
                    проанализировать - просто загрузите его с устройства.
                </div>
                <div className={cnRepetitionStart("text-blue")}>
                    Минимальная длительность видео - {MIN_MINUTES_FOR_VIDEO}{" "}
                    минуты, максимальная - {MAX_MINUTES_FOR_VIDEO}
                    {" минут"}.
                </div>
            </div>
            <div className={cnRepetitionStart("btn-block")}>
                <div className={cnRepetitionStart("btn-block-link")}>
                    <Link to="/repetition/setup">
                        <ReactSVG
                            src={online_btn}
                            className={cnRepetitionStart("btn-block-link-svg")}
                        />
                    </Link>
                </div>
                <div className={cnRepetitionStart("btn-block-link")}>
                    <ReactSVG
                        src={downloand_btn}
                        className={cnRepetitionStart("btn-block-link-svg")}
                        onClick={() => showModal()}
                    />
                </div>
            </div>

            <ModalWindow
                isVisible={isModal}
                onClose={closeModal}
                title={
                    currentFile && currentFile.size !== 0
                        ? "Предпросмотр загруженной репетиции"
                        : "Загрузка репетиции"
                }
            >
                <VideoUploadContext.Provider
                    value={{
                        currentFile,
                        setCurrentFile,
                        currentInfoData,
                        setCurrentInfoData,
                    }}
                >
                    {((currentFile && currentFile.size === 0) ||
                        !currentFile) && <Upload />}
                    {currentFile && currentFile.size !== 0 && (
                        <PreviewBlock
                            onClickRerecordBtn={() =>
                                setCurrentFile(new File([], ""))
                            }
                        />
                    )}
                </VideoUploadContext.Provider>
            </ModalWindow>

            <ModalWindow
                isVisible={isLoadingModal}
                onClose={closeLoadingModal}
                closeOnClickOutside={!isLoading || isErrorWithSuccess}
            >
                {(isLoading || isErrorWithSuccess || isError) && (
                    <div className={cnRepetitionStart("loading")}>
                        <ReactSVG
                            src={loadingPic}
                            className={cnRepetitionStart("loading-img")}
                        />
                        {isLoading && !(isErrorWithSuccess || isError) && (
                            <>
                                <div
                                    className={cnRepetitionStart(
                                        "loading-title",
                                    )}
                                >
                                    Идет загрузка видео{" "}
                                    <span
                                        className={cnRepetitionStart(
                                            "loading-title-animate",
                                        )}
                                    >
                                        {" "}
                                        . . .
                                    </span>
                                </div>
                                <div
                                    className={cnRepetitionStart(
                                        "loading-description",
                                    )}
                                >
                                    Пожалуйста, не закрывайте вкладку до
                                    окончания загрузки.
                                </div>
                            </>
                        )}
                        {(isErrorWithSuccess || isError) && (
                            <>
                                <div
                                    className={cnRepetitionStart(
                                        "loading-title-error",
                                    )}
                                >
                                    Произошла ошибка, попробуйте еще раз
                                </div>
                            </>
                        )}
                    </div>
                )}
                {isSuccess && !isErrorWithSuccess && (
                    <div className={cnRepetitionStart("loading")}>
                        <ReactSVG
                            src={loadingPic}
                            className={cnRepetitionStart("loading-img")}
                        />
                        <>
                            <div className={cnRepetitionStart("loading-title")}>
                                Загрузка видео успешно завершена и отправлена на
                                анализ
                            </div>
                            <div
                                className={cnRepetitionStart(
                                    "loading-description",
                                )}
                            >
                                По его окончании вы сможете ознакомиться с
                                результатами в разделе{" "}
                                <span
                                    className={cnRepetitionStart(
                                        "loading-title-link",
                                    )}
                                    onClick={() =>
                                        navigate(RoutesEnum.DIARY, {
                                            state: { onAnalisys: true },
                                        })
                                    }
                                >
                                    Дневник
                                </span>
                            </div>
                        </>
                    </div>
                )}
            </ModalWindow>
        </div>
    );
}


.\src\components\RepetitionComponents\RepetitionStart\style.scss
----------------------------------------------------------------
.RepetitionStart {
    width: 100%;
    font-size: 16px;
    line-height: 20px;


    &-text {
        display: flex;
        flex-flow: column nowrap;
        gap: 8px;
        padding: 10px;
        padding-bottom: 40px;
        font-family: 'Onest';
        font-style: normal;
        background-color: #fff;
        border-radius: 16px;

        &-dark-blue {
            display: flex;
            flex-flow: row nowrap;
            align-items: center;
            justify-content: start;
            color: #37476A;
            font-weight: 600;
            font-family: "Montserrat Alternates";
        }

        &-black {
            color: #000;
            font-weight: 400;
        }

        &-gray {
            color: #7C8EB5;
            font-weight: 400;

            &-bold {
                font-weight: 500;
            }
        }

        &-blue {
            color: #2477F4;
            font-weight: 500;
        }
    }

    &-btn-block {
        display: flex;
        flex-flow: row wrap;
        gap: 40px;
        justify-content: start;
        width: 100%;
        margin-top: 30px;
        margin-bottom: 50px;

        &-link {
            flex-grow: 1;
            max-width: 700px;
            cursor: pointer;

            &-svg {
                width: 100%;
            }
        }
    }

    &-loading {
        display: flex;
        flex-flow: column nowrap;
        // width: 100%;
        gap: 10px;
        align-items: center;
        justify-content: center;
        padding: 15px;

        &-img {
            padding-bottom: 10px;
        }

        &-title {
            color: #37476A;
            font-weight: 600;
            font-size: 24px;
            font-family: "Montserrat Alternates";

            &-animate {
                display: inline-block;
                color: #37476A;
                font-weight: 600;
                font-size: 24px;
                font-family: "Montserrat Alternates";
                animation: fade-out 2s infinite ease-in-out;
                clip-path: inset(0 30px 0 0);
            }

            @keyframes fade-out {
                to {
                    clip-path: inset(0 -24px 0 0);
                }
            }

            &-error {
                color: #FF4E78;
                font-weight: 600;
                font-size: 24px;
                font-family: "Montserrat Alternates";

            }

            &-link {
                color: #2477F4;
                font-weight: 500;
                font-size: 16px;
                font-family: "Montserrat Alternates";
                cursor: pointer;
            }

        }

        &-description {
            color: #7C8EB5;
            font-weight: 500;
            font-size: 16px;
            font-family: "Montserrat Alternates";
        }
    }
}

@keyframes l {
    to {
        clip-path: inset(0 -1ch 0 0)
    }
}


.ModalTitle {
    &-header {
        display: flex;
        flex-flow: row nowrap;
        gap: 10px;
        align-items: center;
        justify-content: start;
        padding: 10px;
        font-size: 16px;
        line-height: 20px;

        &-title {
            flex-grow: 1;
            color: #37476A;
            font-weight: 600;
            font-size: 1em;
            font-family: "Montserrat Alternates";
            font-style: normal;
            line-height: 1em;
        }

        &-icon {
            display: flex;
            flex-flow: row nowrap;
            align-items: center;
            justify-content: center;
            width: 28px;

            &-close {
                cursor: pointer;
            }
        }
    }

}

.\src\components\RepetitionComponents\Setup\index.tsx
-----------------------------------------------------
import { Link, useNavigate } from "react-router-dom";
import RadioBtnQuestion from "../../RadioBtnQuestion";

import { cn } from "@bem-react/classname";
import "./style.scss";
import { ReactSVG } from "react-svg";
import note_icon from "./icons/note_icon.svg";
import list_tasks_icon from "./icons/list_tasks_icon.svg";
import setting_icon from "./icons/setting_icon.svg";
import video_time_icon from "./icons/video_time_icon.svg";
import record_start_icon from "./icons/record_start_icon.svg";
import arrow_left_icon from "./icons/arrowLeft.svg";
import Button from "../../ui-kit/Button";
import TimerRadioBtn from "../TimerRadioBtn";
import ListInput from "../ListInput";
import RoutesEnum from "../../../models/routes";
import { useState } from "react";
import {
    MAX_MINUTES_FOR_VIDEO,
    MIN_MINUTES_FOR_VIDEO,
} from "../../../constants";

export default function RecodingSetup() {
    const navigate = useNavigate();
    const styleSetup = cn("RecodingSetup");

    const [basicPlan, setBasicPlan] = useState<Array<string>>();
    const [timerSeconds, setTimerSecond] = useState<number>(
        0
    );

    const [timeValid, setTimeValid] = useState(true);

    const changeTimeValid = (value: boolean) => {
        setTimeValid(value);
    };

    const saveBasicPlane = (plan: string[]) => {
        setBasicPlan(plan);
    };

    const saveTimer = (value: number) => {
        setTimerSecond(value);
    };

    return (
        <div className={styleSetup()}>
            <div
                className={styleSetup("btn-back")}
                onClick={() => navigate(-1)}
            >
                <ReactSVG src={arrow_left_icon} />
                Назад
            </div>
            <div className={styleSetup("text-header")}>
                <ReactSVG src={note_icon} className={styleSetup("svg-big")} />
                Сопроводительные материалы
            </div>
            <div className={styleSetup("block")}>
                <div className={styleSetup("text-row")}>
                    <ReactSVG
                        src={list_tasks_icon}
                        className={styleSetup("svg-small")}
                    />
                    Опорный план
                </div>
                <div className={styleSetup("text-grey")}>
                    Вы будете видеть опорный план речи выступления во время
                    репетиции.
                </div>
                <ListInput saveResultPlan={saveBasicPlane} />
            </div>

            <div className={styleSetup("text-header")}>
                <ReactSVG
                    src={setting_icon}
                    className={styleSetup("svg-big")}
                />
                Настройки
            </div>

            <div className={styleSetup("block")}>
                <div className={styleSetup("text-row")}>
                    <ReactSVG
                        src={video_time_icon}
                        className={styleSetup("svg-small")}
                    />
                    Время выступления
                </div>
                <div className={styleSetup("text-grey")}>
                    Боитесь не уложиться во время? Установите таймер, чтобы
                    понимать, сколько времени на окончание выступления у вас
                    осталось.
                </div>
                <div className={styleSetup("text-blue")}>
                    Обратите внимание, что длительность репетиции должна
                    составлять не менее {MIN_MINUTES_FOR_VIDEO} минут и не
                    более {MAX_MINUTES_FOR_VIDEO} минут.
                </div>
                <TimerRadioBtn
                    setTimerSeconds={saveTimer}
                    setTimeIsValid={changeTimeValid}
                />
            </div>

            <div className={styleSetup("btn-block")}>
                <Button
                    className={styleSetup("btn-block-btn", {
                        nonclickable: !timeValid,
                    })}
                    onClick={() => {
                        if (timeValid)
                            navigate(RoutesEnum.RECODING, {
                                state: {
                                    basicPlan,
                                    timerSeconds,
                                },
                            });
                    }}
                >
                    <ReactSVG
                        src={record_start_icon}
                        className={styleSetup("svg-small")}
                    />
                    Начать запись
                </Button>
            </div>
        </div>
    );
}


.\src\components\RepetitionComponents\Setup\style.scss
------------------------------------------------------
.RecodingSetup {
    display: flex;
    flex-flow: column;
    gap: 10px;

    &-btn-back {
        @extend .RecodingSetup-text-dark-blue;

        display: flex;
        flex-flow: row nowrap;
        gap: 10px;
        color: #37476a;
        cursor: pointer;
    }

    &-block {
        display: flex;
        flex-flow: column nowrap;
        gap: 10px;
        margin-bottom: 10px;
        padding: 15px;
        background-color: #fff;
        border-radius: 16px;
    }

    &-white-block{
        background-color: #fff;
    }

    &-text {
        font-size: 16px;
        line-height: 20px;

        &-dark-blue {
            color: #37476a;
            font-weight: 600;
            font-family: "Montserrat Alternates";
        }

        &-row {
            @extend .RecodingSetup-text-dark-blue;

            display: flex;
            flex-flow: row nowrap;
            gap: 10px;
            align-items: center;
            justify-content: start;
        }

        &-header {
            @extend .RecodingSetup-text-row;

            padding: 0.5em 0;
            font-weight: 600;
            font-size: 24px;
            line-height: 29px;
        }

        &-grey {
            color: #7c8eb5;
            font-weight: 400;
            font-family: "Onest";
            font-style: normal;
        }

        &-blue {
            color: #2477f4;
            font-weight: 500;
            font-family: "Onest";
            font-style: normal;
        }
    }

    &-svg {
        &-small {
            width: 20px;
            height: 20px;

            svg {
                width: 20px;
                height: 20px;
            }
        }

        &-big {
            width: 32px;
            height: 32px;

            svg {
                width: 32px;
                height: 32px;
            }
        }
    }

    &-btn-block{
        width: 100%;
        padding-bottom: 15px;


        &-btn {
            display: flex;
            flex-flow: row nowrap;
            gap: 10px;
            justify-content: center;
            width: 100%;
            font-weight: 600;
            font-size: 16px;
            font-family: "Montserrat Alternates";
            font-style: normal;
            line-height: 20px;

            &_nonclickable{
                cursor: not-allowed;
            }
        }
    }

    
}


.\src\components\RepetitionComponents\TimerRadioBtn\index.tsx
-------------------------------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";
import RadioItem from "../../RadioBtnQuestion/RadioItem";
import { Fragment, useEffect, useRef, useState } from "react";
import {
    MAX_MINUTES_FOR_VIDEO,
    MIN_MINUTES_FOR_VIDEO,
} from "../../../constants";

const cnTimerRadioBtn = cn("TimerRadioBtn");

const choices = [
    {
        id: 0,
        title: "Без таймера",
        value: false,
    },
    {
        id: 1,
        title: "Таймер обратного отчета",
        value: true,
    },
];

type Props = {
    setTimerSeconds: Function;
    setTimeIsValid: Function;
};



export default function TimerRadioBtn(props: Props) {
    const [curentChoice, setCurrentChoice] = useState<number>(0);

    const addAnswers = (idChoice: number) => {
        setCurrentChoice(idChoice);

        if(choices.filter(el=>el.id===idChoice)!.at(0)!.value){
            props.setTimerSeconds(MIN_MINUTES_FOR_VIDEO * 60);
        }else{
            props.setTimerSeconds(0);
        }
    };

    const minRef = useRef<HTMLInputElement>(null);
    const secRef = useRef<HTMLInputElement>(null);

    const [isValidMin, setIsValidMin] = useState(true);
    const [isValidSec, setIsValidSec] = useState(true);

    const change = () => {
        if (secRef.current && minRef.current) {
            const minNumber = Number(minRef.current.value);
            const secNumber = Number(secRef.current.value);

            if (minNumber === MAX_MINUTES_FOR_VIDEO) {
                setIsValidSec(secNumber === 0 ? true : false);
            } else {
                setIsValidSec(secNumber < 60 && secNumber > -1 ? true : false);
            }
            setIsValidMin(
                minNumber <= MAX_MINUTES_FOR_VIDEO &&
                    minNumber >= MIN_MINUTES_FOR_VIDEO
                    ? true
                    : false,
            );
            props.setTimerSeconds(minNumber * 60 + secNumber);
        }
    };

    useEffect(() => {
        props.setTimeIsValid(isValidMin && isValidSec);
    }, [isValidMin, isValidSec]);

    return (
        <div className={cnTimerRadioBtn()}>
            {choices.map((el, idx) => (
                <Fragment key={el.id}>
                    <RadioItem
                        idItem={el.id}
                        titleItem={el.title}
                        addAnswers={() => addAnswers(idx)}
                        currentIdItem={curentChoice}
                    />
                    {el.value && curentChoice === el.id && (
                        <div className={cnTimerRadioBtn("row")}>
                            <span className={cnTimerRadioBtn("text")}>
                                Установить таймер на
                            </span>
                            <div className={cnTimerRadioBtn("input-block")}>
                                <input
                                    type="number"
                                    className={cnTimerRadioBtn("input-field", {
                                        onblur: !isValidMin,
                                    })}
                                    id="minutes"
                                    name="minutes"
                                    min={MIN_MINUTES_FOR_VIDEO}
                                    max={MAX_MINUTES_FOR_VIDEO}
                                    defaultValue={MIN_MINUTES_FOR_VIDEO}
                                    ref={minRef}
                                    onChange={change}
                                />
                                <span className={cnTimerRadioBtn("text")}>
                                    :
                                </span>
                                <input
                                    type="number"
                                    className={cnTimerRadioBtn("input-field", {
                                        onblur: !isValidSec,
                                    })}
                                    id="seconds"
                                    name="seconds"
                                    min="0"
                                    max="59"
                                    defaultValue={"00"}
                                    ref={secRef}
                                    onChange={change}
                                />
                            </div>

                            <span className={cnTimerRadioBtn("text")}>
                                минут(ы).
                            </span>
                        </div>
                    )}
                </Fragment>
            ))}
        </div>
    );
}


.\src\components\RepetitionComponents\TimerRadioBtn\style.scss
--------------------------------------------------------------
.TimerRadioBtn {
    display: flex;
    flex-flow: column nowrap;

    &-row {
        display: flex;
        flex-flow: row nowrap;
        align-items: center;
        justify-content: flex-start;
        padding-top: 10px;
        padding-left: 42px;
    }

    &-text {
        color: #37476A;
        font-weight: 400;
        font-size: 16px;
        font-family: "Onest";
        font-style: normal;
        line-height: normal;
    }

    &-input {
        &-block {
            display: flex;
            flex-flow: row nowrap;
            gap: 8px;
            align-items: center;
            justify-content: center;
            margin: 0 10px;
            padding: 3px 10px;
            background: #F3F5F9;
            border-radius: 8px;
        }

        &-field {
            width: 40px;
            color: #37476A;
            font-weight: 600;
            font-size: 16px;
            font-family: "Montserrat Alternates";
            font-style: normal;
            line-height: normal;
            text-align: center;
            background: none;
            border: none;

            &_onblur{
                color: red;
            }
        }
    }
}

.\src\components\Report\helpers.ts
----------------------------------
import Frame1 from "../../components/Report/assets/Frame1.svg";
import Frame2 from "../../components/Report/assets/Frame2.svg";
import Frame3 from "../../components/Report/assets/Frame3.svg";
import Frame4 from "../../components/Report/assets/Frame4.svg";
import Frame5 from "../../components/Report/assets/Frame5.svg";

import GraphColor from "../../models/graph/_colors";

export interface ISectionRecomendation {
    connectivity: string[];
    argumentativeness: string[];
    clarity: string[];
    dynamism: string[];
    persuasiveness: string[];
    communicative: string[];
}

export const getTotalTitle = (value: string): string => {
    switch (value) {
        case "connectedness":
            return "связность";
        case "argumentativeness":
            return "аргументированность";
        case "clarity":
            return "ясность";
        case "dynamism":
            return "динамизм";
        case "persuasiveness":
            return "убедительность";
        case "communicative":
            return `соблюдение \n
			коммуникативной нормы`;
        default:
            return "";
    }
};

export const getTotalResult = (value: number): string[] => {
    if (value < 20) {
        return [GraphColor.SPURPLE, Frame1, "Ужасно"];
    } else if (value < 40) {
        return [GraphColor.SORANGE, Frame2, "Плохо"];
    } else if (value < 60) {
        return [GraphColor.SYELLOW, Frame3, "Средне"];
    } else if (value < 80) {
        return [GraphColor.SGREEN, Frame4, "Хорошо"];
    } else {
        return [GraphColor.SBLUE, Frame5, "Великолепно"];
    }
};

type totalItemDesc = {
    connectivityTotal: {
        value: number;
        params: {
            connectivity: number;
            informative: number;
            unityOfStyle: number;
        };
    };
    argumentativenessTotal: {
        value: number;
        params: {};
    };
    clarityTotal: {
        value: number;
        params: {
            clarity: number;
            eloquence: number;
            expressiveness: number;
        };
    };
    dynamismTotal: {
        value: number;
        params: {
            energy: number;
            nonMonotony: number;
            emotionality: number;
        };
    };
    persuasivenessTotal: {
        value: number;
        params: {
            confidence: number;
            emotionalArousal: number;
            congruence: number;
        };
    };
    communicativeTotal: {
        value: number;
        params: {};
    };
};

const convertTitleToRussian = (title: string) => {
    switch (title) {
        case "connectivityTotal":
            return "связность";
        case "argumentativenessTotal":
            return "аргументированность";
        case "clarityTotal":
            return "ясность";
        case "dynamismTotal":
            return "динамизм";
        case "persuasivenessTotal":
            return "убедительность";
        case "communicativeTotal":
            return `соблюдение \n
			коммуникативной нормы`;
        default:
            return "";
    }
};

export const getTotalDesc = (arrayValues: totalItemDesc) => {
    const MIN_RESULT = 80;
    let minValueArr = 100;
    let maxValueArr = 0;

    Object.entries(arrayValues).forEach(([key, obj]) => {
        minValueArr =
            obj.value < minValueArr && key !== "argumentativenessTotal"
                ? obj.value
                : minValueArr;
        maxValueArr = obj.value > maxValueArr ? obj.value : maxValueArr;
    });

    if (maxValueArr >= MIN_RESULT && minValueArr >= MIN_RESULT) {
        let minObject = Object.entries(arrayValues).filter(
            ([key, obj]) => minValueArr === obj.value,
        );
        let maxTitles = minObject.map((el) => convertTitleToRussian(el[0]));
        return `Не смотря на то, что Вы добились очень хороших показателей по основным критериям публичного выступления, в последующих репетициях следует обратить на его ${
            maxTitles.length > 1 ? maxTitles.join(", ") : maxTitles.at(0)
        }. Подробные рекомендации даны в соответствующих разделах выше. `;
    } else if (maxValueArr >= MIN_RESULT && minValueArr < MIN_RESULT) {
        let maxObject = Object.entries(arrayValues).filter(
            ([key, obj]) => maxValueArr === obj.value,
        );
        let minObjects = Object.entries(arrayValues).filter(
            ([key, obj]) => obj.value < MIN_RESULT,
        );

        let minTitles = minObjects.map((el) => convertTitleToRussian(el[0]));
        let maxTitles = maxObject.map((el) => convertTitleToRussian(el[0]));

        return `Не смотря на то, что Вы добились хороших результатов по таким критериям публичного выступления, как ${
            maxTitles.length > 1 ? maxTitles.join(", ") : maxTitles.at(0)
        }, в последующих репетициях следует обратить внимание на ${
            minTitles.length > 1 ? minTitles.join(", ") : minTitles.at(0)
        }. Подробные рекомендации даны в соответствующих разделах выше.`;
    } else {
        let minObjects = Object.entries(arrayValues).filter(
            ([key, obj]) => obj.value < MIN_RESULT,
        );
        let minTitles = minObjects.map((el) => convertTitleToRussian(el[0]));

        return `В последующих репетициях следует обратить внимание на ${
            minTitles.length > 1 ? minTitles.join(", ") : minTitles.at(0)
        }. Подробные рекомендации даны в соответствующих разделах выше.`;
    }
};


.\src\components\Report\index.tsx
---------------------------------
/* eslint-disable react-hooks/rules-of-hooks */
import { cn } from "@bem-react/classname";

import Tabs, { TYPE_TABS } from "../Tabs";

import lamp from "../../components/Analytics/-Block/Argumentation/icons/lamp-on.svg";
import caps from "../../components/Analytics/-Block/Argumentation/icons/smallcaps.svg";
import quote from "../../components/Analytics/-Block/Argumentation/icons/quote-down-square.svg";

import { ReactSVG } from "react-svg";
import CommonAnalitics from "./CommonAnalitics";
import MainDefinition from "../Analytics/-Block/Clarity/Definition/Main";
import SecondaryDefinition from "../Analytics/-Block/Clarity/Definition/Secondary";
import MainExpressiveness from "../Analytics/-Block/Clarity/Expressiveness/Main";
import SecondaryExpressiveness from "../Analytics/-Block/Clarity/Expressiveness/Secondary";
import MainSubsequence from "../Analytics/-Block/Connectivity/Subsequence/Main";
import SecondarySubsequence from "../Analytics/-Block/Connectivity/Subsequence/Secondary";
import MainOriginally from "../Analytics/-Block/Argumentation/Originally/Main";
import SecondaryEnergy from "../Analytics/-Block/Dinamism/Energy/Secondary";
import SecondaryDefeat from "../Analytics/-Block/Communicative/Defeat/Secondary";
import MainConfidence from "../Analytics/-Block/Persuasiveness/Confidence/Main";
import SecondaryConfidence from "../Analytics/-Block/Persuasiveness/Confidence/Secondary";
import SecondaryEmotionalArousal from "../Analytics/-Block/Persuasiveness/EmotionalArousal/Secondary";

import {
    convertClarityDataLine,
    convertConnectivityDataLine,
    convertExpressivenessDataLine,
} from "../Analytics/helpers";

import { getTotalDesc, getTotalResult } from "./helpers";

import ColorfulTabs from "../ColorfulTabs";
import { useEffect, useMemo, useState } from "react";
import SpeechTranscription from "../SpeechTranscription";
import VideoNotice from "../VideoNotice";
import { useLocation, useNavigate, useParams } from "react-router-dom";

import CommunicativeNorm from "../Graphs/communicativeNorm";
import Eloquence from "../Graphs/eloquence";
import EloquenceText from "../Graphs/eloquence/EloquenceText";
import InformativeGraph from "../Graphs/Informative/InformativeGraph";
import UnityOfStyl from "../Graphs/unityOfStyle/UnityOfStyl";
import InformativScale from "../Graphs/Informative/InformativScale";
import UnityOfStylScale from "../Graphs/unityOfStyle";
import EnergySmile from "../Graphs/EnergySmile";
import Emotionality from "../Graphs/Emotionality/Emotionality";
import EmotionalScale from "../Graphs/EmotionalScale";
import EmotionalArousal from "../Graphs/EmotionalArousal";
import CongruenceScale from "../Graphs/CongruenceScale";
import Congruence from "../Graphs/Congruence";

import { InformativeJSON } from "../../models/graph/informative";
import Dropdown from "../Dropdown";
import { UnityOfStyleDataItem } from "../../models/graph/unity_of_style";

import { ConnectivityJSON } from "../../models/graph/connectivity";
import { ArgumentativenessJSON } from "../../models/graph/argumentativeness";
import { ClarityJSON } from "../../models/graph/clarity";
import { EloquenceJSON } from "../../models/graph/eloquence";
import { ExpressivenessJSON } from "../../models/graph/expressiveness";
import { NonMonotonyJSON } from "../../models/graph/monotony";
import { EmotionalityJSON } from "../../models/graph/emotionality";
import { EnergyJSON } from "../../models/graph/energy";
import { CongruenceJSON } from "../../models/graph/congruence";
import { ConfidenceJSON } from "../../models/graph/confidence";
import { EmotionalArousalJSON } from "../../models/graph/emotional_arousal";
import { CommunicativeJSON } from "../../models/graph/communicative";

import { TotalGraphJSON } from "../../models/graph/total";
import { useGetVideoInfoByIdQuery } from "../../store/api/userVideo";
import { IVideoInfo } from "../../models/video";
import { getPrettyDuration } from "../PreviewBlock";
import MainNonMonotony from "../Analytics/-Block/Dinamism/NonMonotony/Main";
import SecondaryNonMonotony from "../Analytics/-Block/Dinamism/NonMonotony/Secondary";
import VideoPlayer, { getPrettyDataTime } from "../VideoPlayer";

import AddTextUnityOfStyle from "../Graphs/unityOfStyle/text";

import noteIcon from "./assets/note.svg";
import arrowLeft from "./assets/arrowLeft.svg";
import "./style.scss";
import Recomendation from "../Analytics/-Block/-Recomendation";

import {
    useGetArgumentativenessByIdTestQuery,
    useGetClarityByIdTestQuery,
    useGetCommunicativeByIdTestQuery,
    useGetConfidenceByIdTestQuery,
    useGetCongruenceByIdTestQuery,
    useGetConnectivityByIdTestQuery,
    useGetEloquenceByIdTestQuery,
    useGetEmotionalArousalByIdTestQuery,
    useGetEmotionalityByIdTestQuery,
    useGetEnergyByIdTestQuery,
    useGetExpressivenessByIdTestQuery,
    useGetInformativeByIdTestQuery,
    useGetNonMonotonyByIdTestQuery,
    useGetTotalByIdTestQuery,
    useGetUnityOfStyleByIdTestQuery,
} from "../../store/api/reportTest";


import {
    NonMonotonyTempHelper,
    NonMonotonyToneHelper,
    NonMonotonyVolumeHelper,
} from "../Analytics/-Block/Dinamism/NonMonotony/Main/helper";

import argumentativenessData1 from "./../../plugs/argumentativeness.json";
import { useGetVideoByIdQuery } from "../../store/api/apiWithDifAnswers";
import { VideoTimeContext } from "../Context/helpers";

export default function AnalysisReport() {
    const cnReport = cn("AnalysisReport");

    const params = useParams();
    const idVideo = params.id
        ? params.id
        : "ec9a839f-55c4-4504-9fdf-e6ff3c49766f";

    const locationParams = useLocation();
    const [isMainVideo, setIsMainVideo] = useState(false);

    useEffect(() => {
        if (
            locationParams &&
            locationParams.state &&
            "main" in locationParams.state
        ) {
            setIsMainVideo(true);
        }
    }, [locationParams]);

    // common info about video: title, date, duration
    const videoInfoFromBack = useGetVideoInfoByIdQuery(idVideo);
    const [videoInfo, setVideoInfo] = useState<IVideoInfo>();
    const [isPrivate, setIsPrivate] = useState<boolean>(false);

    useEffect(() => {
        if (videoInfoFromBack && videoInfoFromBack.data) {
            setVideoInfo(videoInfoFromBack.data!.data);

            if (videoInfoFromBack.data!.data?.user_id !== "None") {
                setIsPrivate(true);
            }
        }
    }, [videoInfoFromBack]);

    const navigate = useNavigate();

    // state for video playing
    const [currentTime, setCurrentTime] = useState(0);
    // state for video playing
    const [isPlaying, setIsPlaying] = useState(false);

    const togglePlay = () => {
        setIsPlaying(!isPlaying);
    };

    // all states for showing it on the page
    const [informativeData, setInformativeData] = useState<InformativeJSON>();
    const [unityOfStyleData, setUnityOfStyleData] =
        useState<UnityOfStyleDataItem>();
    const [connectivityData, setConnectivityData] =
        useState<ConnectivityJSON>();
    const [argumentativenessData, setArgumentativenessData] =
        useState<ArgumentativenessJSON>();
    const [clarityData, setClarityData] = useState<ClarityJSON>();
    const [eloquenceData, setEloquenceData] = useState<EloquenceJSON>();
    const [expressivenessData, setExpressivenessData] =
        useState<ExpressivenessJSON>();
    const [nonMonotonyData, setNonMonotonyData] = useState<NonMonotonyJSON>();
    const [emotionalityData, setEmotionalityData] =
        useState<EmotionalityJSON>();
    const [energyData, setEnergyData] = useState<EnergyJSON>();
    const [congruenceData, setCongruenceData] = useState<CongruenceJSON>();
    const [confidenceData, setConfidenceData] = useState<ConfidenceJSON>();
    const [emotionalArousalData, setEmotionalArousalData] =
        useState<EmotionalArousalJSON>();
    const [communicativeData, setCommunicativeData] =
        useState<CommunicativeJSON>();
    const [totalData, setTotalData] = useState<TotalGraphJSON>();

    // all queries
    const ConnectivityDataFromBack = useGetConnectivityByIdTestQuery(idVideo);
    const InformativeDataFromBack = useGetInformativeByIdTestQuery(idVideo);
    const UnityOfStyleDataFromBack = useGetUnityOfStyleByIdTestQuery(idVideo);
    const ArgumentativenessDataFromBack =
        useGetArgumentativenessByIdTestQuery(idVideo);
    const ClarityDataFromBack = useGetClarityByIdTestQuery(idVideo);
    const EloquenceDataFromBack = useGetEloquenceByIdTestQuery(idVideo);
    const ExpressivenessDataFromBack =
        useGetExpressivenessByIdTestQuery(idVideo);
    const NonMonotonyDataFromBack = useGetNonMonotonyByIdTestQuery(idVideo);
    const EmotionalityDataFromBack = useGetEmotionalityByIdTestQuery(idVideo);
    const EnergyDataFromBack = useGetEnergyByIdTestQuery(idVideo);
    const CongruenceDataFromBack = useGetCongruenceByIdTestQuery(idVideo);
    const ConfidenceDataFromBack = useGetConfidenceByIdTestQuery(idVideo);
    const EmotionalArousalDataFromBack =
        useGetEmotionalArousalByIdTestQuery(idVideo);
    const CommunicativeDataFromBack = useGetCommunicativeByIdTestQuery(idVideo);
    const TotalDataFromBack = useGetTotalByIdTestQuery(idVideo);

    useEffect(() => {
        if (ConnectivityDataFromBack && ConnectivityDataFromBack.data) {
            console.log(
                "ConnectivityDataFromBack",
                ConnectivityDataFromBack.data.data,
            );
            setConnectivityData(ConnectivityDataFromBack.data.data);
        }
    }, [ConnectivityDataFromBack]);

    useEffect(() => {
        if (InformativeDataFromBack && InformativeDataFromBack.data) {
            console.log(
                "InformativeDataFromBack",
                InformativeDataFromBack.data.data,
            );
            setInformativeData(InformativeDataFromBack.data.data);
        }
    }, [InformativeDataFromBack]);

    useEffect(() => {
        if (
            UnityOfStyleDataFromBack &&
            UnityOfStyleDataFromBack.data &&
            UnityOfStyleDataFromBack.data.data!.values
        ) {
            console.log(
                "UnityOfStyleDataFromBack",
                UnityOfStyleDataFromBack.data.data,
            );
            setUnityOfStyleData(UnityOfStyleDataFromBack.data.data!.values);
        }
    }, [UnityOfStyleDataFromBack]);

    useEffect(() => {
        if (
            ArgumentativenessDataFromBack &&
            ArgumentativenessDataFromBack.data
        ) {
            console.log(
                "ArgumentativenessDataFromBack",
                ArgumentativenessDataFromBack.data.data,
            );
            setArgumentativenessData(ArgumentativenessDataFromBack.data.data);
        }
    }, [ArgumentativenessDataFromBack]);

    useEffect(() => {
        if (ClarityDataFromBack && ClarityDataFromBack.data) {
            console.log("ClarityDataFromBack", ClarityDataFromBack.data.data);
            setClarityData(ClarityDataFromBack.data.data);
        }
    }, [ClarityDataFromBack]);

    useEffect(() => {
        if (EloquenceDataFromBack && EloquenceDataFromBack.data) {
            console.log(
                "EloquenceDataFromBack",
                EloquenceDataFromBack.data.data,
            );
            setEloquenceData(EloquenceDataFromBack.data.data);
        }
    }, [EloquenceDataFromBack]);

    useEffect(() => {
        if (ExpressivenessDataFromBack && ExpressivenessDataFromBack.data) {
            console.log(
                "ExpressivenessDataFromBack",
                ExpressivenessDataFromBack.data,
            );
            setExpressivenessData(ExpressivenessDataFromBack.data.data);
        }
    }, [ExpressivenessDataFromBack]);

    useEffect(() => {
        if (NonMonotonyDataFromBack && NonMonotonyDataFromBack.data) {
            console.log(
                "NonMonotonyDataFromBack",
                NonMonotonyDataFromBack.data.data,
            );
            setNonMonotonyData(NonMonotonyDataFromBack.data.data);
        }
    }, [NonMonotonyDataFromBack]);

    useEffect(() => {
        if (EmotionalityDataFromBack && EmotionalityDataFromBack.data) {
            console.log(
                "EmotionalityDataFromBack",
                EmotionalityDataFromBack.data.data,
            );
            setEmotionalityData(EmotionalityDataFromBack.data.data);
        }
    }, [EmotionalityDataFromBack]);

    useEffect(() => {
        if (EnergyDataFromBack && EnergyDataFromBack.data) {
            console.log("EnergyDataFromBack", EnergyDataFromBack.data.data);
            setEnergyData(EnergyDataFromBack.data.data);
        }
    }, [EnergyDataFromBack]);

    useEffect(() => {
        if (CongruenceDataFromBack && CongruenceDataFromBack.data) {
            console.log(
                "CongruenceDataFromBack",
                CongruenceDataFromBack.data.data,
            );
            setCongruenceData(CongruenceDataFromBack.data.data);
        }
    }, [CongruenceDataFromBack]);

    useEffect(() => {
        if (ConfidenceDataFromBack && ConfidenceDataFromBack.data) {
            console.log(
                "ConfidenceDataFromBack",
                ConfidenceDataFromBack.data.data,
            );
            setConfidenceData(ConfidenceDataFromBack.data.data);
        }
    }, [ConfidenceDataFromBack]);

    useEffect(() => {
        if (EmotionalArousalDataFromBack && EmotionalArousalDataFromBack.data) {
            console.log(
                "EmotionalArousalDataFromBack",
                EmotionalArousalDataFromBack.data.data,
            );
            setEmotionalArousalData(EmotionalArousalDataFromBack.data.data);
        }
    }, [EmotionalArousalDataFromBack]);

    useEffect(() => {
        if (CommunicativeDataFromBack && CommunicativeDataFromBack.data) {
            console.log(
                "CommunicativeDataFromBack",
                CommunicativeDataFromBack.data.data,
            );
            setCommunicativeData(CommunicativeDataFromBack.data.data);
        }
    }, [CommunicativeDataFromBack]);

    useEffect(() => {
        if (TotalDataFromBack && TotalDataFromBack.data) {
            setTotalData(TotalDataFromBack.data.data);
        }
    }, [TotalDataFromBack]);

    // ----------------------RECOMENDATION----------------------

    const resultDesc = useMemo(() => {
        if (totalData) {
            return {
                connectivityTotal: {
                    value: totalData.values.connectedness,
                    params: {
                        connectivity: 0,
                        informative: 0,
                        unityOfStyle: 0,
                    },
                },
                argumentativenessTotal: {
                    value: totalData.values.argumentativeness,
                    params: {},
                },
                clarityTotal: {
                    value: totalData.values.clarity,
                    params: {
                        clarity: 0,
                        eloquence: 0,
                        expressiveness: 0,
                    },
                },
                dynamismTotal: {
                    value: totalData.values.dynamism,
                    params: {
                        energy: 0,
                        nonMonotony: 0,
                        emotionality: 0,
                    },
                },
                persuasivenessTotal: {
                    value: totalData.values.persuasiveness,
                    params: {
                        confidence: 0,
                        emotionalArousal: 0,
                        congruence: 0,
                    },
                },
                communicativeTotal: {
                    value: totalData.values.communicative,
                    params: {},
                },
            };
        } else
            return {
                connectivityTotal: {
                    value: 0,
                    params: {
                        connectivity: 0,
                        informative: 0,
                        unityOfStyle: 0,
                    },
                },
                argumentativenessTotal: {
                    value: 0,
                    params: {},
                },
                clarityTotal: {
                    value: 0,
                    params: {
                        clarity: 0,
                        eloquence: 0,
                        expressiveness: 0,
                    },
                },
                dynamismTotal: {
                    value: 0,
                    params: {
                        energy: 0,
                        nonMonotony: 0,
                        emotionality: 0,
                    },
                },
                persuasivenessTotal: {
                    value: 0,
                    params: {
                        confidence: 0,
                        emotionalArousal: 0,
                        congruence: 0,
                    },
                },
                communicativeTotal: {
                    value: 0,
                    params: {},
                },
            };
    }, [totalData]);

    // -------------------------------------------- VIDEO BLOCK -------------------------------------------- //
    const videoFromBack = useGetVideoByIdQuery(idVideo);
    const [videoURL, setVideoURL] = useState<string>();

    useEffect(() => {
        if (videoFromBack.data && videoFromBack.isSuccess) {
            setVideoURL(videoFromBack.data);
        }
    }, [videoFromBack]);

    return (
        <div className={cnReport()}>
            <div className={cnReport("btn-back")}>
                <span
                    className={cnReport("btn-back-span")}
                    onClick={() => navigate(-1)}
                >
                    <ReactSVG src={arrowLeft} />
                    Назад
                </span>
            </div>

            <div className={cnReport("header")}>
                <div className={cnReport("whiteBlock")}>
                    <div className={cnReport("video-block-video")}>
                        <VideoTimeContext.Provider
                            value={{
                                currentTime,
                                setCurrentTime,
                                isPlaying,
                                setIsPlaying,
                                togglePlay,
                            }}
                        >
                            {videoURL && (
                                <VideoPlayer url={videoURL} controls={true} />
                            )}
                        </VideoTimeContext.Provider>
                    </div>
                    <div className={cnReport("video-block-title")}>
                        {videoInfo ? videoInfo.title : ""}
                    </div>
                    <div className={cnReport("video-block-description")}>
                        {videoInfo
                            ? getPrettyDataTime(videoInfo.upload_date)
                            : ""}{" "}
                        •{" "}
                        {videoInfo
                            ? getPrettyDuration(Number(videoInfo.duration))
                            : ""}{" "}
                        минут
                    </div>
                </div>

                <div className={cnReport("whiteBlock")}>
                    <ColorfulTabs>
                        {!isMainVideo && videoInfo && (
                            <div
                                className={cnReport("width")}
                                title="Личная заметка"
                            >
                                <VideoNotice
                                    idVideo={videoInfo.id}
                                    description={videoInfo.description}
                                    title={videoInfo.title}
                                />
                            </div>
                        )}
                        <div
                            className={cnReport("transrciption")}
                            title="Транскрипция речи"
                        >
                            <VideoTimeContext.Provider
                                value={{
                                    currentTime,
                                    setCurrentTime,
                                    isPlaying,
                                    setIsPlaying,
                                    togglePlay,
                                }}
                            >
                                <SpeechTranscription idVideo={idVideo} />
                            </VideoTimeContext.Provider>
                        </div>
                    </ColorfulTabs>
                </div>
            </div>
            <div className={cnReport("whiteBlock")}>
                <CommonAnalitics idVideo={idVideo} private={isPrivate} />
            </div>

            {totalData && (
                <Tabs type={TYPE_TABS.TEXT_VALUE}>
                    <div
                        className={cnReport("width")}
                        data-title="Связность"
                        data-value={
                            getTotalResult(totalData!.values.connectedness)[2]
                        }
                        color={
                            getTotalResult(totalData!.values.connectedness)[0]
                        }
                    >
                        <div className={cnReport("conclusion-desciption-text")}>
                            Логичная и последовательная связь компонентов
                            выступления между собой, которые служат для передачи
                            определенного сообщения и обеспечивают единое
                            понимание темы выступления у слушателей
                        </div>
                        {connectivityData && (
                            <Dropdown
                                title={"Последовательность"}
                                subtitle={connectivityData.comment}
                                visible={
                                    <MainSubsequence
                                        data={connectivityData.values.map(
                                            (el) =>
                                                convertConnectivityDataLine(el),
                                        )}
                                        startTime={
                                            connectivityData.values[0]
                                                .time_start
                                        }
                                        endTime={
                                            connectivityData.values.at(-1)!
                                                .time_start
                                        }
                                    />
                                }
                                invisible={
                                    <VideoTimeContext.Provider
                                        value={{
                                            currentTime,
                                            setCurrentTime,
                                            isPlaying,
                                            setIsPlaying,
                                            togglePlay,
                                        }}
                                    >
                                        <SecondarySubsequence
                                            data={connectivityData.values}
                                            state={""}
                                        />
                                    </VideoTimeContext.Provider>
                                }
                            />
                        )}
                        {informativeData && (
                            <Dropdown
                                title={"Информативность"}
                                subtitle={informativeData.comment}
                                visible={
                                    <InformativScale
                                        informative={
                                            informativeData.informative
                                        }
                                        sounds={informativeData.sounds}
                                        empty={informativeData.empty}
                                        parasite={informativeData.parasite}
                                    />
                                }
                                invisible={
                                    <VideoTimeContext.Provider
                                        value={{
                                            currentTime,
                                            setCurrentTime,
                                            isPlaying,
                                            setIsPlaying,
                                            togglePlay,
                                        }}
                                    >
                                        <InformativeGraph
                                            values={informativeData.values}
                                        />
                                    </VideoTimeContext.Provider>
                                }
                            />
                        )}
                        {unityOfStyleData && (
                            <Dropdown
                                title={"Единство стиля"}
                                subtitle={AddTextUnityOfStyle(
                                    unityOfStyleData.scientific,
                                    unityOfStyleData.official,
                                    unityOfStyleData.publicistic,
                                    unityOfStyleData.colloquial,
                                    unityOfStyleData.artistic,
                                )}
                                visible={
                                    <UnityOfStylScale
                                        scientific={unityOfStyleData.scientific}
                                        artistic={unityOfStyleData.artistic}
                                        official={unityOfStyleData.official}
                                        publicistic={
                                            unityOfStyleData.publicistic
                                        }
                                        colloquial={unityOfStyleData.colloquial}
                                    />
                                }
                                invisible={
                                    <UnityOfStyl
                                        scientific={unityOfStyleData.scientific}
                                        artistic={unityOfStyleData.artistic}
                                        official={unityOfStyleData.official}
                                        publicistic={
                                            unityOfStyleData.publicistic
                                        }
                                        colloquial={unityOfStyleData.colloquial}
                                    />
                                }
                            />
                        )}

                        {isPrivate && (
                            <Recomendation
                                recomendation={
                                    totalData.values
                                        .connectedness_recommendations
                                        ? totalData.values
                                              .connectedness_recommendations
                                        : "Регулярное чтение позволит обогатить лексические знания и начать внимательно анализировать свои мысли и структурировать высказывания таким образом, чтобы они логически связывались между собой"
                                }
                            />
                        )}
                    </div>
                    <div
                        data-title="Аргументированность"
                        className={cnReport("width")}
                        data-value={
                            getTotalResult(
                                totalData!.values.argumentativeness,
                            )[2]
                        }
                        color={
                            getTotalResult(
                                totalData!.values.argumentativeness,
                            )[0]
                        }
                    >
                        <div className={cnReport("conclusion-desciption-text")}>
                            {`Способность выступающего подтверждать свои
                            утверждения обоснованными фактами, доказательствами,
                            примерами и логическими операциями, умение логически
                            связывать свои мысли со свидетельствами и
                            доказательствами.`}
                        </div>
                        {/* {argumentativenessData && ( */}
                        {!argumentativenessData && (
                            <Dropdown
                                title={
                                    "Оригинальность, заимствования и цитирование"
                                }
                                subtitle={
                                    "Отношение параметров относительно общего объема текста."
                                }
                                visible={
                                    <MainOriginally
                                        info={[
                                            {
                                                title: "Оригинальность",
                                                subtitle: "",
                                                result: "",
                                                fill: "linear-gradient(212.08deg, #7C8EB5 0%, #37476A 100%)",
                                                dotfill:
                                                    "linear-gradient(301.36deg, #7C8EB5 -30.27%, #37476A 119.56%)",
                                                shadow: "",
                                                img: lamp,
                                                value: 30,
                                            },
                                            {
                                                title: "Заимствования",
                                                subtitle: "",
                                                result: "",
                                                fill: "linear-gradient(32.08deg, #2477F4 0%, #3A86FA 100%)",
                                                dotfill:
                                                    "linear-gradient(32.08deg, #2477F4 0%, #3A86FA 100%)",
                                                img: caps,
                                                shadow: "-2px 2px 12px rgba(12, 79, 180, 0.45)",
                                                value: 87.4,
                                            },
                                            {
                                                title: "Цитирование",
                                                subtitle: "",
                                                result: "",
                                                fill: "linear-gradient(225deg, #FFB800 0%, #FFB800 0.01%, #FF9900 100%)",
                                                dotfill: "#FFAA00",
                                                img: quote,
                                                shadow: "-2px 2px 12px rgba(219, 153, 20, 0.6)",
                                                value: 66,
                                            },
                                        ]}
                                        // _____________________вернуть после теста ____________________
                                        // positions={[
                                        //     argumentativenessData.originality,
                                        //     argumentativenessData.borrowing,
                                        //     argumentativenessData.citation,
                                        // ]}
                                        positions={[
                                            argumentativenessData1.data
                                                .originality,
                                            argumentativenessData1.data
                                                .borrowing,
                                            argumentativenessData1.data
                                                .citation,
                                        ]}
                                    />
                                }
                                invisible={
                                    // _____________________вернуть после теста ____________________
                                    <></>
                                    // <SecondaryOriginally
                                    //     breakdown={
                                    //         // argumentativenessData.values
                                    //         argumentativenessData1.data.values
                                    //     }
                                    //     state={""}
                                    // />
                                }
                            />
                        )}
                        {isPrivate && (
                            <Recomendation
                                recomendation={
                                    totalData.values
                                        .argumentativeness_recommendations
                                        ? totalData.values
                                              .argumentativeness_recommendations
                                        : // ПОСЛЕ ПИЛОТА ВЕРНУТЬ
                                          // : "Важно приводить не только аргументы “за” (за свой тезис), но и аргументы “против”. Они должны убеждать аудиторию в том, что аргументы, приводимые в поддержку критикуемого Вами тезиса, слабые и не выдерживают критики."
                                          `С целью недопущения попадания информации, возможно носящей характер коммерческой тайны, в систему Антиплагиат на время проведения бета-тестирования параметры "оригинальность", "заимствования" и "цитирования" временно не определяются.`
                                }
                            />
                        )}
                    </div>
                    <div
                        data-title="Ясность"
                        className={cnReport("width")}
                        data-value={
                            getTotalResult(totalData!.values.clarity)[2]
                        }
                        color={getTotalResult(totalData!.values.clarity)[0]}
                    >
                        <div className={cnReport("conclusion-desciption-text")}>
                            {`Способность выразить свои мысли в ясной, доходчивой
                            и понятной форме.`}
                        </div>
                        {clarityData && videoInfo && videoInfo!.duration && (
                            <Dropdown
                                title={"Четкость речи"}
                                subtitle={clarityData.expressiveness}
                                visible={
                                    <MainDefinition
                                        data={clarityData.values.map((el) =>
                                            convertClarityDataLine(el),
                                        )}
                                        startTime={
                                            clarityData.values[0].time_start
                                        }
                                        endTime={+videoInfo!.duration}
                                    />
                                }
                                invisible={
                                    <VideoTimeContext.Provider
                                        value={{
                                            currentTime,
                                            setCurrentTime,
                                            isPlaying,
                                            setIsPlaying,
                                            togglePlay,
                                        }}
                                    >
                                        <SecondaryDefinition
                                            data={clarityData.values}
                                            counts={[
                                                clarityData.basic,
                                                clarityData.sounds,
                                                clarityData.trembling,
                                            ]}
                                            state={""}
                                        />
                                    </VideoTimeContext.Provider>
                                }
                            />
                        )}
                        {eloquenceData && (
                            <Dropdown
                                title={"Красноречивость"}
                                visible={<Eloquence data={eloquenceData} />}
                                invisible={
                                    <EloquenceText
                                        data={eloquenceData.values}
                                    />
                                }
                            />
                        )}
                        {/* TO DO: DELETE ALL WARNING IN CONSOLE */}

                        {expressivenessData &&
                            videoInfo &&
                            videoInfo!.duration && (
                                <Dropdown
                                    title={"Экспрессивность"}
                                    subtitle={expressivenessData.comment}
                                    visible={
                                        <MainExpressiveness
                                            data={expressivenessData.values.map(
                                                (el) =>
                                                    convertExpressivenessDataLine(
                                                        el,
                                                    ),
                                            )}
                                            startTime={
                                                expressivenessData.values[0]
                                                    .time_start
                                            }
                                            endTime={+videoInfo!.duration}
                                        />
                                    }
                                    invisible={
                                        <VideoTimeContext.Provider
                                            value={{
                                                currentTime,
                                                setCurrentTime,
                                                isPlaying,
                                                setIsPlaying,
                                                togglePlay,
                                            }}
                                        >
                                            <SecondaryExpressiveness
                                                data={expressivenessData.values}
                                                graphs={["злость", "радость"]}
                                                state={""}
                                            />
                                        </VideoTimeContext.Provider>
                                    }
                                />
                            )}

                        {isPrivate && (
                            <Recomendation
                                recomendation={
                                    totalData.values.clarity_recommendations
                                        ? totalData.values
                                              .clarity_recommendations
                                        : "Регулярно расширяйте свой словарный запас, поскольку это поможет Вам в выборе более точных и выразительных слов для передачи своих мыслей и эмоций."
                                }
                            />
                        )}
                    </div>
                    <div
                        data-title="Динамизм"
                        className={cnReport("width")}
                        data-value={
                            getTotalResult(totalData!.values.dynamism)[2]
                        }
                        color={getTotalResult(totalData!.values.dynamism)[0]}
                    >
                        <div className={cnReport("conclusion-desciption-text")}>
                            {`Способность выражать свои мысли и идеи с помощью
                            энергичного и живого выступления, проявление
                            активности, энтузиазма в речи.`}
                        </div>
                        {nonMonotonyData && (
                            <Dropdown
                                title={"Немонотонность"}
                                subtitle={`Уровни параметров немонотонности.`}
                                visible={
                                    <MainNonMonotony
                                        info={[
                                            {
                                                title: "Темп речи",
                                                subtitle: NonMonotonyTempHelper(
                                                    nonMonotonyData["h-temp"],
                                                ).subtitle,
                                                result: NonMonotonyTempHelper(
                                                    nonMonotonyData["h-temp"],
                                                ).result,
                                                fill: "#2477F4",
                                                dotfill: "#2477F4",
                                                shadow: "0.663492px 0.663492px 3.4619px #2477F4",
                                                img: "",
                                                value:
                                                    (nonMonotonyData["h-temp"] /
                                                        250) *
                                                    100,
                                            },
                                            {
                                                title: "Громкость голоса",
                                                subtitle:
                                                    NonMonotonyVolumeHelper(
                                                        nonMonotonyData[
                                                            "h-volume"
                                                        ],
                                                    ).subtitle,
                                                result: NonMonotonyVolumeHelper(
                                                    nonMonotonyData["h-volume"],
                                                ).result,
                                                fill: "#F35B60",
                                                dotfill: "#F35B60",
                                                img: "",
                                                shadow: "0.663492px 0.663492px 3.4619px #F35B60",
                                                value:
                                                    (nonMonotonyData[
                                                        "h-volume"
                                                    ] /
                                                        120) *
                                                    100,
                                            },
                                            {
                                                title: "Диапазон изменения тона",
                                                subtitle: NonMonotonyToneHelper(
                                                    nonMonotonyData["h-tone"],
                                                ).subtitle,
                                                result: NonMonotonyToneHelper(
                                                    nonMonotonyData["h-tone"],
                                                ).result,
                                                fill: "#FFB800",
                                                dotfill: "#FFB800",
                                                img: "",
                                                shadow: "0.663492px 0.663492px 7.9619px #FFB800",
                                                value:
                                                    nonMonotonyData["h-tone"] *
                                                    100,
                                            },
                                        ]}
                                    />
                                }
                                invisible={
                                    // сюда надо добавить data
                                    <VideoTimeContext.Provider
                                        value={{
                                            currentTime,
                                            setCurrentTime,
                                            isPlaying,
                                            setIsPlaying,
                                            togglePlay,
                                        }}
                                    >
                                        <SecondaryNonMonotony
                                            data={nonMonotonyData.values}
                                            averages={[
                                                (nonMonotonyData["h-temp"] /
                                                    250) *
                                                    100,
                                                (nonMonotonyData["h-volume"] /
                                                    120) *
                                                    100,
                                                nonMonotonyData["h-tone"],
                                            ]}
                                            graphs={[
                                                {
                                                    link: "Темп речи",
                                                },
                                                {
                                                    link: "Громкость голоса",
                                                },
                                                {
                                                    link: "Нормированный тон речи",
                                                },
                                            ]}
                                        />
                                    </VideoTimeContext.Provider>
                                }
                            />
                        )}
                        {emotionalityData && (
                            <Dropdown
                                title={"Эмоциональность"}
                                subtitle={`Передача слушателям позитивной эмоциональной окраски и воодушевления.`}
                                visible={
                                    <Emotionality
                                        total={emotionalityData.total}
                                    />
                                }
                                invisible={
                                    <VideoTimeContext.Provider
                                        value={{
                                            currentTime,
                                            setCurrentTime,
                                            isPlaying,
                                            setIsPlaying,
                                            togglePlay,
                                        }}
                                    >
                                        <EmotionalScale
                                            values={emotionalityData.values}
                                            endTime={+videoInfo!.duration}
                                        />
                                    </VideoTimeContext.Provider>
                                }
                            />
                        )}
                        {energyData && (
                            <Dropdown
                                title={"Энергичность"}
                                subtitle={energyData.comment}
                                visible={
                                    <EnergySmile
                                        energy={energyData.total_energy}
                                    />
                                }
                                invisible={
                                    <VideoTimeContext.Provider
                                        value={{
                                            currentTime,
                                            setCurrentTime,
                                            isPlaying,
                                            setIsPlaying,
                                            togglePlay,
                                        }}
                                    >
                                        <SecondaryEnergy
                                            data={energyData.values}
                                            average={0.5}
                                        />
                                    </VideoTimeContext.Provider>
                                }
                            />
                        )}
                        {isPrivate && (
                            <Recomendation
                                recomendation={
                                    totalData.values.dynamism_recommendations
                                        ? totalData.values
                                              .dynamism_recommendations
                                        : "Динамизм касается в первую очередь интонации речи и связана с эмоциональностью, разнообразием интонационного оформления, отсутствием монотонности, точностью интонационной передачи оратором своей мысли, правильной расстановкой логических ударений и пауз, точностью передачи подтекста. Следует голосом, интонацией подчеркивать основную мысль, делать паузы до и после важных мыслей."
                                }
                            />
                        )}
                    </div>

                    <div
                        data-title="Убедительность"
                        className={cnReport("width")}
                        data-value={
                            getTotalResult(totalData!.values.persuasiveness)[2]
                        }
                        color={
                            getTotalResult(totalData!.values.persuasiveness)[0]
                        }
                    >
                        <div className={cnReport("conclusion-desciption-text")}>
                            {
                                "Способность выступающего эффективно выражать свои мысли, оказывать влияние на аудиторию и уверить ее в правильности своих аргументов и доказательств."
                            }
                        </div>
                        {congruenceData && (
                            <Dropdown
                                title={"Конгруэнтность"}
                                subtitle={congruenceData.comment}
                                visible={
                                    <Congruence
                                        diameter={congruenceData.diameter}
                                    />
                                }
                                invisible={
                                    <VideoTimeContext.Provider
                                        value={{
                                            currentTime,
                                            setCurrentTime,
                                            isPlaying,
                                            setIsPlaying,
                                            togglePlay,
                                        }}
                                    >
                                        <CongruenceScale
                                            A_T={congruenceData.values["A-T"]}
                                            A_V={congruenceData.values["A-V"]}
                                            V_T={congruenceData.values["V-T"]}
                                            endTime={+videoInfo!.duration}
                                        />
                                    </VideoTimeContext.Provider>
                                }
                            />
                        )}
                        {confidenceData && videoInfo && videoInfo!.duration && (
                            <Dropdown
                                title={"Уверенность"}
                                subtitle={confidenceData.comment}
                                visible={
                                    <MainConfidence
                                        data={confidenceData.values}
                                        endTime={+videoInfo!.duration}
                                    />
                                }
                                invisible={
                                    <VideoTimeContext.Provider
                                        value={{
                                            currentTime,
                                            setCurrentTime,
                                            isPlaying,
                                            setIsPlaying,
                                            togglePlay,
                                        }}
                                    >
                                        <SecondaryConfidence
                                            data={confidenceData.values}
                                            average={
                                                100 -
                                                confidenceData.average_value *
                                                    100
                                            }
                                            state={""}
                                        />
                                    </VideoTimeContext.Provider>
                                }
                            />
                        )}

                        {emotionalArousalData && (
                            <Dropdown
                                title={"Эмоциональное возбуждение"}
                                subtitle={``}
                                visible={
                                    <EmotionalArousal
                                        emotional_arousal={
                                            emotionalArousalData.values
                                                .emotional_arousal
                                        }
                                    />
                                }
                                invisible={
                                    <SecondaryEmotionalArousal
                                        info={[
                                            {
                                                title: "Коэффицент Трейгера",
                                                subtitle:
                                                    "указывает на склонность к активности, рефлексии и созерцательности.",
                                                result:
                                                    !emotionalArousalData.values
                                                        .trager_coefficient ||
                                                    emotionalArousalData.values
                                                        .trager_coefficient < 0
                                                        ? 0
                                                        : emotionalArousalData
                                                              .values
                                                              .trager_coefficient >
                                                          1
                                                        ? 1
                                                        : emotionalArousalData
                                                              .values
                                                              .trager_coefficient,
                                                fill: ["#FFDFE1", "#ABFFBE"],
                                                limit: 0.85,
                                            },
                                            {
                                                title: "Коэффицент определенности действия",
                                                subtitle:
                                                    "характеризует уровень социализированности, синтаксической завершенности высказывания.",
                                                result:
                                                    !emotionalArousalData.values
                                                        .action_certainty_factor ||
                                                    emotionalArousalData.values
                                                        .action_certainty_factor <
                                                        0
                                                        ? 0
                                                        : emotionalArousalData
                                                              .values
                                                              .action_certainty_factor >
                                                          1
                                                        ? 1
                                                        : emotionalArousalData
                                                              .values
                                                              .action_certainty_factor,
                                                fill: ["#FFDFE1", "#ABFFBE"],
                                                limit: 0.85,
                                            },
                                            {
                                                title: "Коэффицент агрессивности",
                                                subtitle:
                                                    "свидетельствует о готовности к немедленным действиям.",
                                                result:
                                                    !emotionalArousalData.values
                                                        .aggressiveness_coefficient ||
                                                    emotionalArousalData.values
                                                        .aggressiveness_coefficient <
                                                        0
                                                        ? 0
                                                        : emotionalArousalData
                                                              .values
                                                              .aggressiveness_coefficient >
                                                          1
                                                        ? 1
                                                        : emotionalArousalData
                                                              .values
                                                              .aggressiveness_coefficient,
                                                fill: ["#ABFFBE", "#FFDFE1"],
                                                limit: 0.6,
                                            },
                                        ]}
                                    />
                                }
                            />
                        )}
                        {isPrivate && (
                            <Recomendation
                                recomendation={
                                    totalData.values
                                        .persuasiveness_recommendations
                                        ? totalData.values
                                              .persuasiveness_recommendations
                                        : "В случае, если Вы ставите себе целью убедить людей в чем-либо, либо Вам надо побудить людей в аудитории к определенным действиям, то Вам лучше всего сконцентрироваться на подробном анализе аудитории (чтобы понять, какие именно факторы повлияют на позицию аудитории), на содержании и структуре презентации с продумыванием аргументов и примеров (чтобы речь была логичной и убедительной) и на тщательной подготовке наглядных пособий (это усилит Ваше влияние на людей)."
                                }
                            />
                        )}
                    </div>
                    <div
                        data-title="Коммуникативная норма"
                        data-value={
                            getTotalResult(totalData!.values.communicative)[2]
                        }
                        color={
                            getTotalResult(totalData!.values.communicative)[0]
                        }
                        className={cnReport("width")}
                    >
                        <div className={cnReport("conclusion-desciption-text")}>
                            {`Умение правильно и эффективно использовать язык и
                            другие коммуникативные инстументы для того, чтобы
                            эффективно общаться с аудиторией и передавать свои
                            мысли и идеи.`}
                        </div>
                        {communicativeData && (
                            <Dropdown
                                title={
                                    "Слова паразиты, когнитивные искажения, агрессивность"
                                }
                                subtitle={`Умение правильно и эффективно использовать язык и другие коммуникативные инстументы для того, чтобы эффективно общаться с аудиторией и передавать свои мысли и идеи.`}
                                visible={
                                    <CommunicativeNorm
                                        aggression={
                                            communicativeData.aggression
                                        }
                                        cognitive_distortion={
                                            communicativeData.cognitive_distortion
                                        }
                                        filler_words={
                                            communicativeData.filler_words
                                        }
                                    />
                                }
                                invisible={
                                    <VideoTimeContext.Provider
                                        value={{
                                            currentTime,
                                            setCurrentTime,
                                            isPlaying,
                                            setIsPlaying,
                                            togglePlay,
                                        }}
                                    >
                                        <SecondaryDefeat
                                            breakdown={communicativeData.values}
                                            state={""}
                                        />
                                    </VideoTimeContext.Provider>
                                }
                            />
                        )}
                        {isPrivate && (
                            <Recomendation
                                recomendation={
                                    totalData.values
                                        .communicative_recommendations
                                        ? totalData.values
                                              .communicative_recommendations
                                        : "Помните, нарушение коммуникативных норм обычно не остается незамеченным. В зависимости от того, насколько грубым было это нарушение, наказания выражаются в отказе адресата от коммуникации вообще, в прерывании общения, в недостижении цели общения."
                                }
                            />
                        )}
                    </div>
                </Tabs>
            )}

            {isPrivate && (
                <div className={cnReport("whiteBlock")}>
                    <div className={cnReport("col")}>
                        <div className={cnReport("row")}>
                            <div className={cnReport("conclusion-title")}>
                                <span
                                    className={cnReport(
                                        "conclusion-title-icon",
                                    )}
                                >
                                    <ReactSVG src={noteIcon} />
                                </span>
                                <span
                                    className={cnReport(
                                        "conclusion-title-text",
                                    )}
                                >
                                    Вывод
                                </span>
                            </div>
                        </div>

                        <div className={cnReport("conclusion-desciption")}>
                            <div
                                className={cnReport(
                                    "conclusion-desciption-text",
                                )}
                            >
                                {/* заменить общий вывод */}
                                {resultDesc && getTotalDesc(resultDesc)}

                                {/* {`Задача организации, в особенности же понимание сути
                            ресурсосберегающих технологий требует определения и
                            уточнения соответствующих условий активизации. Как
                            уже неоднократно упомянуто, интерактивные прототипы
                            представляют собой не что иное, как квинтэссенцию
                            победы маркетинга над разумом и должны быть в равной
                            степени предоставлены сами себе. Кстати, стремящиеся
                            вытеснить традиционное производство, нанотехнологии
                            лишь добавляют фракционных разногласий и призваны к
                            ответу.`} */}
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}


.\src\components\Report\style.scss
----------------------------------
.AnalysisReport {
    font-size: 20px;
    font-family: "Montserrat Alternates";
    line-height: 26px;

    &-btn-back {
        &-span {
            display: inline-flex;
            gap: 10px;
            color: #37476a;
            font-weight: 600;
            font-size: 16px;
            font-family: "Montserrat Alternates";
            cursor: pointer;
        }
    }

    &-whiteBlock {
        width: 100%;
        margin-bottom: 20px;
        padding: 10px;
        overflow: hidden;
        background: #fff;
        border-radius: 16px;
    }

    &-header {
        display: grid;
        grid-template-rows: 550px;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
        width: 100%;
    }

    &-video-block {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        justify-content: center;

        &-video {
            overflow: hidden;
            border-radius: 10px;

            video {
                max-height: 420px;
            }
        }

        &-title {
            max-width: 700px;
            padding: 5px 10px;
            color: #000;
            font-weight: 500;
            font-size: 20px;
            font-family: "Onest";
        }

        &-description {
            display: flex;
            flex-direction: row;
            align-items: flex-start;
            justify-content: start;
            padding: 0 10px;
            color: #7c8eb5;
            font-size: 16px;
            font-family: "Onest";
        }
    }

    &-col {
        display: flex;
        flex-direction: column;
        gap: 15px;
        margin: 0 10px;
    }

    &-col-grow {
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        align-items: flex-start;
    }

    &-row {
        display: flex;
        flex-direction: row;
        width: 100%;
    }

    &-row-justify {
        display: flex;
        flex-direction: row;
        gap: 10px;
        align-items: center;
        justify-content: start;
        width: 100%;
    }

    &-conclusion {
        &-title {
            display: flex;
            flex-flow: row nowrap;
            padding: 10px 0;

            &-icon {
                padding: 0 8px;

                div {
                    display: flex;
                    align-content: center;
                    align-items: center;
                    justify-content: center;
                }
            }

            &-text {
                color: #37476a;
                font-weight: 600;
                font-size: 24px;
                font-family: "Montserrat Alternates";
            }
        }

        &-desciption {
            &-text {
                color: #37476a;
                font-weight: 400;
                font-size: 16px;
                font-family: "Onest";
            }
        }
    }

    &-width {
        width: 100%;
        height: 100%;
        padding: 0 20px;
    }

    &-width-max {
        width: 100%;
    }

    &-transrciption {
        display: flex;
        flex-flow: column nowrap;
        gap: 10px;
        height: 85%;
        overflow: auto;
    }
}


.\src\components\Report\CommonAnalitics\index.tsx
-------------------------------------------------
/* eslint-disable react-hooks/rules-of-hooks */
import ProgressBar from "../../Graphs/Progressbar";
import { cn } from "@bem-react/classname";

import Speedometer, {
    Background,
    Arc,
    Needle,
    Progress,
} from "react-speedometer";

import "./style.scss";

import mirco from "../assets/mircophon.svg";
import legend from "../assets/legend.svg";
import face from "../assets/face.svg";
import talant from "../assets/talant.svg";
import speaker from "../assets/speaker.svg";

import noteSvg from "../assets/note.svg";

import { ReactSVG } from "react-svg";

import { getTotalResult, getTotalTitle } from "../helpers";
import convertTotalData from "../../../@adapters/Graphs/total";
import { useGetTotalByIdQuery } from "../../../store/api/report";
import { useEffect, useState } from "react";
import { TotalDataItem, TotalType } from "../../../models/graph/total";
import { useGetTotalByIdTestQuery } from "../../../store/api/reportTest";

function getPictureByConclussion(conclussion: string) {
    switch (conclussion) {
        case "Новичок на сцене":
            return face;
        case "Постепенно преодолевающий себя оратор":
            return mirco;
        case "Растущий талант выступлений":
            return talant;
        case "Уверенный спикер":
            return speaker;
        case "Легенда выступлений":
            return legend;
        default:
            return mirco;
    }
}

const DECIMAL = 2;
type Props = {
    idVideo: string;
    private: boolean;
};

export default function CommonAnalitics(props: Props) {
    const cnCommon = cn("CommonAnalitics");

    const { data } = useGetTotalByIdTestQuery(props.idVideo);

    const [speedArr, setSpeedArr] = useState<TotalType[]>();
    const [allValues, setAllValues] = useState<TotalDataItem>();

    useEffect(() => {
        if (data) {
            setSpeedArr(convertTotalData(data!.data!.values));
            setAllValues(data!.data!.values);
        }
    }, [data]);

    return (
        <div className={cnCommon("col")}>
            <div className={cnCommon("row")}>
                <span className={cnCommon("title")}>
                    <ReactSVG
                        src={noteSvg}
                        className={cnCommon("title-icon")}
                    />
                    Общая аналитика
                </span>
            </div>
            <div className={cnCommon("row-justify")}>
                <div>
                    {allValues && (
                        <ReactSVG
                            src={getPictureByConclussion(
                                allValues.big_conclussion,
                            )}
                        />
                    )}
                </div>
                <div className={cnCommon("col-grow")}>
                    <span className={cnCommon("blue-bold")}>
                        {allValues && allValues.big_conclussion}
                    </span>
                    {props.private && (
                        <span className={cnCommon("gray-txt")}>
                            {allValues && allValues.conclussion}
                        </span>
                    )}
                </div>
                <div className={cnCommon("common-result")}>
                    <span className={cnCommon("common-result-title")}>
                        Общий результат:
                    </span>
                    <span className={cnCommon("common-result-value")}>{`${
                        allValues ? allValues.total_result.toFixed(DECIMAL) : 0
                    }%`}</span>
                </div>
            </div>
            <div className={cnCommon("row")}>
                <ProgressBar
                    bgcolor={"#2477F4"}
                    completed={allValues ? allValues.total_result : 0}
                />
            </div>
            <div className={cnCommon("panel")}>
                {speedArr &&
                    allValues &&
                    speedArr.map((element, ind) => (
                        <div key={ind} className={cnCommon("item")}>
                            <Speedometer
                                value={allValues[element]}
                                width={165}
                                height={110}
                                // height={165}
                                min={0}
                                max={100}
                                angle={180}
                            >
                                {/* фон */}
                                <Background angle={180} color="#FFF" />
                                {/* шкала от 0 до последнего значение */}
                                <Arc
                                    color={"#D9E0EF"}
                                    opacity={1}
                                    arcWidth={25}
                                    // lineCap={}
                                />
                                {/* шкала заполнения */}
                                <Progress
                                    color={
                                        getTotalResult(allValues[element])[0]
                                    }
                                    arcWidth={25}
                                />
                                <svg width="230" height="165">
                                    <line
                                        x1="142"
                                        y1="0"
                                        x2="82.5"
                                        y2="82.5"
                                        stroke="#FFF"
                                        strokeWidth="1"
                                    />
                                    <line
                                        x1="165"
                                        y1="56"
                                        x2="82.5"
                                        y2="82.5"
                                        stroke="#FFF"
                                        strokeWidth="1"
                                    />
                                    <line
                                        x1="165"
                                        y1="109"
                                        x2="82.5"
                                        y2="82.5"
                                        stroke="#FFF"
                                        strokeWidth="1"
                                    />
                                    <line
                                        x1="142"
                                        y1="165"
                                        x2="82.5"
                                        y2="82.5"
                                        stroke="#FFF"
                                        strokeWidth="1"
                                    />
                                    {/* стрелка */}
                                    <Needle
                                        offset={35}
                                        baseWidth={12}
                                        // baseOffset={-30}
                                        baseOffset={0}
                                        color={"#7C8EB5"}
                                        circleRadius={0}
                                    />
                                </svg>
                            </Speedometer>
                            <div className={cnCommon("icon")}>
                                <ReactSVG
                                    src={getTotalResult(allValues[element])[1]}
                                />
                            </div>
                            <div className={cnCommon("smile-title")}>
                                {getTotalTitle(element)}
                            </div>
                            <div
                                className={cnCommon("percent")}
                                style={{
                                    color: getTotalResult(
                                        allValues[element],
                                    )[0],
                                }}
                            >{`${
                                allValues ? allValues[element].toFixed(2) : 0
                            }%`}</div>
                        </div>
                    ))}
            </div>
        </div>
    );
}


.\src\components\Report\CommonAnalitics\style.scss
--------------------------------------------------
.CommonAnalitics {
    font-size: 20px;
    font-family: "Montserrat Alternates";
    line-height: 26px;

    &-title {
        display: flex;
        flex-flow: row nowrap;
        gap: 8px;
        align-items: flex-start;
        justify-content: start;
        color: #37476a;
        font-weight: 600;
        font-size: 24px;
        font-family: "Montserrat Alternates";
        font-style: normal;
        line-height: 29px;
    }

    &-col {
        display: flex;
        flex-direction: column;
        gap: 16px;
        margin: 0 10px;
    }

    &-col-grow {
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        align-items: flex-start;
    }

    &-common-result {
        display: flex;
        flex-direction: column;
        gap: 5px;
        align-items: flex-end;
        margin: 0 10px;

        &-title {
            color: #37476a;
            font-weight: 400;
            font-size: 20px;
            font-family: "Onest";
            font-style: normal;
            line-height: 26px;
        }

        &-value {
            color: #2477f4;
            font-weight: 700;
            font-size: 36px;
            font-family: "Montserrat Alternates";
            font-style: normal;
            line-height: 44px;
        }
    }

    &-row {
        display: flex;
        flex-direction: row;
        width: 100%;
    }

    &-row-justify {
        display: flex;
        flex-direction: row;
        gap: 10px;
        align-items: center;
        justify-content: start;
        width: 100%;
    }

    &-blue-bold {
        color: #37476a;
        font-weight: 600;
        font-size: 32px;
        font-family: "Montserrat Alternates";
        font-style: normal;
        line-height: 39px;
    }

    &-gray-txt {
        color: #7c8eb5;
        font-weight: 400;
        font-size: 20px;
        font-family: "Onest";
        font-style: normal;
        line-height: 26px;
    }

    &-pic {
        width: 100%;
    }

    &-panel {
        display: flex;
        justify-content: space-between;
        width: 100%;
        margin-top: 16px;
    }

    &-item {
        position: relative;
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 16.6%;

        & > svg {
            margin: 0 auto;
        }
    }

    &-icon {
        position: absolute;
        top: 82px;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    &-smile-title {
        color: #37476a;
        font-weight: 600;
        font-size: 14px;
        font-family: "Montserrat Alternates";
        line-height: 17px;
        text-align: center;
        word-wrap: break-word;
    }

    &-percent {
        font-weight: 700;
        font-size: 20px;
        font-family: "Montserrat Alternates";
        line-height: 24px;
        text-align: center;
    }
}


.\src\components\RollUp\index.tsx
---------------------------------
import React, { ReactNode, useState } from "react";
import { cn } from "@bem-react/classname";

import "./style.scss";
import { ReactSVG } from "react-svg";

type Props = {
    title: string;
    icon?: string;
    children: ReactNode[] | ReactNode;
};

export default function RollUp(props: Props) {
    const cnRollUp = cn("RollUp");
    const stateBtn = ["Свернуть блок", "Развернуть блок"];
    const [isShow, setIsShow] = useState(true);

    return (
        <div className={cnRollUp()}>
            <div className={cnRollUp("header")}>
                {props.icon && <ReactSVG src={props.icon} className={cnRollUp("icon")}/>}
                <span className={cnRollUp("title")}>{props.title}</span>
                <span onClick={()=>setIsShow(prev=>!prev)} className={cnRollUp("btn")}>{isShow ? stateBtn[0] : stateBtn[1]}</span>
            </div>
            {isShow && <div className={cnRollUp("content")}>{props.children}</div>}
        </div>
    );
}


.\src\components\RollUp\style.scss
----------------------------------
.RollUp {
    &-header {
        display: flex;
        flex-flow: row nowrap;
        gap: 10px;
        align-items: center;
        justify-content: start;
        padding: 10px 0;
    }

    &-icon {
        svg {
            display: flex;
            flex-flow: row nowrap;
            align-items: center;
            justify-content: center;
        }

    }

    &-title {
        color: #37476A;
        font-weight: 600;
        font-size: 16px;
        font-family: "Montserrat Alternates";

    }

    &-btn {
        padding: 0 20px  ;
        color: #2477F4;
        font-weight: 500;
        font-size: 16px;
        font-family: "Montserrat Alternates";
        cursor: pointer;
    }

    &-content {
        padding:  15px 0;
    }

}

.\src\components\SettingsStart\index.tsx
----------------------------------------
import { cn } from "@bem-react/classname";
import "./style.scss";

import PersonalArea from "../PersonalArea";

export default function SettingsStart() {
    const cnSettingsStart = cn("SettingsStart");

    return <PersonalArea isArchive={false} />;
}


.\src\components\SettingsStart\style.scss
-----------------------------------------
.SettingsStart {
    &-text {
        &-h1 {
            padding: 10px 0;
            color: #17282f;
            color: red;
            font-weight: 600;
            font-size: 24px;
            font-family: "Montserrat Alternates";
            font-style: normal;
            line-height: normal;
        }

        &-gray {
            color: #7c8eb5;
            color: red;
            font-weight: 600;
            font-size: 24px;
            font-family: "Montserrat Alternates";
            font-style: normal;
            line-height: normal;
        }
    }
}

.personal-area {
}


.\src\components\SpeechTranscription\index.tsx
----------------------------------------------
/* eslint-disable react-hooks/rules-of-hooks */
import React, { useContext, useEffect, useState } from "react";
import { cn } from "@bem-react/classname";
import "./style.scss";
import { useGetTranscriptionByIdQuery } from "../../store/api/report";
import { TranscriptionValue } from "../../models/report/transcription";
import { useGetTranscriptionByIdTestQuery } from "../../store/api/reportTest";
import { VideoTimeContext } from "../Context/helpers";

type Props = {
    idVideo: string;
};

export function getPrettyTimeBySeconds(seconds: number) {
    if (seconds < 60) {
        return `00:${
            seconds < 10 ? "0" + seconds.toFixed(0) : seconds.toFixed(0)
        }`;
    } else {
        const minutes = ~~(seconds / 60);
        return `${minutes < 10 ? "0" + minutes : minutes}:${
            seconds % 60 < 10
                ? "0" + (seconds % 60).toFixed(0)
                : (seconds % 60).toFixed(0)
        }`;
    }
}



export default function SpeechTranscription(props: Props) {
    const { currentTime } = useContext(VideoTimeContext);

    const [transcriptionData, setTranscriptionData] =
        useState<TranscriptionValue[]>();

    // all queries
    const TranscriptionDataFromBack = useGetTranscriptionByIdTestQuery(
        props.idVideo
    );

    useEffect(() => {
        if (TranscriptionDataFromBack && TranscriptionDataFromBack.data) {
            setTranscriptionData(TranscriptionDataFromBack.data.data!.values);
        }
    }, [TranscriptionDataFromBack]);

    const cnTranscription = cn("SpeechTranscription");
    return (
        <div className={cnTranscription()}>
            {transcriptionData &&
                transcriptionData.map((el, idx) => (
                    <div className={cnTranscription("row")} key={idx}>
                        <div
                            className={cnTranscription("time", {
                                active:
                                    currentTime >= el.time_start &&
                                    ((idx < transcriptionData.length - 1 &&
                                        transcriptionData[idx + 1].time_start >
                                            currentTime) ||
                                        idx === transcriptionData.length - 1),
                            })}
                        >
                            {getPrettyTimeBySeconds(el.time_start)}
                        </div>
                        <div className={cnTranscription("buble")}>
                            <div
                                className={cnTranscription("buble-text", {
                                    active:
                                        currentTime >= el.time_start &&
                                        ((idx < transcriptionData.length - 1 &&
                                            transcriptionData[idx + 1]
                                                .time_start > currentTime) ||
                                            idx ===
                                                transcriptionData.length - 1),
                                })}
                            >
                                {el.text}
                            </div>
                        </div>
                    </div>
                ))}
        </div>
    );
}


.\src\components\SpeechTranscription\style.scss
-----------------------------------------------
.SpeechTranscription {
    display: flex;
    flex-flow: column nowrap;
    gap: 10px;
    height: 100%;
    overflow:auto;

    &-row {
        display: grid;
        grid-template-columns: 50px 1fr;
        gap: 8px;
        align-content: center;
        align-items: center;
        justify-items: start;

    }

    &-time {
        width: 100%;
        color: #7c8eb5;
        font-weight: 700;
        font-size: 14px;
        font-family: "Onest";
        text-align: center;
        background: #f3f5f9;
        border-radius: 4px;

        &_active {
            color: #fff;
            background: #ffb800;
            border-radius: 4px;
        }
    }

    &-buble{
        width: 100%;

        &-text {
            padding: 8px;
            color: #7C8EB5;
            font-weight: 400;
            font-size: 16px;
            font-family: "Onest";
            background: #f3f5f9;
            border-radius: 8px;
    
            &_active {
                color: #37476A; 
            }
        }
    }

    
}


.\src\components\Stopwatch\index.tsx
------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";

import useStopwatch from "../../hooks/useStopwatch";
import { useEffect } from "react";

const CN = cn("Stopwatch");

export const formatTime = (timer: number) => {
    const getSeconds = `0${timer % 60}`.slice(-2);
    const minutes = Math.floor(timer / 60);
    const getMinutes = `0${minutes % 60}`.slice(-2);
    // const getHours = `0${Math.floor(timer / 3600)}`.slice(-2);
    //${getHours} :
    return `${getMinutes} : ${getSeconds}`;
};

type Props = {
    seconds: number;
    isStart: boolean;
    setResultSeconds: Function;
    timerOver: Function;
};

export default function Stopwatch(props: Props) {
    const { timer, isActive, isPaused, handleStart, handlePause, handleReset } =
        useStopwatch(0);

    useEffect(() => {
        if (timer === props.seconds) {
            handlePause();
            props.timerOver();
        }
    }, [timer]);

    useEffect(() => {
        if (props.isStart) {
            handleReset();
            handleStart();
        } else {
            handlePause();
        }
    }, [props.isStart]);

    useEffect(() => {
        if (isPaused && timer > 0) props.setResultSeconds(timer);
    }, [isPaused]);

    return (
        <div className={CN()}>
            <h1 className={CN("text")}>{formatTime(timer)}</h1>
        </div>
    );
}


.\src\components\Stopwatch\style.scss
-------------------------------------
.Stopwatch {
    display: flex;
    flex-flow: row nowrap;
    align-content: center;
    align-items: center;
    justify-content: center;
    width: 100%;
    min-height: 80px;

    &-text {
        align-self: center;
        color: #FFF;
        font-weight: 500;
        font-size: 36px;
        font-family: 'Onest';
        font-style: normal;
        line-height: 46px;
        letter-spacing: 0.02em;
    }
}

.\src\components\Tabs\index.tsx
-------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";
import { ReactElement, ReactNode, useState } from "react";
import Tab from "./Tab";

export enum TYPE_TABS {
    PERCENT = "percent",
    TEXT_VALUE = "value",
}

type Props = {
    children: Array<ReactNode>;
    type: TYPE_TABS;
};

export default function Tabs(props: Props) {
    const cnTabs = cn("Tabs");

    const children = props.children as ReactElement[];
    const [activeTab, setActiveTab] = useState(children[0].props["data-title"]);

    const onClickTabItem = (label: string) => {
        setActiveTab(label);
    };

    return (
        <div className={cnTabs()}>
            <ul className={cnTabs("list")}>
                {children.map((child) => {
                    return (
                        <Tab
                            key={child.props["data-title"]}
                            activeTab={activeTab}
                            label={child.props["data-title"]}
                            value={child.props["data-value"]}
                            color={child.props.color}
                            onClick={onClickTabItem}
                            percent={props.type === TYPE_TABS.PERCENT}
                        />
                    );
                })}
            </ul>

            <div
                className={cnTabs("content")}
                style={{
                    borderTopLeftRadius:
                        activeTab === children[0].props["data-title"]
                            ? "0px"
                            : "16px",
                    borderTopRightRadius:
                        activeTab === children[5].props["data-title"]
                            ? "0px"
                            : "16px",
                }}
            >
                {children.map((child) => {
                    if (child.props["data-title"] !== activeTab)
                        return undefined;
                    return child;
                })}
            </div>
        </div>
    );
}


.\src\components\Tabs\style.scss
--------------------------------
.Tabs {
    margin-bottom: 20px;
    color: #37476a;
    font-weight: 600;
    font-size: 20px;
    font-family: "Montserrat Alternates";
    font-style: normal;
    line-height: 24px;

    &-list {
        display: flex;
        flex-flow: row nowrap;
        gap: 8px;
        justify-content: space-around;
        width: 100%;
    }

    &-content {
        display: flex;
        flex-direction: column;
        gap: 16px;
        align-items: flex-start;
        width: 100%;
        padding: 16px;
        overflow: auto;
        background-color: white;
        border-bottom-right-radius: 16px;
        border-bottom-left-radius: 16px;
    }
}


.\src\components\Tabs\Tab\index.tsx
-----------------------------------
import React from "react";
import "./style.scss";
import { cn } from "@bem-react/classname";
import { ReactSVG } from "react-svg";
import noteIcon from "../icons/note-icon.svg";

type TabItem = {
    activeTab: string;
    label: string;
    onClick: Function;
    value: string;
    color: string;
    percent?: boolean;
};

export default function Tab({
    activeTab,
    label,
    onClick,
    value,
    color = "#2477F4",
    percent = false,
}: TabItem) {
    const cnTabs = cn("TabItem");

    const funcClick = () => {
        onClick(label);
    };

    return (
        <li
            className={cnTabs("tab-list-item", { active: activeTab === label })}
            onClick={funcClick}
        >
            {activeTab === label && !percent && (
                <ReactSVG className={cnTabs("icon")} src={noteIcon} />
            )}
            {label}
            {activeTab === label && !percent && (
                <span
                    className={cnTabs("value")}
                    style={{ backgroundColor: color }}
                >
                    {value}
                </span>
            )}
            {activeTab === label && percent && (
                <span className={cnTabs("percent")} style={{ color: color }}>
                    {value}
                </span>
            )}
        </li>
    );
}


.\src\components\Tabs\Tab\style.scss
------------------------------------
.TabItem {
    font-weight: 600;
    font-size: 14px;
    font-family: "Montserrat Alternates";
    font-style: normal;
    line-height: 18px;

    &-value {
        gap: 4px;
        align-items: center;
        padding: 6px 12px;
        color: #fff;
        font-size: 14px;
        line-height: 16px;
        background: #4a1193;
        border-radius: 40px;
    }

    &-percent{
        font-weight: 600;
        font-size: 20px;
        font-family: "Montserrat Alternates"; 
    }

    &-icon {
        div {
            display: flex;
            align-items: center;
            justify-content: center;
        }
    }

    &-tab-list-item {
        display: inline-flex;
        flex-direction: row;
        flex-grow: 1;
        gap: 10px;
        align-items: center;
        justify-content: center;
        margin-bottom: 8px;
        padding: 10px;
        color: #37476a;
        font-weight: 500;
        font-size: 14px;
        font-family: "Montserrat Alternates";
        font-style: normal;
        line-height: 20px;
        background: #e3e9f6;
        border-radius: 8px;
        box-shadow: 3px -1px 4px rgb(134 151 187 / 30%);
        cursor: pointer;

        &_active {
            margin-bottom: 0;
            color: #37476a;
            font-weight: 600;
            font-size: 18px;
            line-height: 24px;
            background-color: white;
            border: solid white;
            border-width: 1px 1px 0;
            border-radius: 8px 8px 0 0;
            cursor: pointer;
        }
    }
}


.\src\components\TarifCard\index.tsx
------------------------------------
import { cn } from "@bem-react/classname";
import Background from "./assets/background.svg";
import BackgroundBlue from "./assets/backgroundBlue.svg";
import Cover from "./assets/cover.svg";
import Box from "./assets/box.svg";

import "./style.scss";
import { ReactSVG } from "react-svg";
import { addDaysToDate } from "../../@adapters/Time/convertDays";


function priceForOneRepetition(countRepetition: number, price: number): string {
    return (price / countRepetition).toFixed(2).replace(".", ",");
}

type Props = {
    title: string;
    price: number;
    duration: number;
    loads_limit: number;
    checked: boolean;
    onClick: Function;
};

export default function TarifCard(props: Props) {
    const cnCard = cn("TarifCard");
    const isTrial = props.price === 0;

    const options: Intl.DateTimeFormatOptions = {
        day: "2-digit",
        month: "2-digit",
        year: "2-digit",
    };

    const now = new Date();
    const nowString = now.toLocaleDateString("ru", options);

    return (
        <div
            className={cnCard({
                checked: props.checked,
            })}
        >
            {isTrial && (
                <div
                    className={cnCard("trial")}
                    onClick={() => props.onClick()}
                    style={{
                        backgroundImage: `url(${
                            !props.checked ? Background : BackgroundBlue
                        })`,
                    }}
                >
                    <div className={cnCard("title")}>{props.title}</div>
                    <ReactSVG src={Cover} />
                    <div className={cnCard("trial-desc")}>
                        {"бесплатная репетиция"}
                    </div>
                    <ReactSVG src={Box} />
                </div>
            )}
            {!isTrial && (
                <div
                    className={cnCard("tarif")}
                    onClick={() => props.onClick()}
                >
                    <div className={cnCard("title")}>{props.title}</div>
                    {props.loads_limit > 0 ? (
                        <div className={cnCard("tarif-counts")}>
                            <div className={cnCard("tarif-counts-text-bold")}>
                                {props.loads_limit}
                            </div>
                            <div className={cnCard("tarif-counts-text")}>
                                {" репетиций"}
                            </div>
                        </div>
                    ) : (
                        <div className={cnCard("tarif-counts-col")}>
                            <div className={cnCard("tarif-counts-text-bold")}>
                                {"Месячный"}
                            </div>
                            <div className={cnCard("tarif-counts-text")}>
                                {" безлимит"}
                            </div>
                        </div>
                    )}

                    <div className={cnCard("tarif-money")}>
                        <div className={cnCard("tarif-money-bold")}>
                            {props.price}
                        </div>
                        <div className={cnCard("tarif-money-text")}>
                            {"рублей"}
                        </div>
                    </div>

                    <div className={cnCard("tarif-money-period")}>
                        {props.duration === 0 ? (
                            <>
                                <div
                                    className={cnCard(
                                        "tarif-money-period-text",
                                    )}
                                >
                                    {" "}
                                    {"одна репетиция"}
                                </div>
                                <div
                                    className={cnCard(
                                        "tarif-money-period-text-bold",
                                    )}
                                >
                                    {priceForOneRepetition(
                                        props.loads_limit,
                                        props.price,
                                    ) + " руб"}
                                </div>
                            </>
                        ) : (
                            <>
                                <div
                                    className={cnCard(
                                        "tarif-money-period-text",
                                    )}
                                >
                                    {"с "}
                                    {nowString}
                                </div>
                                <div
                                    className={cnCard(
                                        "tarif-money-period-text",
                                    )}
                                >
                                    {"до "}
                                    {addDaysToDate(
                                        props.duration,
                                    ).toLocaleDateString("ru", options)}
                                </div>
                            </>
                        )}
                    </div>
                </div>
            )}
        </div>
    );
}


.\src\components\TarifCard\style.scss
-------------------------------------
.TarifCard {
    flex-grow: 1;
    width: 100%;
    height: 100%;
    color: #031C3D;
    border-radius: 24px;
    cursor: pointer;


    &_checked {
        background: #2477F4;
        box-shadow: 0px 0px 24px rgba(36, 119, 244, 0.4);
        border-radius: 24px;

        span,
        div {
            color: #FFFFFF;
        }

    }

    &-trial {
        height: 100%;
        background-repeat: no-repeat;
        background-position: center center;

        display: flex;
        flex-flow: column nowrap;
        justify-content: start;
        align-items: center;

        padding: 10px;
        border-radius: 24px;

        &-desc {

            text-align: center;
            font-family: Montserrat Alternates;
            font-size: 16px;
            font-weight: 600;
            line-height: 18px;
        }
    }

    &-title {
        font-size: 24px;
        font-family: "Montserrat Alternates";
        font-weight: 700;
        padding-bottom: 12px;
    }

    &-tarif {
        width: 100%;
        padding: 10px;
        display: flex;
        flex-flow: column nowrap;
        justify-content: start;
        align-items: center;
        gap: 10px;

        font-family: 'Montserrat Alternates';
        font-weight: 700;
        height: 100%;
        color: #031C3D;



        &-counts {
            min-height: 45px;
            display: flex;
            flex-flow: row nowrap;
            justify-content: center;
            align-items: center;
            gap: 10px;
            color: #4B5F8A;
            font-size: 20px;
            font-family: "Montserrat Alternates";

            &-col {
                display: flex;
                flex-flow: column nowrap;
                justify-content: center;
                align-items: center;
                gap: 5px;
                color: #4B5F8A;
                font-size: 20px;
                font-family: "Montserrat Alternates";
            }

            &-text {
                font-weight: 500;

                &-bold {
                    font-weight: 700;
                }
            }
        }

        &-money {
            display: flex;
            flex-flow: column nowrap;
            justify-content: flex-start;
            padding-top: 20px;
            align-items: center;
            color: #2477F4;
            flex-grow: 1;
            gap: 10px;

            &-bold {
                font-size: 32px;
                line-height: 34px;
            }

            &-text {
                font-size: 20px;
                line-height: 22px;
            }
        }

        &-money-period {
            display: flex;
            flex-flow: column nowrap;
            justify-content: center;

            gap: 5px;
            align-items: center;
            color: #4B5F8A;

            &-text {
                color: #4B5F8A;
                text-align: center;
                font-family: Montserrat Alternates;
                font-size: 14px;
                font-weight: 500;

                &-bold {
                    font-size: 16px;
                    line-height: 18px;
                }
            }
        }
    }
}

.\src\components\TestStoreComponent\index.tsx
---------------------------------------------
import { useDispatch, useSelector } from "react-redux";
import { AppDispatch, RootState } from "../../store";
import { addToValue1, changeValue2 } from "../../store/slices/testSlice";

export default function TestStoreComponent() {
    const dispatch: AppDispatch = useDispatch();
    const value1: number = useSelector((state: RootState) => state.test.value1);
    const value2: string = useSelector((state: RootState) => state.test.value2);

    return (
        <>
            <div>
                <span>Value1 (number): {value1}</span>
                <button onClick={() => dispatch(addToValue1(1))}>+1</button>
            </div>
            <div>
                <span>Value2 (string): {value2}</span>
                <button onClick={() => dispatch(changeValue2(`${value2}a`))}>+a</button>
            </div>
        </>
    );
}


.\src\components\Timer\index.tsx
--------------------------------
import React, { useEffect, useState } from "react";
import { cn } from "@bem-react/classname";
import "./style.scss";
import { TIMER_STATUS } from "../../pages/RecodingPage";
import useTimer from "../../hooks/useTimer";
import { formatTime } from "../Stopwatch";

type Props = {
    seconds: number;
    isStart: boolean;
    setResultSeconds: Function;
    timerOver: Function;
};

export default function Timer(props: Props) {
    const cnTimer = cn("Timer");

    const { timer, isActive, isPaused, handleStart, handlePause, handleReset } =
        useTimer(props.seconds);

    useEffect(() => {
        if (timer === 0) {
            handlePause();
            props.timerOver();
        }
    }, [timer]);

    useEffect(() => {
        if (props.isStart) {
            handleReset();
            handleStart();
        } else {
            handlePause();
        }
    }, [props.isStart]);

    useEffect(() => {
        if (isPaused && timer !== props.seconds)
            props.setResultSeconds(props.seconds - timer);
    }, [isPaused]);

    return (
        <div className={cnTimer()}>
            <h1 className={cnTimer("text")}>{formatTime(timer)}</h1>
        </div>
    );
}


.\src\components\Timer\style.scss
---------------------------------
.Timer {
    display: flex;
    flex-flow: row nowrap;
    align-content: center;
    align-items: center;
    justify-content: center;
    width: 100%;
    min-height: 80px;

    &_hidden {
        display: none;
    }

    &-text {
        align-self: center;
        color: #FFF;
        font-weight: 500;
        font-size: 36px;
        font-family: 'Onest';
        font-style: normal;
        line-height: 46px;
        letter-spacing: 0.02em;
    }

}

.\src\components\tools\AuthMiddleware\index.tsx
-----------------------------------------------
import { FC, ReactElement } from "react";
import { useAppSelector } from "../../../hooks/redux";
import { useGetMeQuery } from "../../../store/api/user";
import "./style.scss";
import LoaderLogo from "../../Loader";

type IAuthMiddleware = {
    children: ReactElement;
};

const AuthMiddleware: FC<IAuthMiddleware> = ({ children }) => {
    /// этот компонент используется для того, чтобы при каждом обновлении
    /// страницы дергать защищенный роут getMe и проверять, что токен не протух
    const { accessToken } = useAppSelector((state) => state.user);

    const { isLoading } = useGetMeQuery(null, {
        skip: !accessToken,
    });

    if (isLoading) {
        return (
            <>
                <div className="preloader">
                    <LoaderLogo />
                </div>
                {/* auth middleware */}
            </>
        ); /// some loading splashscreen
    }

    return children;
};

export default AuthMiddleware;


.\src\components\tools\AuthMiddleware\style.scss
------------------------------------------------
html,
body {
    height: 100%;
}

.preloader {
    position: absolute;
    top: 50%;
    left: 50%;
    z-index: 2;
    transform: translate(-50%, -50%);
}


.\src\components\tools\AuthorizedRoute\index.tsx
------------------------------------------------
import { Outlet, Navigate, useLocation } from "react-router-dom";
import { useGetMeQuery } from "../../../store/api/user";
import RoutesEnum from "../../../models/routes";

import "./style.scss";
import LoaderLogo from "../../Loader";

export default function AuthorizedRoute() {
    const location = useLocation();

    const { isLoading, isFetching, data } = useGetMeQuery(null, {
        skip: false,
        refetchOnMountOrArgChange: true,
    });

    if (isLoading || isFetching) {
        return (
            <>
                <div className="preloader">
                    <LoaderLogo />
                </div>
                {/* require user */}
            </>
        ); // some loading splashscreen
    }

    // if (data!.data!.status === UserStatus.NO_QUESTIONNAIRE) {
    //     return (<Navigate to={RoutesEnum.SURVEY} state={{ from: location }} replace />);
    // }else{

    return data ? (
        <Outlet />
    ) : (
        <Navigate to={RoutesEnum.LOGIN} state={{ from: location }} replace />
    );
    //
    // }
}


.\src\components\tools\AuthorizedRoute\style.scss
-------------------------------------------------
html,
body {
    height: 100%;
}

.preloader {
    position: absolute;
    top: 50%;
    left: 50%;
    z-index: 2;
    transform: translate(-50%, -50%);
}


.\src\components\tools\UnauthorizedRoute\index.tsx
--------------------------------------------------
import { Navigate, Outlet, useLocation } from "react-router-dom";
import { useAppSelector } from "../../../hooks/redux";

export default function UnauthorizedRoute() {
    const accessToken = useAppSelector((state) => state.user.accessToken);
    const location = useLocation();

    return accessToken ? (
        <Navigate to="/" state={{ from: location }} replace />
    ) : (
        <Outlet />
    );
}


.\src\components\ui-kit\Button\index.tsx
----------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss"

const cnButton = cn("button");

export default function Button(
    props: React.DetailedHTMLProps<
        React.ButtonHTMLAttributes<HTMLButtonElement>,
        HTMLButtonElement
    >
) {
    const newProps = {...props, className: cnButton()}
    return (
        <button {...props} className={`${props.className} ${cnButton()}`}>
            {props.children}
        </button>
    );
}


.\src\components\ui-kit\Button\style.scss
-----------------------------------------
.button {
    padding: 20px 32px;
    color: white;
    font-weight: 700;
    font-size: 1.5rem;
    background: #2477F4;
    border: none;
    border-radius: 18px;
    font-family: Montserrat Alternates;

    &:disabled {
        opacity: 0.5;
    }

    &:hover:enabled {
        opacity: 0.9;
    }
}

.\src\components\ui-kit\DateInput\index.tsx
-------------------------------------------
import { cn } from "@bem-react/classname";
import "./style.scss";
import { useEffect, useState } from "react";

import Input from "../Input";
import isValidDate from "../../../tools/validations/dateValidation";

const cnDateInput = cn("date-input");

type NumStateAlias = [
    number | undefined,
    React.Dispatch<React.SetStateAction<number | undefined>>
];

interface IDateInputProps {
    label?: string;
    required?: boolean;
    dayState: NumStateAlias;
    monthState: NumStateAlias;
    yearState: NumStateAlias;
}

const MIN_YEAR = 1900;
const MAX_YEAR = new Date().getFullYear();

export default function DateInput(props: IDateInputProps) {
    const [day, setDay] = props.dayState;
    const [month, setMonth] = props.monthState;
    const [year, setYear] = props.yearState;

    const [isValid, setIsValid] = useState(true);

    useEffect(() => {
        if (day && month && year) {
            setIsValid(isValidDate(year, month, day));
        }
    }, [day, month, year]);

    return (
        <div className={cnDateInput("main-field")}>
            <Input
                style={{textAlign: "center"}}
                type="text"
                inputMode="numeric"
                placeholder="ДД"
                value={day}
                min={1}
                required={props.required}
                onChange={(e) => setDay(Number(e.target.value) || undefined)}
            />
            <Input
                style={{textAlign: "center"}}
                type="number"
                placeholder="ММ"
                value={month}
                min={1}
                max={12}
                required={props.required}
                onChange={(e) => setMonth(Number(e.target.value) || undefined)}
            />
            <Input
                style={{textAlign: "center"}}
                type="number"
                placeholder="ГГГГ"
                value={year}
                min={MIN_YEAR}
                max={MAX_YEAR}
                required={props.required}
                onChange={(e) => setYear(Number(e.target.value) || undefined)}
            />
        </div>
    );
}


.\src\components\ui-kit\DateInput\style.scss
--------------------------------------------
.date-input {
    &-main-field {
        display: grid;
        grid-template-columns: 1fr 1fr 2fr;
        gap: 10px;
        margin: 4px 0 0;
        font-size: 1.25rem;
    }

    & > input {
        text-align: center;
    }
}


.\src\components\ui-kit\Input\index.tsx
---------------------------------------
import { cn } from "@bem-react/classname";
import {
    DetailedHTMLProps,
    ForwardRefRenderFunction,
    InputHTMLAttributes,
    LegacyRef,
    forwardRef,
    useState,
} from "react";

import HideIcon from "./assets/hide.svg";
import ShowIcon from "./assets/show.svg";

import "./style.scss";
import { ReactSVG } from "react-svg";

const cnInput = cn("new-input");

type InputProps = DetailedHTMLProps<
    InputHTMLAttributes<HTMLInputElement>,
    HTMLInputElement
>;

type Props = InputProps & {
    className?: string;
    invalid?: boolean;
    customref?: LegacyRef<HTMLInputElement>;
};

export default function Input({ invalid = false, ...props }: Props) {
    const isPassword = props.type === "password";
    const [showPassword, setShowPassword] = useState(false);

    return (
        <div className={cnInput()}>
            <input
                {...(props as InputProps)}
                ref={props.customref}
                type={
                    isPassword
                        ? showPassword
                            ? "text"
                            : "password"
                        : props.type
                }
                className={`${props.className} ${cnInput("input", {
                    password: isPassword,
                    invalid: invalid,
                    numeric: props.type === "number",
                })}` }
            />
            {isPassword && (
                <ReactSVG
                    className={cnInput("eye")}
                    src={showPassword ? HideIcon : ShowIcon}
                    wrapper="span"
                    onClick={(e) => {
                        setShowPassword((prev) => !prev);
                    }}
                />
            )}
        </div>
    );
}

const ForwardedInputFunc: ForwardRefRenderFunction<HTMLInputElement, Props> = (
    props,
    ref
) => <Input customref={ref} {...props} />;

export const ForwardedInput = forwardRef(ForwardedInputFunc);


.\src\components\ui-kit\Input\style.scss
----------------------------------------
.new-input {
    display: flex;
    align-items: center;
    padding: 8px 0;

    &-input {
        width: 100%;
        padding: 12px 16px;

        background: transparent;
        border: 2px solid #b2c2e4;
        border-radius: 16px;

        color: #37476A;
        font-family: Montserrat Alternates;
        font-size: 20px;
        font-style: normal;
        font-weight: 600;
        line-height: normal;

        &_password {
            padding: 18px 45px 18px 16px;
        }

        &:focus {
            border-color: #2477f4;
        }

        &_invalid {
            border-color: #f35b60;
        }

        &_numeric {

            &::-webkit-outer-spin-button,
            &::-webkit-inner-spin-button,
            & {
                margin: 0;
                appearance: none;
                appearance: textfield !important;
            }
        }

        &::placeholder {
            color: #7C8EB5;
            font-family: Montserrat Alternates;
            font-size: 18px;
            font-style: normal;
            font-weight: 500;
            line-height: normal;
        }
    }


    &-eye {
        margin-left: -45px;
        cursor: pointer;
    }
}

.\src\components\ui-kit\InputHeader\index.tsx
---------------------------------------------
import { DetailedHTMLProps, LabelHTMLAttributes, useState } from "react";

import { cn } from "@bem-react/classname";

import HelpIcon from "./assets/help-icon.svg";
import "./style.scss";
import { ReactSVG } from "react-svg";

type InputHeaderProps = {
    text?: string;
    wrong?: boolean;
    wrongText?: string;
    helpText?: string;
};

const cnInputHeader = cn("input-header");

export default function InputHeader(props: InputHeaderProps) {
    const [helpVisible, setHelpVisible] = useState(false);
    return (
        <div className={cnInputHeader()}>
            <span>
                {props.text && (
                    <span
                        className={cnInputHeader("label-text", {
                            wrong: props.wrong,
                        })}
                    >
                        {props.text}
                    </span>
                )}
                {props.wrong && props.wrongText && (
                    <span className={cnInputHeader("wrong-text")}>
                        {props.wrongText}
                    </span>
                )}
            </span>
            {props.helpText && (
                <>
                    <ReactSVG
                        className={cnInputHeader("help-icon", {
                            selected: helpVisible,
                        })}
                        src={HelpIcon}
                        onMouseEnter={() => setHelpVisible(true)}
                        onMouseLeave={() => setHelpVisible(false)}
                    />
                    <div
                        className={cnInputHeader("help-window", {
                            hidden: !helpVisible,
                        })}
                    >
                        {props.helpText}
                    </div>
                </>
            )}
        </div>
    );
}


.\src\components\ui-kit\InputHeader\style.scss
----------------------------------------------
.input-header {
    position: relative;
    display: flex;
    justify-content: space-between;

    &-label-text {
        padding: 0 10px 0 16px;
        color: #7C8EB5;
        font-family: Montserrat Alternates;
        font-size: 16px;
        font-style: normal;
        font-weight: 600;
        line-height: normal;

        &_wrong {
            color: #f35b60;
        }
    }

    &-wrong-text {
        padding: 0 0 0 4px;
        color: #f35b60;
        font-weight: 500;
        font-size: 0.75rem;
    }

    &-help-icon {
        color: #b2c2e4;

        &>* {
            pointer-events: none;
        }

        &_selected {
            color: #7c8eb5;
        }
    }

    &-help-window {
        position: absolute;
        top: 72px;
        right: 0;
        z-index: 1;
        width: 385px;
        padding: 16px;
        color: #37476a;
        font-weight: 400;
        font-size: 0.75rem;
        line-height: 16px;
        background-color: white;
        border: 1px solid #b2c2e4;
        border-radius: 16px;

        &_hidden {
            display: none;
        }
    }
}

.\src\components\ui-kit\IntegerInput\index.tsx
----------------------------------------------
type IntegerInputProps = React.DetailedHTMLProps<
    React.InputHTMLAttributes<HTMLInputElement>,
    HTMLInputElement
>;

export default function IntegerInput(props: IntegerInputProps) {
    function validateNumber(value: any) {
        return !isNaN(Number(value));
    }

    function validateInput(event: React.KeyboardEvent<HTMLInputElement>) {
        const keyInList = (key: string) =>
            ["Backspace", "Delete", "ArrowLeft", "ArrowRight", "Tab"].includes(key);

        const keyIsModifier = (event: React.KeyboardEvent<HTMLInputElement>) =>
            event.altKey || event.shiftKey || event.ctrlKey || event.metaKey;

        if (
            !(
                keyIsModifier(event) ||
                keyInList(event.key) ||
                validateNumber(event.key)
            )
        ) {
            event.preventDefault();
        }
    }

    return (
        <input
            {...props}
            onKeyDown={(event) => {
                validateInput(event);
                props.onKeyDown && props.onKeyDown(event);
            }}
            onPaste={(event) => {
                !validateNumber(event.clipboardData.getData("Text")) &&
                    event.preventDefault();
            }}
        />
    );
}


.\src\components\ui-kit\Link\index.tsx
--------------------------------------
import { cn } from "@bem-react/classname";

import Arrow from "./assets/arrow.svg";

import "./style.scss";
import { ReactSVG } from "react-svg";

const cnLink = cn("link");

type LinkProps = {
    arrow?: "left" | "right";
} & React.DetailedHTMLProps<
    React.AnchorHTMLAttributes<HTMLAnchorElement>,
    HTMLAnchorElement
>;

export default function Link(props: LinkProps) {
    return (
        <a {...props} className={`${props.className} ${cnLink()}`}>
            {props.arrow === "left" && (
                <ReactSVG
                    src={Arrow}
                    wrapper="span"
                    className={cnLink("arrow", { rotated: true })}
                />
            )}
            {props.children}
            {props.arrow === "right" && (
                <ReactSVG
                    src={Arrow}
                    wrapper="span"
                    className={cnLink("arrow")}
                />
            )}
        </a>
    );
}


.\src\components\ui-kit\Link\style.scss
---------------------------------------
.link {
    color: #2477f4;
    text-decoration: none;
    cursor: pointer;

    &:hover {
        opacity: 0.75;
    }

    &-arrow {
        padding: 0 0 0 14px;

        &_rotated {
            padding: 0 14px 0 0;

            & svg {
                rotate: 180deg;
                color: #2477f4;
            }
        }
    }
}


.\src\components\ui-kit\Tab\index.tsx
-------------------------------------
import { MouseEventHandler } from "react";
import { cn } from "@bem-react/classname";

import "./style.scss";

type TabProps = {
    selected?: boolean;
    onClick?: MouseEventHandler<HTMLButtonElement>;
    children?: React.ReactNode;
};

const cnTab = cn("tab");
export default function Tab(props: TabProps) {
    return <button onClick={props.onClick} className={cnTab("button", {selected: props.selected})}>{props.children}</button>;
}


.\src\components\ui-kit\Tab\style.scss
--------------------------------------
.tab {
    &-button {
        padding: 12px 32px;
        color: #ffb800;
        font-weight: 600;
        white-space: nowrap;
        background: none;
        border: none;
        border: thin solid #ffb800;
        border-radius: 8px;
        font-family: Montserrat Alternates;

        &_selected {
            color: white;
            background: #ffb800;
            box-shadow: 0 4px 13px rgb(255 184 0 / 25%);
        }
    }
}


.\src\components\Upload\index.tsx
---------------------------------
import { cn } from "@bem-react/classname";
import "./style.scss";

import { useContext, useEffect, useRef, useState } from "react";

import { VideoUploadContext } from "../RepetitionComponents/RepetitionStart";
import { MAX_MINUTES_FOR_VIDEO, MIN_MINUTES_FOR_VIDEO } from "../../constants";

export default function Upload() {
    const cnUpload = cn("cnUpload");
    const [dragActive, setDragActive] = useState(false);
    const [videoFile, setVideoFile] = useState<File>();
    const [IsValid, setIsValid] = useState(true);

    const { setCurrentFile } = useContext(VideoUploadContext);

    const inputRef = useRef<HTMLInputElement>(null);

    const handleFile = (file: any) => {
        if (file.type === "video/mp4") setVideoFile(file);
        else {
            setIsValid(false);
        }
    };

    // handle drag events
    const handleDrag = function (e: any) {
        e.preventDefault();
        e.stopPropagation();
        if (e.type === "dragenter" || e.type === "dragover") {
            setDragActive(true);
        } else if (e.type === "dragleave") {
            setDragActive(false);
        }
    };

    // triggers when file is dropped
    const handleDrop = function (e: any) {
        e.preventDefault();
        e.stopPropagation();
        setDragActive(false);
        if (e.dataTransfer.files && e.dataTransfer.files[0]) {
            handleFile(e.dataTransfer.files[0]);
        }
    };

    // triggers when file is selected with click
    const handleChange = function (e: any) {
        e.preventDefault();
        if (e.target.files && e.target.files[0]) {
            handleFile(e.target.files[0]);
        }
    };

    useEffect(() => {
        if (videoFile) setCurrentFile(videoFile);
    }, [videoFile]);

    const onButtonClick = () => {
        inputRef.current?.click();
    };

    return (
        <div className={cnUpload()}>
            <div className={cnUpload("description")}>
                <span className={cnUpload("description-gray")}>
                    Если у вас имеется готовое видео, которое вы хотите
                    проанализировать - просто загрузите его с устройства.
                </span>
                <span className={cnUpload("description-blue")}>
                    Минимальная длительность видео - {MIN_MINUTES_FOR_VIDEO} минуты, максимальная -
                    {MAX_MINUTES_FOR_VIDEO} минут. Формат видео: MP4, минимальное разрешение 640х480.
                </span>
                <span className={cnUpload("description-gray")}>
                    Лицо спикера в кадре должно быть единственным и четко
                    различимым. Жестикуляция не должна перекрывать лицо.<br/> Видео
                    должно быть записано в хорошо освещенном и не зашумленном
                    помещении.
                </span>
                <span className={cnUpload("description-blue")} style={{fontSize: "14px"}}>
                    В случае невыполнения данных требований, результаты анализа
                    могут оказаться некорректными.
                </span>
            </div>
            <div className={cnUpload("dropdown")}>
                <form
                    className={cnUpload("dropdown-form-file-upload")}
                    onDragEnter={handleDrag}
                    onSubmit={(e) => e.preventDefault()}
                >
                    <input
                        ref={inputRef}
                        type="file"
                        className={cnUpload("dropdown-input-file-upload")}
                        accept="video/mp4"
                        onChange={handleChange}
                    />
                    <label
                        className={cnUpload("dropdown-label-file-upload", {
                            "drag-active": dragActive,
                            wrong: !IsValid,
                        })}
                        id="label-file-upload"
                        htmlFor="input-file-upload"
                    >
                        <div>
                            <p className={cnUpload("dropdown-text-upload")}>
                                Перетащите видео сюда или{" "}
                                <span
                                    className={cnUpload(
                                        "dropdown-upload-button"
                                    )}
                                    onClick={onButtonClick}
                                >
                                    загрузите файл
                                </span>
                            </p>
                            {!IsValid && (
                                <span
                                    className={cnUpload(
                                        "dropdown-text-upload-wrong"
                                    )}
                                >
                                    Выберите файл c расширением mp4
                                </span>
                            )}
                        </div>
                    </label>
                    {dragActive && (
                        <div
                            className={cnUpload("dropdown-drag-file-element")}
                            onDragEnter={handleDrag}
                            onDragLeave={handleDrag}
                            onDragOver={handleDrag}
                            onDrop={handleDrop}
                        ></div>
                    )}
                </form>
            </div>
        </div>
    );
}


.\src\components\Upload\style.scss
----------------------------------
.cnUpload {
    &-header {
        display: flex;
        flex-flow: row nowrap;
        gap: 10px;
        align-items: center;
        justify-content: start;
        padding: 10px;
        font-size: 16px;
        line-height: 20px;

        &-title {
            flex-grow: 1;
            color: #37476A;
            font-weight: 600;
            font-size: 1em;
            font-family: 'Montserrat Alternates';
            font-style: normal;
            line-height: 1em;
        }

        &-icon {
            display: flex;
            flex-flow: row nowrap;
            align-items: center;
            justify-content: center;
            width: 28px;
        }
    }

    &-description {
        display: flex;
        flex-flow: column nowrap;
        gap: 10px;
        align-items: flex-start;
        justify-content: start;
        padding: 10px 10px 15px;
        font-size: 16px;
        line-height: 20px;

        

        &-gray {
            color: #7C8EB5;
            font-weight: 400;
            font-size: 16px;
            font-family: 'Onest';
            font-style: normal;
            line-height: 20px;
            word-break: break-all;
        }

        &-blue {
            color: #2477F4;
            font-weight: 500;
            font-size: 1em;
            font-family: 'Onest';
            font-style: normal;
            line-height: 1em;
        }

    }

    &-dropdown {
        width: 100%;
        height: 16rem;

        &-form-file-upload {
            position: relative;
            max-width: 100%;
            height:100%;
            text-align: center;
        }

        &-input-file-upload {
            display: none;
        }

        &-label-file-upload {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
            background: #F3F5F9;
            border: 3px dashed #D0D8E8;
            border-radius: 28px;

            &_drag-active {
                background-color: #fff;
            }

            &_wrong{
                border-color: #FF4E78;
            }
        }



        &-text-upload{
            color: #4B5F8A;
            font-weight: 400;
            font-size: 20px;
            font-family: 'Onest';
            font-style: normal;
            line-height: 26px;

            &-wrong{
                color: #FF4E78;
                font-weight: 400;
                font-size: 20px;
                font-family: 'Onest';
                font-style: normal;
                line-height: 26px;
            }
        }

        &-upload-button {
            color: #2477F4;
            font-weight: 400;
            font-size: 20px;
            font-family: 'Onest';
            font-style: normal;
            line-height: 26px;
            cursor: pointer;
            text-decoration-line: underline;
        }

        &-upload-button:hover {
            text-decoration-line: underline;
        }

        &-drag-file-element {
            position: absolute;
            inset: 0;
            width: 100%;
            height: 100%;
            border-radius: 1rem;
        }
    }

}


.\src\components\VideoBlock\index.tsx
-------------------------------------
import {
    Dispatch,
    SetStateAction,
    createContext,
    useEffect,
    useState,
} from "react";
import "./style.scss";
import VideoItem from "./VideoItem";
import Pagination from "../Pagination";
import { cn } from "@bem-react/classname";
import ModalWindow from "../ModalWindow/ModalWindow";
import {
    useGetMainVideoQuery,
    useLazyGetMainVideoQuery,
} from "../../store/api/userVideo";
import { IVideoFromBack } from "../../models/video";

import VideoModalContent from "./VideoModalContent";

export const ModalWindowContext = createContext({
    isModal: false,
    setModal: (() => {}) as Dispatch<SetStateAction<boolean>>,
});

export default function VideoBlock() {
    /* --------------------------- GETTING VIDEOS ---------------------------*/
    const [currentVideos, setCurrentVideos] = useState<IVideoFromBack[]>([]);
    const [countAllVideos, setCountAllVideos] = useState(1);

    const [currentPage, setCurrentPage] = useState(0);
    const videosPerPage = 6;

    const [getCurrentMainVideos, currentMainVideos] =
        useLazyGetMainVideoQuery();
    const { isSuccess, isLoading } = currentMainVideos;

    useEffect(() => {
        if (isLoading) console.log("isLoading");
    }, [isLoading]);

    const { data } = useGetMainVideoQuery({
        page: currentPage,
        limit: videosPerPage,
    });

    useEffect(() => {
        if (data && data?.data) {
            setCurrentVideos(data!.data!.videos);
            setCountAllVideos(data!.data!.total_videos);
            console.log("------------------------------------");
            console.log("currentVideos", data!.data!.videos);
            console.log("------------------------------------");
        }
    }, [data]);

    useEffect(() => {
        if (currentPage && currentPage > 0) {
            const getVideos = async () => {
                const result = await getCurrentMainVideos({
                    page: currentPage,
                    limit: videosPerPage,
                });

                if (result.data && result.data!.data)
                    setCurrentVideos(result.data!.data!.videos);
            };
            getVideos();
        }
    }, [currentPage]);

    /* --------------------------- PAGGINATION ---------------------------*/

    const paginate = (pageNumber: number) => {
        setCurrentPage(pageNumber);
    };

    const nextPage = (maxPage: number) => {
        setCurrentPage((prev) => (prev < maxPage - 1 ? prev + 1 : prev));
    };

    const prevPage = () =>
        setCurrentPage((prev) => (prev > 0 ? prev - 1 : prev));

    /* --------------------------- MODAL WINDOW ---------------------------*/
    const [isModal, setModal] = useState(false);
    const [modalVideo, setModalVideo] = useState<IVideoFromBack>();

    /* --------------------------- OPEN MODAL ---------------------------*/

    const clickOnVideo = async (el: IVideoFromBack) => {
        setModalVideo(el);
        setModal(true);
    };

    /* --------------------------- CODE ---------------------------*/

    const cnVideos = cn("video-block");

    return (
        <div className={cnVideos()}>
            <div className={cnVideos("video-grid")}>
                {currentVideos.map((el) => (
                    <VideoItem
                        key={el.id}
                        item={el}
                        clickFunction={() => clickOnVideo(el)}
                    />
                ))}
            </div>
            <Pagination
                videosPerPage={videosPerPage}
                totalVideos={countAllVideos}
                paginate={paginate}
                funcNextPage={nextPage}
                funcPrevPage={prevPage}
                currentPage={currentPage + 1}
            />
            <ModalWindow isVisible={isModal} onClose={() => setModal(false)}>
                <ModalWindowContext.Provider value={{ isModal, setModal }}>
                    {modalVideo && (
                        <VideoModalContent modalVideo={modalVideo} />
                    )}
                </ModalWindowContext.Provider>
            </ModalWindow>
        </div>
    );
}


.\src\components\VideoBlock\style.scss
--------------------------------------
.video-block {
    display: flex;
    flex-flow: column;
    align-items: center;
    justify-content: center;
    width: 100%;

    &-video-grid {
        display: flex;
        flex-flow: row wrap;
        gap: 20px;
        align-content: space-around;
        align-items: stretch;
        justify-content: space-around;
        max-width: 1600px;
    }

    // &-video-grid{
    //    display: grid;
    //    grid-template-rows: repeat(2, 300px);
    //    grid-template-columns: repeat(3, 1fr);
    //    gap: 16px;
    //    align-content: space-around;
    //    align-items: stretch;
    //    justify-content: space-between;
    // }
}


.\src\components\VideoBlock\VideoItem\index.tsx
-----------------------------------------------
import { cn } from "@bem-react/classname";

import { IVideoFromBack } from "../../../models/video";
import VideoPlayer, { getPrettyDataTime } from "../../VideoPlayer";

import NoPhoto from "../../ProfilePreview/assets/no-photo.png";
import "./style.scss";

type Props = {
    item: IVideoFromBack;
    clickFunction: Function;
};

export default function VideoItem(props: Props) {
    const cnVideoItem = cn("video-item");

    return (
        <div className={cnVideoItem()}>
            <div
                className={cnVideoItem("video-block")}
                onClick={() => props.clickFunction()}
            >
                <VideoPlayer
                    url={`/api/video/${props.item.id}`}
                    controls={false}
                />
            </div>
            <div className={cnVideoItem("author-block")}>
                <div className={cnVideoItem("author-block-title")}>
                    {!props.item.channel_title && (
                        <div className={cnVideoItem("logo")}>
                            <img
                                className={cnVideoItem("logo-pic")}
                                src={NoPhoto}
                                alt=""
                            />
                        </div>
                    )}
                    <p>
                        {props.item.channel_title
                            ? props.item.channel_title
                            : "Источник"}
                    </p>
                </div>
                <p>{getPrettyDataTime(props.item.upload_date)}</p>
            </div>
            <p className={cnVideoItem("title")}>{props.item.title}</p>
        </div>
    );
}


.\src\components\VideoBlock\VideoItem\style.scss
------------------------------------------------
.video-item {
    display: flex;
    flex-flow: column nowrap;
    flex-grow: 1;
    width: 400px;
    max-width: 400px;
    padding: 0%;

    &-video-block {
        border-radius: 5%;
        cursor: pointer;
    }

    &-author-block {
        display: flex;
        flex-flow: row nowrap;
        align-items: center;
        justify-content: space-between;
        padding-top: 10px;
        color: #7c8eb5;
        font-weight: 400;
        font-size: 14px;
        font-style: normal;
        line-height: 15px;

        &-title {
            display: flex;
            flex-flow: row nowrap;
            align-items: center;
            justify-content: start;
            color: #37476a;
            font-weight: 600;
            font-size: 14px;
            font-family: "Montserrat Alternates";
            line-height: 15px;
        }
    }

    &-logo {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 28px;
        height: 28px;
        margin-right: 10px;
        overflow: hidden;
        border-radius: 100%;

        &-pic {
            width: auto;
            height: 100%;
        }
    }

    &-title {
        color: #000;
        font-weight: 500;
        font-size: 14px;
        font-family: "Onest";
        font-style: normal;
        line-height: 18px;
    }
}


.\src\components\VideoBlock\VideoModalContent\index.tsx
-------------------------------------------------------
import React, { useContext, useEffect, useState } from "react";
import VideoPlayer, { getPrettyDataTime } from "../../VideoPlayer";
import { cn } from "@bem-react/classname";
import { IVideoFromBack } from "../../../models/video";
import NoPhoto from "../../ProfilePreview/assets/no-photo.png";

import "./style.scss";
import { useGetTotalByIdQuery } from "../../../store/api/report";

import RoutesEnum from "../../../models/routes";
import { useNavigate } from "react-router-dom";
import { ModalWindowContext } from "..";
import { ReactSVG } from "react-svg";

import arrowIcon from "../assets/arrow-down.svg";
import { useGetTotalByIdTestQuery } from "../../../store/api/reportTest";
import { TotalDataItem, TotalType } from "../../../models/graph/total";
import { getTotalTitle } from "../../Report/helpers";

type Props = {
    modalVideo: IVideoFromBack;
};

export default function VideoModalContent({ modalVideo }: Props) {
    const navigate = useNavigate();

    const { setModal } = useContext(ModalWindowContext);

    /* --------------------------- GET TOTAL ---------------------------*/
    const { data } = useGetTotalByIdTestQuery(modalVideo.id);
    const [totalVideoInfo, setTotalVideoInfo] = useState<TotalDataItem>();
    const [canContinue, setCanContinue] = useState(false);

    useEffect(() => {
        if (data && data.data) {
            setTotalVideoInfo(data.data!.values);
            setCanContinue(true);
        }
    }, [data]);

    const clickDetailedBtn = () => {
        if (canContinue)
            navigate(RoutesEnum.DIARY + "/" + modalVideo.id, {
                state: { main: true },
            });
    };

    const cnModalContent = cn("VideoModalContent");

    return (
        <div className={cnModalContent()}>
            <div className={cnModalContent("video-row")}>
                <div className={cnModalContent("video-row-videoplayer")}>
                    <VideoPlayer
                        url={`/api/video/${modalVideo.id}`}
                        controls={true}
                        muted={true}
                    />
                </div>
                <div className={cnModalContent("video-row-description")}>
                    <div
                        className={cnModalContent(
                            "video-row-description-title-row"
                        )}
                    >
                        <p
                            className={cnModalContent(
                                "video-row-description-title-row-text"
                            )}
                        >
                            {modalVideo.title}
                        </p>

                        <p>
                            <img
                                src="/images/button-close.svg"
                                className={cnModalContent(
                                    "video-row-description-title-row-closebutton"
                                )}
                                onClick={() => setModal(false)}
                                alt="close"
                            />
                        </p>
                    </div>
                    <div
                        className={cnModalContent(
                            "video-row-description-times"
                        )}
                    >
                        {getPrettyDataTime(modalVideo.upload_date)}
                    </div>
                    <div
                        className={cnModalContent(
                            "video-row-description-author-block"
                        )}
                    >
                        <div
                            className={cnModalContent(
                                "video-row-description-author-block-logo"
                            )}
                        >
                            <img
                                className={cnModalContent(
                                    "video-row-description-author-block-logo-img"
                                )}
                                src={NoPhoto}
                                alt=""
                            />
                        </div>
                        <p
                            className={cnModalContent(
                                "video-row-description-author-block-name"
                            )}
                        >
                            {modalVideo.channel_title
                                ? modalVideo.channel_title
                                : "Источник"}
                        </p>
                    </div>

                    <div
                        className={cnModalContent(
                            "video-row-description-annotation-title"
                        )}
                    >
                        Аннотация
                    </div>
                    <div
                        className={cnModalContent(
                            "video-row-description-annotation-text"
                        )}
                    >
                        {modalVideo.description}
                    </div>

                    <button
                        className={cnModalContent(
                            "video-row-description-btn-info",
                            { not_allowed: !canContinue }
                        )}
                        onClick={clickDetailedBtn}
                    >
                        Подробные результаты анализа
                        <ReactSVG
                            src={arrowIcon}
                            wrapper="span"
                            className={cnModalContent(
                                "video-row-description-btn-info-icon"
                            )}
                        />
                    </button>
                </div>
            </div>

            <div className={cnModalContent("analyze-row")}>
                {totalVideoInfo &&
                    Object.entries(TotalType).map((el, idx) => (
                        <div
                            key={idx}
                            className={cnModalContent("analyze-row-item")}
                        >
                            <div
                                className={cnModalContent("analyze-row-item-pie")}
                                style={
                                    {
                                        "--p": totalVideoInfo[
                                            el[1] as keyof typeof totalVideoInfo
                                        ],
                                    } as React.CSSProperties
                                }
                            >
                                {Number(
                                    totalVideoInfo[
                                        el[1] as keyof typeof totalVideoInfo
                                    ]
                                ).toFixed(2)}
                                %
                            </div>
                            <p className={cnModalContent("analyze-row-item-pie-text")}>{getTotalTitle(el[1])}</p>
                        </div>
                    ))}
            </div>
        </div>
    );
}


.\src\components\VideoBlock\VideoModalContent\style.scss
--------------------------------------------------------
.VideoModalContent {
    max-width: 1200px;

    &-video-row {
        display: grid;
        grid-template-rows: min-content;
        grid-template-columns: 800px 1fr;
        gap: 14px;
        height: 450px;
        max-height: 450px;

        &-videoplayer {
            width: auto;
            height: auto;
            height: 450px;
            max-height: 450px;
            overflow: hidden;

            video {
                height: 450px;
                max-height: 450px;
            }
        }

        &-description {
            display: flex;
            flex-flow: column nowrap;

            &-title-row {
                display: flex;
                flex-flow: row nowrap;
                gap: 10px;
                align-items: flex-start;
                justify-content: space-between;

                &-text {
                    padding-bottom: 10px;
                    color: #000;
                    font-weight: 500;
                    font-size: 1.5rem;
                    font-style: normal;
                    line-height: 24px;
                }

                &-closebutton {
                    align-self: flex-start;
                    cursor: pointer;
                    fill: #7c8eb5;
                }

                &-closebutton:hover {
                    fill: #000b22;
                }
            }

            &-times {
                color: #7c8eb5;
                font-weight: 400;
                font-size: 16px;
                font-family: "Onest";
                font-style: normal;
                line-height: 20px;
            }

            &-author-block {
                display: flex;
                flex-flow: row nowrap;
                align-items: center;
                justify-content: start;
                padding: 8px 0;

                &-logo {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    width: 28px;
                    height: 28px;
                    margin-right: 10px;
                    overflow: hidden;
                    border-radius: 100%;

                    &-img {
                        width: 100%;
                        height: 100%;
                    }
                }

                &-name {
                    color: #37476a;
                    font-weight: 600;
                    font-size: 16px;
                    font-family: "Montserrat Alternates";
                    font-style: normal;
                    line-height: 17px;
                }
            }

            &-annotation {
                &-title {
                    padding: 10px 0;
                    color: #7c8eb5;
                    font-weight: 500;
                    font-size: 12px;
                    font-family: "Onest";
                    font-style: normal;
                    line-height: 13px;
                }

                &-text {
                    flex-grow: 1;
                    overflow-y: auto;
                    color: #000;
                    font-weight: 400;
                    font-size: 18px;
                    font-style: normal;
                    line-height: 20px;
                }
            }

            &-btn-info {
                display: flex;
                gap: 8px;
                align-items: center;
                justify-content: center;
                width: 100%;

                // margin-top: 20px;
                padding: 16px;
                color: #fff;
                font-weight: 600;
                font-size: 1rem;
                font-family: "Montserrat Alternates";
                font-style: normal;
                background-color: #ffb800;
                border: 0;
                border-radius: 9px;

                &-icon svg {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }

                &_not_allowed {
                    cursor: not-allowed;
                }
            }
        }
    }

    &-analyze-row {
        display: grid;
        grid-template-columns: repeat(6, 1fr);
        gap: 10px;
        align-items: start;
        justify-content: space-between;
        justify-items: stretch;
        width: 100%;
        padding-top: 20px;
        font-family: "Montserrat Alternates";

        &-item {
            display: flex;
            flex-flow: column nowrap;
            align-content: center;
            align-items: center;
            justify-content: center;

            &-pie {
                --p: 20;
                --b: 13px;
                --c: #2477f4;
                --w: 85px;

                position: relative;
                display: inline-grid;
                width: var(--w);
                margin: 5px;
                color: var(--c);
                font-weight: 600;
                font-size: 14px;
                font-style: normal;
                line-height: 20px;
                aspect-ratio: 1;
                place-content: center;
                animation: p 1s 0.4s both;

                &-text {
                    color: #37476a;
                    font-weight: 600;
                    font-size: 14px;
                    font-style: normal;
                    line-height: 15px;
                    text-align: center;
                }

                &::before,
                &::after {
                    position: absolute;
                    border-radius: 50%;
                    content: "";
                }

                &::before {
                    inset: 0;
                    background:
                        radial-gradient(farthest-side, var(--c) 98%, #0000)
                            top/var(--b) var(--b) no-repeat,
                        conic-gradient(var(--c) calc(var(--p) * 1%), #0000 0);
                    mask: radial-gradient(
                        farthest-side,
                        #0000 calc(99% - var(--b)),
                        #000 calc(100% - var(--b))
                    );
                }

                &::after {
                    inset: calc(50% - var(--b) / 1.95);
                    background: var(--c);
                    transform: rotate(calc(var(--p) * 3.6deg))
                        translateY(calc(50% - var(--w) / 2));
                }
            }
        }
    }

    @media (height <= 700px) {
        &-video-row {
            height: 300px;
            max-height: 300px;

            &-videoplayer {
                height: 300px;
                max-height: 300px;

                video {
                    height: 300px;
                    max-height: 300px;
                }
            }
        }
    }
}

@property --p {
    syntax: "<number>";
    inherits: true;
    initial-value: 0;
}

@keyframes p {
    from {
        --p: 0;
    }
}


.\src\components\VideoLoad\index.tsx
------------------------------------
import { cn } from "@bem-react/classname";
import { Fragment, useEffect, useState } from "react";
import ReactPlayer from "react-player";
import { IVideoStatus } from "../../models/video";

import DescriptionArchiveVideo from "../Archive/DescriptionVideo";

import { convertTime, convertDate } from "../Archive/helpers";
import VideoLoadProgress from "../VideoLoadProgress";

type Props = {
    el: IVideoStatus;
    ind: number;
    handleClick?: Function;
    visible?: boolean;
    percent: string;
    isAllow: boolean;
};

export default function VideoLoad({
    el,
    ind,
    handleClick,
    visible,
    percent,
    isAllow,
}: Props) {
    const cnArchiveVideo = cn("archive-video");
    return (
        <div className={cnArchiveVideo()}>
            <div className={cnArchiveVideo("el")}>
                <Fragment key={el.id}>
                    <ReactPlayer
                        url={`api/video/${el.id}`}
                        width={"100%"}
                        height={"100%"}
                    />
                </Fragment>
            </div>
            <DescriptionArchiveVideo
                id={el.id}
                title={`${el.title}`}
                time={convertTime(el.duration)}
                date={convertDate(el.upload_date)}
                isAllow={isAllow}
            />
            <div className={cnArchiveVideo("panel")}>
                {/* сюда передавать процент прогресса */}
                {!visible && (
                    <VideoLoadProgress
                        citation={
                            percent < "70"
                                ? "Идёт анализ видео"
                                : "Еще чуть-чуть"
                        }
                        advice={el.quote}
                        percent={percent}
                    />
                )}
            </div>
        </div>
    );
}


.\src\components\VideoLoadProgress\index.tsx
--------------------------------------------
import { cn } from "@bem-react/classname";
import "./style.scss";

type Props = {
    citation?: string;
    advice?: string;
    percent?: string;
};

export default function VideoLoadProgress({
    citation = "Идет анализ видео...",
    advice = "Какие-то советики",
    percent = "33",
}: Props) {
    const cnVideoLoadProgress = cn("load-progress");

    return (
        <div className={cnVideoLoadProgress()}>
            <div className={cnVideoLoadProgress("title")}>{citation}</div>
            <div className={cnVideoLoadProgress("subtitle")}>{advice}</div>
            <div className={cnVideoLoadProgress("bar")}>
                <div
                    className={cnVideoLoadProgress("bar-fill")}
                    style={{ width: `${percent}%` }}
                ></div>
            </div>
        </div>
    );
}


.\src\components\VideoLoadProgress\style.scss
---------------------------------------------
.load-progress {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    width: 100%;
    padding: 15px 0;

    &-title {
        margin-bottom: 0.2rem;
        color: #37476a;
        font-weight: 600;
        font-size: 20px;
        font-family: "Montserrat Alternates";
        font-style: normal;
        line-height: normal;
    }

    &-subtitle {
        color: #7c8eb5;
        font-weight: 400;
        font-size: 16px;
        font-family: "Onest";
        font-style: normal;
        line-height: normal;
    }

    &-bar {
        position: relative;
        width: 100%;
        height: 20px;
        padding-right: 0;
        overflow: hidden;
        background: #f3f5f9;
        border-radius: 40px;
        transition: 5s;

        &-fill {
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            background: linear-gradient(to right, #2477f4 8%, #fff 18%, #2477f4 33%);
            background-size: 800px 104px;
            transition: 5s;
            animation-name: placeHolderShimmer;
            animation-duration: 5s;
            animation-timing-function: linear;
            animation-iteration-count: infinite;
            animation-fill-mode: forwards;
        }

        @keyframes placeHolderShimmer {
            0% {
                background-position: -800px 0
            }

            100% {
                background-position: 800px 0
            }
        }

    }
}

.\src\components\VideoNotice\index.tsx
--------------------------------------
import { UUID } from "crypto";
import React, { useEffect, useRef, useState } from "react";
import { cn } from "@bem-react/classname";
import Button from "../ui-kit/Button";

import "./style.scss";
import { ReactSVG } from "react-svg";

import editIcon from "./assets/edit.svg";
import receiveIcon from "./assets/receive-square.svg";
import { useUpdateVideoInfoByIdMutation } from "../../store/api/userVideo";

type Props = {
    idVideo: string;
    title: string;
    description: string;
};

export default function VideoNotice({ idVideo, title, description }: Props) {
    const cnVideoNotice = cn("VideoNotice");

    const [isEditable, setIsEditable] = useState(false);
    const textareaRef = useRef<HTMLTextAreaElement>(null);

    const [stateDescription, setStateDescription] = useState(description);

    const [updateVideoInfo, responseUpdate] = useUpdateVideoInfoByIdMutation();
    const {isSuccess, isError} = responseUpdate;


    const saveDescription = async () => {
        // console.log(textareaRef.current!.value);
        if (textareaRef.current!.value) {
            const newDescription = textareaRef.current!.value;
            console.log({
                id: idVideo,
                title: title,
                description: newDescription,
            })
            await updateVideoInfo({
                id: idVideo,
                title: title,
                description: newDescription,
            });
            setStateDescription(newDescription);
        }
        
        setIsEditable(false);
    };

    useEffect(()=>{
        if(isSuccess) console.log(responseUpdate)
    },[isSuccess])

    useEffect(()=>{
        if(isError) console.log(responseUpdate)
    },[isError])

    return (
        <div className={cnVideoNotice()}>
            {stateDescription.length === 0 && !isEditable && (
                <div className={cnVideoNotice("info-block")}>
                    <div className={cnVideoNotice("info")}>
                        Оставьте заметку с важными деталями, которые заметили
                        после просмотра, чтобы вернуться к ним позже во время
                        рефлексии.
                    </div>
                    <Button
                        className={cnVideoNotice("btn")}
                        onClick={() => setIsEditable(true)}
                    >
                        <ReactSVG
                            className={cnVideoNotice("icon")}
                            src={editIcon}
                        />
                        Добавить заметку
                    </Button>
                </div>
            )}
            {isEditable && (
                <div className={cnVideoNotice("edit-block")}>
                    <div className={cnVideoNotice("edit-block-textarea-block")}>
                        <textarea
                            className={cnVideoNotice("edit-block-textarea")}
                            // value={description.length === 0 ? "" : description}
                            defaultValue={stateDescription}
                            placeholder="Текст заметки"
                            ref={textareaRef}
                        ></textarea>
                    </div>
                    <div className={cnVideoNotice("edit-block-btn-block")}>
                        <Button
                            className={cnVideoNotice("btn")}
                            onClick={saveDescription}
                        >
                            <ReactSVG
                                className={cnVideoNotice("icon")}
                                src={receiveIcon}
                            />
                            Сохранить
                        </Button>
                    </div>
                </div>
            )}
            {stateDescription.length > 0 && !isEditable && (
                <div className={cnVideoNotice("edit-block")}>
                    <div className={cnVideoNotice("edit-block-textarea-block")}>
                        <textarea
                            className={cnVideoNotice("edit-block-textarea")}
                            value={stateDescription}
                            disabled
                        ></textarea>
                    </div>
                    <div className={cnVideoNotice("edit-block-btn-block")}>
                        <Button
                            className={cnVideoNotice("btn")}
                            onClick={() => setIsEditable(true)}
                        >
                            <ReactSVG
                                className={cnVideoNotice("icon")}
                                src={editIcon}
                            />
                            Редактировать
                        </Button>
                    </div>
                </div>
            )}
        </div>
    );
}


.\src\components\VideoNotice\style.scss
---------------------------------------
.VideoNotice {
    // height: 450px;
    // display: flex;
    width: 100%;
    height: 100%;

    &-info-block {
        display: flex;
        flex-flow: column nowrap;
        align-content: center;
        align-items: center;
        justify-content: center;
        width: 100%;
        height: 100%;
        padding-top: 20px;
    }

    &-edit-block{
        display: flex;
        flex-flow: column nowrap;
        gap: 10px;
        align-items: flex-end;
        height: 100%;
        // flex-grow: 1;
        padding-bottom: 20px;

        &-textarea-block{
            flex-grow: 10;
            align-self: stretch;
        }

        &-textarea{
            width: 100%;
            height: 100%;
            padding: 8px;
            color: #37476A;
            font-weight: 400;
            font-size: 16px;
            font-family: "Onest";
            background: #F3F5F9;
            border: 2px solid #B2C2E4;
            border-radius: 12px; 
            resize: none; 
        }

        &-btn-block{
            flex-grow: 1;
        }

    }

    &-info {
        margin-bottom: 30px;
        color: #7C8EB5; 
        font-weight: 400;
        font-size: 20px;
        font-family: "Onest";
        text-align: center;
    }

    &-btn {
        display: flex;
        flex-flow: row nowrap;
        gap: 8px; 
        padding: 8px 20px;
        color: #FFF;
        font-weight: 600;
        font-size: 16px;
        background: #ffb800;
        border-radius: 9px;
    }

    &-icon{
        div{
            display: flex;
            justify-content: center;
        }
    }
}


.\src\components\VideoPlayer\index.tsx
--------------------------------------
import { cn } from "@bem-react/classname";

import { useContext, useEffect, useRef, useState } from "react";
import ReactPlayer from "react-player";

import "./style.scss";
import { BaseReactPlayerProps, OnProgressProps } from "react-player/base";

import reloadPicture from "./assets/preload1.gif";

import { VideoTimeContext } from "../Context/helpers";
import LoaderLogo from "../Loader";

interface VideoPlayerProps extends BaseReactPlayerProps {
    title?: string;
}

/**
 * Function returns pretty data time accoding to rules projects(N hours ago or 30.05.2023)
 * @param {timestring} props Datatime from server lise 2023-05-20 18:08:40:372738273
 */
export function getPrettyDataTime(timestring: string) {
    // TO DO: create dict with options for hour, days (1 час назад, 3 часА назад)
    const current = new Date(timestring);
    const now = new Date();

    // One minute, hour, day in milliseconds
    const oneMinute = 1000 * 60;
    const oneHour = oneMinute * 60;
    const oneDay = oneHour * 24;

    // Calculating the time difference between two dates
    const diffInTime = now.getTime() - current.getTime() - 3 * oneHour;

    // Calculating the no. of days between two dates
    const diffInDays = Math.round(diffInTime / oneDay);
    if (diffInDays > 0 && diffInDays < 7) {
        return `${diffInDays} дней назад`;
    } else if (diffInDays === 0) {
        const diffInHours = Math.round(diffInTime / oneHour);
        return diffInHours > 0
            ? `${diffInHours} часов назад`
            : `${Math.round(diffInTime / oneMinute)} минут назад`;
    }
    const month = current.getMonth();
    return `${current.getDate()}.${
        month < 10 ? "0" + month : month
    }.${current.getFullYear()}`;
}



export default function VideoPlayer({
    title = "",
    ...props
}: VideoPlayerProps) {
    const cnVideoPlayer = cn("VideoPlayer");
    const videoRef = useRef<HTMLVideoElement | any>();

    const [onReady, setOnReady] = useState(false);
    // state for video playing
    const { currentTime, setCurrentTime, isPlaying, setIsPlaying, togglePlay } =
        useContext(VideoTimeContext);
    const [prevTime, setPrevTime] = useState(0);

    const changeCurrentTime = (e: OnProgressProps) => {
        // setCurrentTime(Math.floor(e.playedSeconds));
        // console.log("e.played", e.played);
        setCurrentTime(e.played * duration);
        // console.log("e.playedSeconds", e.playedSeconds);
        // setCurrentTime(Math.floor(e.playedSeconds));
    };
    useEffect(() => {
        if (currentTime || currentTime === 0) {
            if (Math.abs(currentTime - prevTime) > 1.1) {
                console.log("currentTime", currentTime);
                console.log("prevTime", prevTime);
                handleSeekTo();
            }
            // handleSeekTo();
            setPrevTime(currentTime);
        }
    }, [currentTime]);

    const handleSeekTo = () => {
        if (videoRef.current) {
            // console.log("videoRef.current", videoRef.current);
            videoRef.current.seekTo(currentTime);
            handlePlayPause();
        }
    };

    //  ----------- duration -------------

    const [duration, setDuration] = useState(0);

    //  ----------- play/pause -------------

    const handlePlayPause = () => {
        if (isPlaying) {
            togglePlay();
        }
    };

    useEffect(() => {
        if (videoRef.current && isPlaying) {
            setIsPlaying(true);
        }
    }, [isPlaying]);

    return (
        <div className={cnVideoPlayer()}>
            <div className={cnVideoPlayer({ unvisible: !onReady })}>
                <ReactPlayer
                    {...(props as VideoPlayerProps)}
                    width="720"
                    height="480"
                    ref={videoRef}
                    muted={true}
                    onReady={() => setOnReady(true)}
                    onProgress={changeCurrentTime}
                    onDuration={(videoDuration) => {
                        setDuration(videoDuration);
                    }}
                    playing={isPlaying}
                    onPlay={togglePlay}
                />
            </div>
            <div className={cnVideoPlayer({ unvisible: onReady })}>
                <LoaderLogo />
            </div>
        </div>
    );
}


.\src\components\VideoPlayer\style.scss
---------------------------------------
.VideoPlayer {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    overflow: hidden;
    border-radius: 16px;

    video {
        overflow: hidden;
        border-radius: 16px;
    }

    &_unvisible {
        display: none;
    }

    &-gif {
        width: 100%;
        max-width: 400px;
        height: 100%;
        max-height: 228px;
        overflow: hidden;
        border-radius: 16px;
    }
}


.\src\components\VideoProgressPanel\index.tsx
---------------------------------------------
import { cn } from "@bem-react/classname";
import "./style.scss";

type Props = {
    result: number[];
    type?: string;
};

export default function VideoProgressPanel({ result, type = "big" }: Props) {
    const analyzeItem = {
        id: 0,
        criteria: [
            {
                title: "связность",
            },
            {
                title: "аргументированность",
            },
            {
                title: "ясность",
            },
            {
                title: "динамизм",
            },
            {
                title: "убедительность",
            },
            {
                title: "соблюдение коммуникативной нормы",
            },
        ],
    };
    const cnVideoPanel = cn("video-panel");

    return (
        <div
            className={cnVideoPanel("analyze-row")}
            style={
                {
                    "--g": type === "big" ? "1em" : "0",
                    "--w": type === "big" ? "1248px" : "748px",
                } as React.CSSProperties
            }
        >
            {result && analyzeItem.criteria.map((item, ind) => (
                <div key={ind} className={cnVideoPanel("analyze-row-item")}>
                    <div
                        className="pie animate"
                        style={
                            {
                                "--p": result[ind],
                                "--w-i": type === "big" ? "100px" : "60px",
                                "--b": type === "big" ? "15px" : "10px",
                                "--fs-v": type === "big" ? "16px" : "10px",
                                "--ln-v": type === "big" ? "20px" : "13px",
                            } as React.CSSProperties
                        }
                    >
                        {Math.floor(result[ind])}%<div className="pie-helper"></div>
                    </div>
                    <p
                        style={
                            {
                                "--fs-t": type === "big" ? "16px" : "9.3px",
                                "--ln-t": type === "big" ? "17px" : "11.4px",
                            } as React.CSSProperties
                        }
                    >
                        {item.title}
                    </p>
                </div>
            ))}
        </div>
    );
}


.\src\components\VideoProgressPanel\style.scss
----------------------------------------------
@property --fs-t {
    syntax: "<string>";
    inherits: true;
    initial-value: 0;
}
@property --lh-t {
    syntax: "<string>";
    inherits: true;
    initial-value: 0;
}
@property --w {
    syntax: "<string>";
    inherits: true;
    initial-value: 0;
}
@property --g {
    syntax: "<string>";
    inherits: true;
    initial-value: 0;
}

.video-panel {
    --fs-t: 16px;
    --lh-t: 17px;
    --g: 1em;
    --w: 1248px;

    padding-top: 8px;

    &-analyze-row {
        // width: var(--w);
        // padding-top: 19.5px;

        display: grid;
        grid-template-columns: repeat(6, 1fr);
        gap: var(--g);
        align-items: center;
        justify-content: space-between;
        justify-items: stretch;
        width: 100%;
        font-family: "Montserrat Alternates";

        &-item {
            display: flex;
            flex-flow: column nowrap;
            align-content: center;
            align-items: center;
            justify-content: center;

            p {
                display: flex;
                align-items: center;
                color: #37476a;
                font-weight: 600;
                font-size: var(--fs-t);
                font-style: normal;
                line-height: var(--lh-t);
                text-align: center;
            }
        }
    }
}

@property --p {
    syntax: "<number>";
    inherits: true;
    initial-value: 0;
}
@property --w-i {
    syntax: "<string>";
    inherits: true;
    initial-value: 0;
}
@property --b {
    syntax: "<string>";
    inherits: true;
    initial-value: 0;
}
@property --fs-v {
    syntax: "<string>";
    inherits: true;
    initial-value: 0;
}
@property --lh-v {
    syntax: "<string>";
    inherits: true;
    initial-value: 0;
}

.pie {
    --p: 10;
    --b: 15px;
    --c: #2477f4;
    --w-i: 100px;
    --fs-v: 16px;
    --lh-v: 20px;

    position: relative;
    display: inline-grid;
    width: var(--w-i);
    margin: 5px;
    color: #2477f4;
    font-weight: 600;
    font-size: var(--fs-v);
    font-style: normal;
    line-height: var(--lh-v);
    aspect-ratio: 1;
    place-content: center;

    &-helper {
        position: absolute;
        z-index: 10;
        width: 60px;
        height: 60px;
        border: 10px solid #d9e0ef;
        border-radius: 50%;
    }
}

.pie::before,
.pie::after {
    position: absolute;
    z-index: 100;
    border-radius: 50%;
    content: "";
}

.pie::before {
    inset: 0;
    background: radial-gradient(farthest-side, var(--c) 98%, #0000) top/var(--b)
            var(--b) no-repeat,
        conic-gradient(var(--c) calc(var(--p) * 1%), #0000 0);
    mask: radial-gradient(
        farthest-side,
        #0000 calc(99% - var(--b)),
        #000 calc(100% - var(--b))
    );
    mask: radial-gradient(
        farthest-side,
        #0000 calc(99% - var(--b)),
        #000 calc(100% - var(--b))
    );
}

.pie::after {
    inset: calc(50% - var(--b) / 2);
    background: var(--c);
    transform: rotate(calc(var(--p) * 3.6deg))
        translateY(calc(50% - var(--w-i) / 2));
}

.animate {
    animation: p 1s 0.4s both;
}

@keyframes p {
    from {
        --p: 0;
    }
}


.\src\components\Сarousel\index.tsx
-----------------------------------
import { cn } from "@bem-react/classname";
import CarouselItem from "./CarouselItem";
import { ReactSVG } from "react-svg";

import arrow_left from "./arrows/arrow-left.svg";
import arrow_right from "./arrows/arrow-right.svg";

import Slider from "react-slick";

import "slick-carousel/slick/slick.css";
import "./slick-theme.scss";

import "./style.scss";
import { useGetMainVideoQuery } from "../../store/api/userVideo";
import { useEffect, useState } from "react";
import { IVideoFromBack } from "../../models/video";
import ModalWindow from "../ModalWindow/ModalWindow";
import { ModalWindowContext } from "../VideoBlock";
import CarouselModalContent from "./CarouselModalContent";

type ArrowProps = {
    className?: string;
    onClick?: any;
};

function SampleNextArrow(props: ArrowProps) {
    const { className,onClick } = props;
    return (
        <div className={className}>
            <ReactSVG
                src={arrow_right}    
                onClick={onClick}
            />
        </div>
        
    );
}

function SamplePrevArrow(props: ArrowProps) {
    const { className, onClick } = props;
    return (
        <div className={className}>
            <ReactSVG
                src={arrow_left}
                onClick={onClick}
            />
        </div>
    );
}

const cnСarouse = cn("Carousel");//className={cnСarouse()}

export default function Carousel() {

    /* --------------------------- GETTING VIDEOS ---------------------------*/

    const [currentVideos, setCurrentVideos] = useState<IVideoFromBack[]>([]);
    
    const { data } = useGetMainVideoQuery({
        page:0,
        limit:6,
        tutorial:true
    });

    useEffect(() => {
        if (data && data?.data) {
            setCurrentVideos(data!.data!.videos);
        }
    }, [data]);

    const settings = {
        dots: false,
        infinite: true,
        speed: 500,
        slidesToShow: 1,
        slidesToScroll: 1,
        nextArrow: <SampleNextArrow />,
        prevArrow: <SamplePrevArrow />,
    };

    /* --------------------------- MODAL WINDOW ---------------------------*/
    const [isModal, setModal] = useState(false);
    const [modalVideo, setModalVideo] = useState<IVideoFromBack>();

    /* --------------------------- OPEN MODAL ---------------------------*/

    const clickOnVideo = async (el: IVideoFromBack) => {
        setModalVideo(el);
        setModal(true);
    };

    /* --------------------------- CODE ---------------------------*/

    return (
        <div>
            <Slider {...settings} className={cnСarouse("main-container")}>
                {currentVideos && currentVideos.length>0 && (
                    <CarouselItem {...currentVideos[0]} key={currentVideos[0].id} onClick={()=>clickOnVideo(currentVideos[0])}/>
                )}
            </Slider>

            <ModalWindow isVisible={isModal} onClose={() => setModal(false)}>
                <ModalWindowContext.Provider value={{ isModal, setModal }}>
                    {modalVideo && (
                        <CarouselModalContent modalVideo={modalVideo} />
                    )}
                </ModalWindowContext.Provider>
            </ModalWindow>
        </div>
    );
}


.\src\components\Сarousel\slick-theme.scss
------------------------------------------
@charset "UTF-8";


/* Slider */

.slick-list {
    width: auto;

    .slick-loading & {
        
    }
}


/* Arrows */

.slick-prev,
.slick-next {
    position: absolute; 
    top: 50%;
    display: block;
    width: 40px;
    height: 40px;
    font-size: 0;
    line-height: 0px;
    transform: translate(0, -50%);
    transform: translate(0, -50%);
    transform: translate(0, -50%);
    cursor: pointer;
    fill: #7A8DA5; 
    fill-opacity: 0.5;

}

.slick-prev {
    left: -30px;
    display: inline;

    [dir="rtl"] & {
        right: -25px;
        left: auto;
    }

    &:hover {
        fill: #2477F4;
        fill-opacity: 1;
    }
}

.slick-next {
    right: -30px;

    [dir="rtl"] & {
        right: auto;
        left: -25px;
    }

    &:hover {
        fill: #2477F4;
        fill-opacity: 1;
    }
}

/* Dots */

.slick-dotted.slick-slider {
    margin-bottom: 30px;
}

.slick-dots {
    position: absolute;
    bottom: -25px;
    display: block;
    width: 100%;
    margin: 0;
    padding: 0;
    text-align: center;
    list-style: none;

    li {
        position: relative;
        display: inline-block;
        width: 20px;
        height: 20px;
        margin: 0 5px;
        padding: 0;
        cursor: pointer;

        button {
            display: block;
            width: 20px;
            height: 20px;
            padding: 5px;
            color: transparent;
            font-size: 0;
            line-height: 0px;
            background: transparent;
            border: 0;
            outline: none;
            cursor: pointer;

            &:hover, &:focus {
                outline: none;
                
            }

            &::before {
                position: absolute;
                top: 0;
                left: 0;
                width: 20px;
                height: 20px;
                line-height: 20px;
                text-align: center;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }
        }

    }
}


.\src\components\Сarousel\style.scss
------------------------------------
.Carousel{
    display: flex;
    flex-flow: row nowrap;
    align-content: center;
    justify-content: space-around;

    

    &-main-container{
        width: 100%;
        margin-bottom: 30px;
    }
    
}


.\src\components\Сarousel\CarouselItem\index.tsx
------------------------------------------------
import { ReactSVG } from "react-svg";
import { cn } from "@bem-react/classname";

import "./style.scss";
import { IVideoFromBack } from "../../../models/video";
import VideoPlayer from "../../VideoPlayer";

type Props = {
    onClick: Function,
} & IVideoFromBack;

const cnCarouselItem = cn("carouse-item");

export default function CarouselItem(props: Props) {
    return (
        <div className={cnCarouselItem()} onClick={()=>props.onClick()}>
            <div
                className={cnCarouselItem("img-block")}
                // style={{ backgroundImage: `url(${props.item.img})` }}
            >
                <VideoPlayer url={`/api/video/${props.id}`} controls={false} className={cnCarouselItem("video-block")}/>
                <div className={cnCarouselItem("button")}>
                    <img src="/images/button-play.png" alt="play"/>
                </div>
            </div>
            <p>{props.title}</p>
        </div>
    );
}


.\src\components\Сarousel\CarouselItem\style.scss
-------------------------------------------------
.carouse-item{
    display: flex;
    flex-flow: column nowrap;
    align-items: center;
    align-self: flex-start;
    justify-content: space-around;
    width: 180px;
    cursor: pointer;

    &-img-block{
        width: 120px;
        height: 120px;
        background-repeat: no-repeat;
        background-position: center;
        background-size: 120px 120px;
        border-radius: 100%;
    }

    &-video-block{
        position: relative;
        width: 120px;
        height: 120px;
        object-fit: cover;
        object-fit: cover;
        overflow: hidden;
        border-radius: 100%;

        video {
            object-fit: cover;
            object-fit: cover;
        }
    }

    &-button{
        position: absolute;
        top: 47px;
        left: 75px;
        display: flex;
        align-items: center;
        justify-content: center;

        img{
            width: 32px;
            height: 32px;
        }
        
    }

    p{
        padding-top: 10px;
        color: #000;
        font-weight: 500;
        font-size: 14px;
        font-family: "Onest";
        line-height: 18px;
        letter-spacing: 0;
        text-align: center;

    }
    
}



.\src\components\Сarousel\CarouselModalContent\index.tsx
--------------------------------------------------------
import React, { useContext } from 'react'
import { ModalWindowContext } from '../../VideoBlock';
import { cn } from '@bem-react/classname';
import VideoPlayer, { getPrettyDataTime } from '../../VideoPlayer';
import NoPhoto from "../../ProfilePreview/assets/no-photo.png";
import { IVideoFromBack } from '../../../models/video';

import "./style.scss";

type Props = {
    modalVideo:IVideoFromBack
}

export default function CarouselModalContent({modalVideo}: Props) {

    const {setModal} = useContext(ModalWindowContext);

    const cnModalContent = cn("CarouselModalContent");

    return (
        <div className={cnModalContent()}>

            <div className={cnModalContent("video-row")}>
                <div className={cnModalContent("video-row-videoplayer")}>
                    <VideoPlayer url={`/api/video/${modalVideo.id}`} controls={true} muted={true}/>
                </div>
                <div className={cnModalContent("video-row-description")}>
                    <div
                        className={cnModalContent(
                            "video-row-description-title-row"
                        )}
                    >
                        <p
                            className={cnModalContent(
                                "video-row-description-title-row-text"
                            )}
                        >
                            {modalVideo.title}
                        </p>

                        <p>
                            <img
                                src="/images/button-close.svg"
                                className={cnModalContent(
                                    "video-row-description-title-row-closebutton"
                                )}
                                onClick={()=>setModal(false)}
                                alt="close"
                            />
                        </p>
                    </div>
                    <div
                        className={cnModalContent(
                            "video-row-description-times"
                        )}
                    >
                        {getPrettyDataTime(modalVideo.upload_date)}
                    </div>
                    <div
                        className={cnModalContent(
                            "video-row-description-author-block"
                        )}
                    >
                        <div
                            className={cnModalContent(
                                "video-row-description-author-block-logo"
                            )}
                        >
                            <img
                                className={cnModalContent(
                                    "video-row-description-author-block-logo-img"
                                )}
                                src={NoPhoto}
                                alt=""
                            />
                        </div>
                        <p
                            className={cnModalContent(
                                "video-row-description-author-block-name"
                            )}
                        >
                            {modalVideo.channel_title
                                ? modalVideo.channel_title
                                : "Источник"}
                        </p>
                    </div>

                    <div
                        className={cnModalContent(
                            "video-row-description-annotation-title"
                        )}
                    >
                        Аннотация
                    </div>
                    <div
                        className={cnModalContent(
                            "video-row-description-annotation-text"
                        )}
                    >
                        {modalVideo.description}
                    </div>
                </div>
            </div>

            {/* <div className={cnModalContent("analyze-row")}>
                {totalVideoInfo && (
                    <>
                        {criteria.map((item,idx) => (
                             <div
                                 key={idx}
                                 className={cnModalContent("analyze-row-item")}
                             >
                                 <div
                                     className="pie animate"
                                     style={
                                        {
                                            "--p": totalVideoInfo[idx],
                                        } as React.CSSProperties
                                    }
                                >
                                    {totalVideoInfo[idx]}%
                                </div>
                                <p>{item.title}</p>
                            </div>
                        ))}   
                        </>
                )}
            </div> */}
        </div>
    );
}


.\src\components\Сarousel\CarouselModalContent\style.scss
---------------------------------------------------------
.CarouselModalContent{
    max-width: 1200px;

    &-video-row {
        display: grid;
        grid-template-rows: min-content;
        grid-template-columns: 800px 1fr;
        gap:14px;
        
        
        &-videoplayer {
            width: auto;
            height: auto;
            max-height: 450px;
            overflow: hidden;

            video{
                max-height: 450px;
                // height: auto !important;
                // width: 800px !important;
            }
        }

        &-description {
            &-title-row {
                display: flex;
                flex-flow: row nowrap;
                gap: 10px;
                align-items: flex-start;
                justify-content: space-between;

                &-text {
                    padding-bottom: 10px;
                    color: #000;
                    font-weight: 500;
                    font-size: 1.5rem;
                    font-style: normal;
                    line-height: 24px;
                }

                &-closebutton {
                    align-self: flex-start;
                    cursor: pointer;
                    fill: #7C8EB5;
                }

                &-closebutton:hover {
                    fill: #000b22;
                }

            }

            &-times {
                color: #7C8EB5;
                font-weight: 400;
                font-size: 16px;
                font-family: "Onest";
                font-style: normal;
                line-height: 20px;
            }

            &-author-block {
                display: flex;
                flex-flow: row nowrap;
                align-items: center;
                justify-content: start;
                padding:  8px 0;

                &-logo {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    width: 28px;
                    height: 28px;
                    margin-right: 10px;
                    overflow: hidden;
                    border-radius: 100%;

                    &-img {
                        width: 100%;
                        height: 100%;
                    }
                }

                &-name {
                    color: #37476A;
                    font-weight: 600;
                    font-size: 16px;
                    font-family: "Montserrat Alternates";
                    font-style: normal;
                    line-height: 17px;
                }
            }

            &-annotation {
                &-title {
                    padding: 10px 0;
                    color: #7C8EB5;
                    font-weight: 500;
                    font-size: 12px;
                    font-family: "Onest";
                    font-style: normal;
                    line-height: 13px;
                }

                &-text {
                    height: 270px;
                    overflow-y: auto;
                    color: #000;
                    font-weight: 400;
                    font-size: 18px;
                    font-style: normal;
                    line-height: 20px;
                }
            }

            &-btn-info {
                display: flex;
                gap: 8px;
                align-items: center;
                justify-content: center;
                width: 100%;

                // margin-top: 20px;
                padding: 16px;
                color: #FFF;
                font-weight: 600;
                font-size: 1rem;
                font-family: "Montserrat Alternates";
                font-style: normal;
                background-color: #FFB800;
                border: 0;
                border-radius: 9px;

                &-icon svg{
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }
            }
        }
    }

    &-analyze-row {
        display: grid;
        grid-template-columns: repeat(6, 1fr);
        gap: 1em;
        align-items: start;
        justify-content: space-between;
        justify-items: stretch;
        width: 100%;
        padding-top: 20px;
        font-family: "Montserrat Alternates";

        &-item {
            display: flex;
            flex-flow: column nowrap;
            align-content: center;
            align-items: center;
            justify-content: center;

            p {
                display: flex;
                align-items: center;
                color: #37476A;
                font-weight: 600;
                font-size: 16px;
                font-style: normal;
                line-height: 17px;
                text-align: center;
            }
        }

    }
}



.\src\constants\index.ts
------------------------

export const MIN_MINUTES_FOR_VIDEO = 3;
export const MAX_MINUTES_FOR_VIDEO = 15;

.\src\fonts\index.ts
--------------------
import "./ttf/Onest-Black.ttf";
import "./ttf/Onest-Bold.ttf";
import "./ttf/Onest-ExtraBold.ttf";
import "./ttf/Onest-Light.ttf";
import "./ttf/Onest-Medium.ttf";
import "./ttf/Onest-Regular.ttf";
import "./ttf/Onest-Thin.ttf";

import "./ttf/MontserratAlternates-Bold.ttf";
import "./ttf/MontserratAlternates-ExtraBold.ttf";
import "./ttf/MontserratAlternates-ExtraLight.ttf";
import "./ttf/MontserratAlternates-Light.ttf";
import "./ttf/MontserratAlternates-Medium.ttf";
import "./ttf/MontserratAlternates-Regular.ttf";
import "./ttf/MontserratAlternates-SemiBold.ttf";

import "./style.scss";


.\src\fonts\style.scss
----------------------
@import url("https://fonts.googleapis.com/css?family=Montserrat");

@font-face {
    font-family: "Onest";
    src: local("Onest-Thin"), url("./ttf/Onest-Thin.ttf") format("truetype");
    font-weight: 100;
    font-style: normal;
    font-display: swap;
}

@font-face {
    font-family: "Onest";
    src: local("Onest-Light"), url("./ttf/Onest-Light.ttf") format("truetype");
    font-weight: 300;
    font-style: normal;
    font-display: swap;
}

@font-face {
    font-family: "Onest";
    src: local("Onest-Regular"),
        url("./ttf/Onest-Regular.ttf") format("truetype");
    font-weight: 400;
    font-style: normal;
    font-display: swap;
}

@font-face {
    font-family: "Onest";
    src: local("Onest-Medium"), url("./ttf/Onest-Medium.ttf") format("truetype");
    font-weight: 500;
    font-style: normal;
    font-display: swap;
}

@font-face {
    font-family: "Onest";
    src: local("Onest-Bold"), url("./ttf/Onest-Bold.ttf") format("truetype");
    font-weight: 700;
    font-style: normal;
    font-display: swap;
}

@font-face {
    font-family: "Onest";
    src: local("Onest-Black"), url("./ttf/Onest-Black.ttf") format("truetype");
    font-weight: 900;
    font-style: normal;
    font-display: swap;
}



@font-face {
    font-family: "Montserrat Alternates";
    src: local("MontserratAlternates-Bold"), url("./ttf/MontserratAlternates-Bold.ttf") format("truetype");
    font-weight: 700;
    font-style: normal;
    font-display: swap;
}

@font-face {
    font-family: "Montserrat Alternates";
    src: local("MontserratAlternates-ExtraBold"), url("./ttf/MontserratAlternates-ExtraBold.ttf") format("truetype");
    font-weight: 900;
    font-style: normal;
    font-display: swap;
}

@font-face {
    font-family: "Montserrat Alternates";
    src: local("MontserratAlternates-ExtraLight"), url("./ttf/MontserratAlternates-ExtraLight.ttf") format("truetype");
    // font-weight: 700;
    // font-style: normal;
    // font-display: swap;
}

@font-face {
    font-family:"Montserrat Alternates";
    src: local("MontserratAlternates-Light"), url("./ttf/MontserratAlternates-Light.ttf") format("truetype");
    font-weight: 300;
    font-style: normal;
    font-display: swap;
}

@font-face {
    font-family: "Montserrat Alternates";
    src: local("MontserratAlternates-Medium"), url("./ttf/MontserratAlternates-Medium.ttf") format("truetype");
    font-weight: 500;
    font-style: normal;
    font-display: swap;
}

@font-face {
    font-family: "Montserrat Alternates";
    src: local("MontserratAlternates-Regular"), url("./ttf/MontserratAlternates-Regular.ttf") format("truetype");
    font-weight: 400;
    font-style: normal;
    font-display: swap;
}

@font-face {
    font-family: "Montserrat Alternates";
    src: local("MontserratAlternates-SemiBold"), url("./ttf/MontserratAlternates-SemiBold.ttf") format("truetype");
    font-weight: 600;
    font-style: normal;
    font-display: swap;
}




.\src\hooks\redux.ts
--------------------
import { TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
import type { RootState, AppDispatch } from "../store";

export const useAppDispatch: () => AppDispatch = useDispatch;
export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;


.\src\hooks\useStopwatch.ts
---------------------------
import { useState, useRef } from "react";

const useStopwatch = (initialState = 0) => {
    const [timer, setTimer] = useState(initialState);
    const [isActive, setIsActive] = useState(false);
    const [isPaused, setIsPaused] = useState(false);
    const countRef = useRef<any>(null);

    const handleStart = () => {
        setIsActive(true);
        setIsPaused(false);
        countRef.current = setInterval(() => {
            setTimer((timer) => timer + 1);
        }, 1000);
    };

    const handlePause = () => {
        clearInterval(countRef.current);
        setIsPaused(true);
    };

    const handleResume = () => {
        setIsPaused(false);
        countRef.current = setInterval(() => {
            setTimer((timer) => timer + 1);
        }, 1000);
    };

    const handleReset = () => {
        clearInterval(countRef.current);
        setIsActive(false);
        setIsPaused(false);
        setTimer(0);
    };

    return {
        timer,
        isActive,
        isPaused,
        handleStart,
        handlePause,
        handleResume,
        handleReset,
    };
};

export default useStopwatch;


.\src\hooks\useTimer.ts
-----------------------
import { useState, useRef } from "react";
import { MIN_MINUTES_FOR_VIDEO } from "../constants";

const useTimer = (initialState = MIN_MINUTES_FOR_VIDEO * 60) => {
    const [timer, setTimer] = useState(initialState);
    const [isActive, setIsActive] = useState(false);
    const [isPaused, setIsPaused] = useState(false);
    const countRef = useRef<any>(null);

    const handleStart = () => {
        setIsActive(true);
        setIsPaused(false);
        countRef.current = setInterval(() => {
            setTimer((timer) => timer - 1);
        }, 1000);
    };

    const handlePause = () => {
        clearInterval(countRef.current);
        setIsPaused(true);
    };

    const handleResume = () => {
        setIsPaused(false);
        countRef.current = setInterval(() => {
            setTimer((timer) => timer - 1);
        }, 1000);
    };

    const handleReset = () => {
        clearInterval(countRef.current);
        setIsActive(false);
        setIsPaused(false);
        setTimer(initialState);
    };

    return {
        timer,
        isActive,
        isPaused,
        handleStart,
        handlePause,
        handleResume,
        handleReset,
    };
};

export default useTimer;


.\src\layouts\EmptyLayout\index.tsx
-----------------------------------
import { cn } from "@bem-react/classname";
import "./style.scss";
import { ReactNode } from "react";

const cnEmptyLayout = cn("empty-layout");

type EmptyLayoutProps = {
    children?: ReactNode,
}

export default function EmptyLayout(props: EmptyLayoutProps) {
    return (
        <div className={cnEmptyLayout()}>
            <div className={cnEmptyLayout("content")}>{props.children}</div>
        </div>
    );
}


.\src\layouts\EmptyLayout\style.scss
------------------------------------
.empty-layout{

    &-content{
        
    }
}

.\src\layouts\EntryLayout\index.tsx
-----------------------------------
import { cn } from "@bem-react/classname";
import "./style.scss";
import { ReactNode } from "react";

const cnEntryLayout = cn("entry-layout");

type EntryLayoutProps = {
    children?: ReactNode,
    image?: ReactNode,
}

export default function EntryLayout(props: EntryLayoutProps) {
    return (
        <div className={cnEntryLayout()}>
            <div className={cnEntryLayout("content")}>{props.children}</div>
            <div className={cnEntryLayout("image")}>{props.image}</div>
        </div>
    );
}


.\src\layouts\EntryLayout\style.scss
------------------------------------
.entry-layout {

    display: grid;
    grid-template-columns: repeat(2, 1fr);
    justify-items: center;
    align-items: center;

    background: #FFF;

    &-content {
        padding: 50px 50px;
        // padding: 50px 85px;
        margin: auto 0;
        max-width: 80%;

        @media screen and (max-width: 1024px) {
            max-width: inherit;
        }
    }

    &-image {

        @media screen and (max-width: 1024px) {
            display: none;
        }

        height: 100vh;  
        min-height: 650px;
        width: 100%;
    }
}

.\src\layouts\MainLayout\index.tsx
----------------------------------
import { Fragment, ReactNode, useState } from "react";
import { cn } from "@bem-react/classname";
import Footer from "../../components/Footer";
import Header from "../../components/Header";
import Menu from "../../components/Menu";

import "./style.scss";
import { useSelector } from "react-redux";
import { RootState } from "../../store";

type Props = {
    children?: ReactNode;
};

const cnContent = cn("mainLayout");

export default function MainLayout(props: Props) {
    
    
    const lastName = useSelector((state: RootState) => state.profile.user.firstname);
    const name = useSelector((state: RootState) => state.profile.user.lastname);    
    const avatar= useSelector((state: RootState) => state.profile.avatar);  

    return (
        <div  className={cnContent()}>
            <div className={cnContent("container")}>
                <Menu />
                <div className={cnContent("wrapper")}>
                    <Header displayName={`${name} ${lastName}`} imageUrl={avatar}/>
                    <section className={cnContent("main")}>
                        {props.children}
                    </section>
                </div>
            </div>
            <Footer />
        </div>
    );
}


.\src\layouts\MainLayout\style.scss
-----------------------------------
.mainLayout {
    display: flex;
    flex-flow: column nowrap;
    flex: 1 0 auto;
    width: 100%;

    &-container {
        display: flex;
        flex: 1 0 auto;
        width: 100%;
        min-height: 600px;
        min-width: 600px;
        height: auto !important;
    }

    &-wrapper {
        z-index: 1;
        display: flex;
        flex: 1 0 auto;
        flex-direction: column;
        justify-content: center;
        width: 100%;
        padding-left: 90px;
        background-color: #f3f5f9;
    }

    &-main {
        flex: 1 0 auto;
        padding: 0 40px;
    }
}

.\src\layouts\SurveyLayout\index.tsx
------------------------------------
import { ReactNode } from "react";
import { cn } from "@bem-react/classname";
import "./style.scss";

import picture from "./assets/survey.png";

type Props = {
    children?: ReactNode;
};

const cnContent = cn("surveyLayout");

export default function SurveyLayout(props: Props) {
    return (
        <div className={cnContent()}>
            <div className={cnContent("left-content")}>{props.children}</div>
            <div className={cnContent("right-content")}>
                <img
                    src={picture}
                    className={cnContent("right-content-img")}
                    alt=""
                />
            </div>
        </div>
    );
}


.\src\layouts\SurveyLayout\style.scss
-------------------------------------
.surveyLayout {
    width: 100%;
    display: flex;
    flex-direction: row;

    background-color: #F3F5F9;


    &-left-content {
        width: 100%;
    }

    &-right-content {
        width: 40vw;
        min-width: 300px;
        height: 100%;
        display: flex;
        flex-direction: row;
        justify-content: center;


        &-img {
            padding: 50px 10px 0 0;
            height: 100%;
            width: 100%;
        }

        @media screen and (max-width: 1024px) {
            display: none;
        }
    }
}

.\src\models\index.ts
---------------------
export interface TestServerObject {
    id: number;
    name: string;
    username: string;
    email: string;
    address: Address;
    phone: string;
    website: string;
    company: Company;
}

export interface Address {
    street: string;
    suite: string;
    city: string;
    zipcode: string;
    geo: Geo;
}

export interface Geo {
    lat: string;
    lng: string;
}

export interface Company {
    name: string;
    catchPhrase: string;
    bs: string;
}

export type TestServerResponse = TestServerObject[];


.\src\models\aim\index.ts
-------------------------
export type ParamItem ={
    title: string,
    description: string,
}

export enum AIM_PARAMETERS {
    consistency= "consistency",
    informative= "informative",
    unity_of_style= "unity-of-style",
    originality= "originality",
    borrowing= "borrowing",
    citation= "citation",
    clarity= "clarity",
    eloquence= "eloquence",
    expressiveness= "expressiveness",
    non_monotony= "non-monotony",
    emotionality= "emotionality",
    energy= "energy",
    congruence= "congruence",
    confidence= "confidence",
    emotional_arousal= "emotional-arousal",
    parasite_words= "parasite_words",
    cognitive_distortion= "cognitive_distortion",
    aggressiveness_coefficient= "aggressiveness_coefficient"
}


export type IAimParameters = Record<AIM_PARAMETERS, ParamItem>;

export interface ITaskItem {
    description: string,
    is_done: boolean,
    step: number
} 

export interface IAimItem {
    id?: string,
    title: string,
    is_done: boolean,
    progress: number,
    created_at: string,
    tasks: ITaskItem[],
    parameters: ParamItem[]
} 

export interface IAimFromBack {
    purposes:IAimItem[],
}

export interface ISendUserPurpose {
    title:string,
    params: AIM_PARAMETERS[],
}

.\src\models\api\index.tsx
--------------------------
interface IError {
    code: number;
    msg: string;
}
export interface IResponse<T> {
    data?: T;
    error?: IError;
    success: boolean;
}

.\src\models\chat\index.tsx
---------------------------
export interface IMessageItem {
    created_at: string;
    from_user: string;
    id: number;
    is_mine: boolean;
    reply_to: number | null;
    text: string;
    to_user: null;
}










.\src\models\diary\index.ts
---------------------------
export enum TYPE_DIARY {
    connectivity = "connectedness",
    dynamism = "dynamism",
    argumentativeness = "argumentativeness",
    clarity = "clarity",
    persuasiveness = "persuasiveness",
    communicative = "communicative",
    total = "total_result",
}

export interface IStatisticItem {
    seq_number: number;
    value: number;
    date: string;
}

export interface IStatisticJSON {
    values: IStatisticItem[];
    argumentativeness: number;
    clarity: number;
    communicative: number;
    connectedness: number;
    dynamism: number;
    persuasiveness: number;
    total_result: number;
}

export interface IAchievement {
    rank: string;
    previous_rank: string;
    text: string;
    improvements: string[];
    deterioration: string[];
}


.\src\models\entry\index.ts
---------------------------
import { IUser } from "./user";

export enum UserType {
    Personal,
    Business,
}

export enum PageType {
    Login,
    Register,
    PasswordRestore,
}

export enum RegisterStep {
    PrimaryInfo,
    SecondaryInfo,
    EmailVerification,
    FinishRegister,
    Error,
}

export interface JWTToken {
    exp: number;
    iat: number;
    user: IUser;
}


.\src\models\entry\login\index.ts
---------------------------------
import { IUser } from "../user";

export interface ILoginRequest {
    email: string;
    password: string;
}

export interface ILoginResponse {
    access_token: string;
    refresh_token: string;
    user: IUser;
}



.\src\models\entry\register\index.tsx
-------------------------------------


export interface IRegister {
    firstname: string;
    lastname: string;
    birthday: string;
    phone:string;
    city: string;
    email: string;
    avatar?: string | null;
    password: string;
    
}

export interface IRegisterResponse {
    id: string;
    firstname: string;
    lastname: string;
    birthday: string;
    phone:string;
    city: string;
    email: string;
    avatar?: string;
    registration_data: string;
    status: string;
    tarif_active: boolean;
    loads_count: number | null,
    loads_limit: number | null,
    tarif_duration: number | null,
    trial_used: boolean,
}

export interface ICheckEmail {
    email: string
}

.\src\models\entry\user\index.ts
--------------------------------
import { UUID } from "crypto";

export interface IUser {
    id: UUID;
    firstname: string;
    lastname: string;
    birthday: string;
    phone: string;
    city: string;
    email: string;
    avatar?: string;
    registration_data: string;
    status: string;
    tarif_active: boolean;
    loads_count: number | null;
    loads_limit: number | null;
    tarif_duration: number | null;
    trial_used: boolean;
}


.\src\models\graph\argumentativeness.ts
---------------------------------------
export type ArgumentativenessDataItem = {
    seq_number: number;
    time_start: string;
    text: string;
    value: number;
    link: string;
    allocated: string;
};

export type ArgumentativenessJSON = {
    values: ArgumentativenessDataItem[];
    originality: number;
    borrowing: number;
    citation: number;
};


.\src\models\graph\bricked.ts
-----------------------------
export type BrickedGraphItem = {
    id: number;
    text: string;
    top?: string;
    startTime: number;
    endTime: number;
    color: string;
    type?: "thin" | "solid";
};


.\src\models\graph\clarity.ts
-----------------------------
export type ClarityDataItem = {
    seq_number: number;
    type: string; // type: trembling | basic | sounds | string;
    value: number; // value: -1 | 0 | -1;
    
    time_start: number;
    time_end: number;
    text: string;
};

export type ClarityJSON = {
    values:ClarityDataItem[],
    basic: number,
    sounds: number,
    trembling: number,
    expressiveness: string,
    T_norm_temp: number,
}


.\src\models\graph\communicative.ts
-----------------------------------
export enum CommunicativeValue {
    FIRST = "0",
    SECOND = "1",
    THIRD = "2",
    FOURTH = "3",
    FIFTH = "4",
}


export type CommunicativeValueItem = Record<CommunicativeValue, string[]>;

export type CommunicativeValuesItem = {
    seq_number: number;
    text: string;
    value: CommunicativeValueItem;
    time_start: string;
}


export type CommunicativeJSON = {
    filler_words: number;
    cognitive_distortion: number;
    aggression: number;
    values:CommunicativeValuesItem[];
} ;

.\src\models\graph\confidence.ts
--------------------------------
export type ConfidenceDataItem = {
    time_sec: number;
    confidence: number;

    text: string;

    time_start?: number;
    time_end?: number;
    seq_number?: number;
    value?: number;
};

export type ConfidenceJSON = {
    values: ConfidenceDataItem[];
    average_value: number;
    uncertainty: number;
    comment: string;
};


.\src\models\graph\congruence.ts
--------------------------------
import { ChannelInfo } from "./emotionality";

export type CongruenceItem = {
    time_start: number;
    value: number;
    type: string;
    time_end: number;
};

export enum CongruenceEnum {
    A_V = "A-V",
    A_T = "A-T",
    V_T = "V-T",
}

export type CongruenceValues = Record<CongruenceEnum, CongruenceItem[]>;

export type CongruenceJSON = {
    values: CongruenceValues;
    diameter: ChannelInfo;
    comment: string;
};


.\src\models\graph\connectivity.ts
----------------------------------
export type ConnectivityDataItem = {
    seq_number: number;
    text: string;
    value: number;
    time_start: number;
    time_end: number;
};

export type ConnectivityJSON = {
    values: ConnectivityDataItem[];
    controversy: number;
    statements: number;
    comment: string;
};


.\src\models\graph\eloquence.ts
-------------------------------
export enum ParasiticWords {
    FIRST_PARASITE = "слово",
    SECOND_PARASITE = "ещеслово",
    THIRD_PARASITE = "ещеслололово",
    FOURTH_PARASITE = "что-то",
}

export type ParasiticWordsItem = Record<ParasiticWords, number>;

export type EloquenceDataItem = {
    parasitic_words: number;
    short_sentences: number; 
    short_words: number; 
    action_words: number;
    parasitic_words_list: {
        [key: string]: number;
    };
};

export type EloquenceJSON = {
    values:EloquenceDataItem,
} 

.\src\models\graph\emotionality.ts
----------------------------------
export enum EmotionalityChannel {
    VIDEO = "video",
    AUDIO = "audio",
    TEXT = "text",
}

export enum EmotionalityItem {
    NEUTRAL = "neutral",
    HAPPINESS = "happiness",
    ANGER = "anger",
}

export type ChannelItem = Record<EmotionalityItem, number>;

export type ChannelInfo = Record<EmotionalityChannel, ChannelItem>;

export type EmotionalityDataItem = {
    seq_number: number;
    time_start: number;
} & ChannelInfo;

type Toteltem = Record<EmotionalityItem, number>;

export type EmotionalityJSON = {
    total: Toteltem,
    values:EmotionalityDataItem[],
}

.\src\models\graph\emotional_arousal.ts
---------------------------------------
export type EmotionalArousalDataItem = {
    emotional_arousal: number;
    trager_coefficient: number; 
    action_certainty_factor: number; 
    aggressiveness_coefficient: number;
};

export type EmotionalArousalJSON  = {
    values: EmotionalArousalDataItem,
}

.\src\models\graph\energy.ts
----------------------------
export enum EnergyType {
    ENERGY = "energy",
}

type ExtendWithType = Record<EnergyType, number>;

export type EnergyDataItem = {
    seq_number: number;
    time_start: number;
} & ExtendWithType;

export type EnergyJSON = {
    values: EnergyDataItem[];
    total_energy: number;
    comment: string;
};


.\src\models\graph\expressiveness.ts
------------------------------------
export enum ExpressivenessType {
    NEUTRAL = "neutral",
    HAPPINESS = "happiness",
    ANGER = "anger",
}

type ExtendWithType = Record<ExpressivenessType, number>;

export type ExpressivenessDataItem = {
    seq_number: number;
    time_start: number;
    text: string | null;
} & ExtendWithType;

export type ExpressivenessJSON = {
    values: ExpressivenessDataItem[];
    total_expressiveness: number;
    comment: string;
};


.\src\models\graph\informative.ts
---------------------------------
export type InformativeDataItem = {
    seq_number: number;
    text: string;
    type: string; /// ["main-text","unconfirmed","non-speech","parasite-words",]
    time_start: number;
    time_end: number;
};

export type InformativeJSON = {
    values: InformativeDataItem[];
    informative: number;
    parasite: number;
    sounds: number;
    empty: number;
    comment: string;
};


.\src\models\graph\monotony.ts
------------------------------
enum HType {
    HTemp = "h-temp",
    HVolume = "h-volume",
    HTone = "h-tone",
}
type HItemValues = Record<HType, number>;

export enum NonMonotonyType {
    RATE = "rate",
    VOLUME = "volume",
    TONE = "tone",
}

type ExtendWithType = Record<NonMonotonyType, number>;

export type NonMonotonyDataItem = {
    seq_number: number;
    time_start: number;
} & ExtendWithType;

export type NonMonotonyJSON = {
    values: NonMonotonyDataItem[];
} & HItemValues;


.\src\models\graph\stats.ts
---------------------------
export type StatsDataItem = {
    seq_number: number;
    text: string;
    value: number | null;
    date: string;
    time_start: number;
};


.\src\models\graph\timeline.ts
------------------------------
import GraphColor from "./_colors";

export type TimelineItem = {
    id: string | number;
    color?: GraphColor;
    time?: string;
    text?: string;
};


.\src\models\graph\total.ts
---------------------------
export enum TotalType {
    CONNECTEDNESS = "connectedness",
    ARGUMENTATIVE = "argumentativeness",
    CLARITY = "clarity",
    DYNAMISM = "dynamism",
    PERSUASIVENESS = "persuasiveness",
    COMMUNICATIVE = "communicative",
}

export enum TotalTypeRecomendation {
    CONNECTEDNESS_REC = "connectedness_recommendations",
    ARGUMENTATIVE_REC = "argumentativeness_recommendations",
    CLARITY_REC = "clarity_recommendations",
    DYNAMISM_REC = "dynamism_recommendations",
    PERSUASIVENESS_REC = "persuasiveness_recommendations",
    COMMUNICATIVE_REC = "communicative_recommendations",
}

type ExtendWithType = Record<TotalType, number>;
type ExtendWithTypeRecomendation = Record<TotalTypeRecomendation, string>;

export type TotalDataItem = {
    big_conclussion: string;
    conclussion: string;
    total_result: number;
} & ExtendWithType &
    ExtendWithTypeRecomendation;

export type TotalGraphJSON = {
    values: TotalDataItem;
};

/* ---------------------------- TITLE TYPE IN RUSSIAN ---------------------------- */

export enum TotalTypeInRussian {
    CONNECTEDNESS = "связность",
    ARGUMENTATIVE = "аргументированность",
    CLARITY = "ясность",
    DYNAMISM = "динамизм",
    PERSUASIVENESS = "убедительность",
    COMMUNICATIVE = "соблюдение коммуникативной нормы",
}


.\src\models\graph\unity_of_style.ts
------------------------------------
export type UnityOfStyleDataItem = {
    scientific: number;
    official: number; 
    publicistic: number; 
    colloquial: number;
    artistic: number;
};

export type UnityOfStyleJSON = {
    values: UnityOfStyleDataItem,
}

.\src\models\graph\_colors.ts
-----------------------------
enum GraphColor {
    GRAY = "#D4DFF4",
    // RED = "#fe5d74",
    RED = "#F35B60",
    LIGHTRED = "#FF4E78",
    SUPERLIGHTRED = "rgba(243, 91, 96, 0.2)", // for congruence
    BLUE = "#2477f4",
    GREEN = "#36f48c",
    LIGHTGREEN = "#24F19B",
    SUPERLIGHTGREEN = "rgba(16, 206, 126, 0.2)", // for congruence
    DARKGRAY = "#ADB9D4",
    ORANGE = "#FFB800",
    PURPLE = "#410DAE",
    YELLOW = "#FFE817",

    SPURPLE = "#4A1193",
    SORANGE = "#FFB800",
    SYELLOW = "#F4EC1C",
    SGREEN = "#0CCA13",
    SBLUE = "#2477F4",

    IRED = "#FE5D74",
    WHITE = "#FFFFFF",

    // GRAY = "#d4dff4",
    // RED = "linear-gradient(78.41deg, #FE6972 0%, #FF4E78 100%)",
    // BLUE = "#2477f4",
    // GREEN = "linear-gradient(32.08deg, #24F19B 0%, #51F976 100%)",
    // DARKGRAY = "#ADB9D4",
    // ORANGE = "linear-gradient(32.08deg, #FFB800 0%, #FDA743 100%)",
    // PURPLE = "linear-gradient(74.12deg, #410DAE 0%, #7524FA 100%)",
    /// это переиспользуемые цвета, но если использовать градиент, то нельзя использовать их именно как цвета. Подумать, что можно сделать
}
export default GraphColor;


.\src\models\graph\inteface\IDescriptionScale.ts
------------------------------------------------
export interface IDescriptionScale{
    title:string,
    value:number,
    color:string
}

.\src\models\graph\inteface\IPieChart.ts
----------------------------------------
export interface IPieChart{
    scientific: number,
    official: number,
    publicistic: number,
    colloquial: number,
    artistic: number
}


.\src\models\graph\inteface\IPieChartAll.ts
-------------------------------------------
import {IPieChart} from "./IPieChart";

export interface IPieChartAll{
    item: IPieChart[]
}

.\src\models\graph\inteface\ISimel.ts
-------------------------------------
import {ISimelDescription} from "./ISimelDescription";

export interface ISimel{
    items: ISimelDescription[]
}

.\src\models\graph\inteface\ISimelDescription.ts
------------------------------------------------
export interface ISimelDescription{
    id:number
    title:string,
    procent:number,
    colorProcent: string,
    icon: string,
}

.\src\models\graph\inteface\scale.ts
------------------------------------
import {IDescriptionScale} from "./IDescriptionScale";

export interface IScaleDataType{
        item: IDescriptionScale[]
}

.\src\models\report\index.ts
----------------------------
import { UUID } from "crypto";
import { TYPE_REPORT } from "./_types";

export interface IReportById {
    types: TYPE_REPORT,
    id: UUID,
}

.\src\models\report\transcription.ts
------------------------------------
export type TranscriptionValue = {
    seq_number: number,
    time_start:number,
    text: string,
}


export interface TranscriptionJSON {
    values: TranscriptionValue[],
}

.\src\models\report\_types.ts
-----------------------------
export enum TYPE_REPORT {
    argumentativeness = "argumentativeness",
    clarity = "clarity",
    communicative = "communicative",
    confidence = "confidence",
    congruence = "congruence",
    connectivity = "connectivity",
    eloquence = "eloquence",
    emotional_arousal = "emotional-arousal",
    emotionality = "emotionality",
    energy = "energy",
    expressiveness = "expressiveness",
    informative = "informative",
    non_monotony = "non-monotony",
    text="text",
    total = "total",
    unity_of_style = "unity-of-style",
}

.\src\models\routes\index.tsx
-----------------------------
enum RoutesEnum {
    ROOT = "",
    ALL = "*",
    LANDING = "/landing",
    LOGIN = "/login",
    REGISTER = "/register",
    ACTIVATION = "/activation",
    RESTORE = "/restore",
    DIARY = "/diary",
    HOME = "/home",
    IMPROVISATION = "/improvisation",
    LEARNING = "/learning",
    REPETITION = "/repetition",
    SETTINGS = "/settings",
    RECODING="/recoding",
    REPORT="/report",

    TEST_GRAPH = "/test-graph",

    SURVEY = "/survey",

    // CONNECTEDNESS = "/repetition/connectedness",
    // ARGUMENTATION = "/repetition/argumentation",
    CLARITY = "/repetition/clarity",
    // DYNAMISM = "/repetition/dynamism",
    // PERSUASIVENESS = "/repetition/persuasiveness",
    // COMMUNICATION = "/repetition/communication",
}

export default RoutesEnum;


.\src\models\survey\index.tsx
-----------------------------
export enum typeQuestion {
    checkbox = "checkbox",
    radio = "radio",
}

export enum typeStyleAnswers {
    row = "block-answers",
    column = "col-answers",
    icon_row = "icon-rows",
}

export interface ISurvey {
    id: string;
    title: string;
    questions: IQuestion[];
}

export interface IQuestion {
    id: string;
    title: string;
    type: typeQuestion;
    icons: boolean;
    type_choice: typeStyleAnswers;
    choices:IChoice[];
}

export interface IChoice {
    id: string;
    title: string;
    icon: string;
    another: boolean;
}

export interface IAnswer {
    question_id: string;
    choice_id: string;
    text: string;
}

export interface IAnswerBack {
    questionnaire_title: string,
    answers: IAnswer[],
}


.\src\models\tariff\index.ts
----------------------------
import { UUID } from "crypto";

export interface ITariff {
    id: string,
    duration: number;
    loads_limit: number;
    title: string;
    price: number;
}

export interface ISetTariff {
    tarif_id: string;
    user_id : UUID;
}


.\src\models\userStatus\index.ts
--------------------------------
enum UserStatus {
    ACTIVE = "active",
    BLOCKED = "blocked",
    NOT_ACTIVE = "not_active",
    NO_QUESTIONNAIRE = "no_questionnaire",
}

export default UserStatus;

.\src\models\video\index.ts
---------------------------
import { UUID } from "crypto";

export interface IVideoApiReq {
    title: string;
    duration: string;
    description: string;
    file: File;
}

export interface IVideoUser {
    videos: IVideoFromBack[];
    total_videos: number;
}

export interface IVideoFromBack {
    user_id: UUID | string;
    title: string;
    description: string;
    upload_date: string;
    file_name: string;
    duration: string;
    id: UUID;
    channel_title: string;
    file_path: string;
    status_percent: string | number;
    status_video: string;
}

export interface IVideoInfo {
    title: string;
    duration: string;
    description: string;
    id: UUID;
    user_id: UUID | string;
    channel_title: string;
    upload_date: string;
    file_name: string;
    file_path: string;
}

export interface IVideoUserStatus {
    videos: IVideoStatus[];
    total_videos: number;
}
export interface IVideoStatus {
    title: string;
    duration: string;
    description: string;
    id: UUID;
    user_id: UUID | string;
    channel_title: string;
    upload_date: string;
    file_name: string;
    file_path: string;
    status_percent: string;
    status_video: string;
    quote: string;
}

export interface IVideoUploadItem {
    id: string;
    title: string;
    description: string;
}

export interface IParamsForQueryUserVideo {
    page: number;
    limit: number;
    tutorial?: boolean;
    search?: string;
}


.\src\pages\DiaryPage\index.tsx
-------------------------------
import MainLayout from "../../layouts/MainLayout";
import { Outlet } from "react-router";

export default function DiaryPage() {
    return (
        <MainLayout>
            <Outlet />
        </MainLayout>
    );
}


.\src\pages\EntryPage\-InfoFragment\index.tsx
---------------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";
import Link from "../../../components/ui-kit/Link";


const cnLoginFragment = cn("login-fragment");

interface InfoFragmentProps {
    phrase: string;
    subphrase: string;
}

export default function InfoFragment(props: InfoFragmentProps) {

    return (
        <div className={cnLoginFragment()}>
            <p className={cnLoginFragment("phrase")}>{props.phrase}</p>
            <p className={cnLoginFragment("subphrase")}>{props.subphrase}</p>
            <div className={cnLoginFragment("block")}>
                <Link
                    className={cnLoginFragment("link")}
                    arrow="right"
                    href="/"
                    target="_blank"
                >
                    Узнать подробнее о сервисе
                </Link>
            </div>
        </div>
    );
}


.\src\pages\EntryPage\-InfoFragment\style.scss
----------------------------------------------
.login-fragment {
    &-phrase {
        text-transform: uppercase;
        font-size: 40px;
        line-height: normal;
        font-weight: 700;
        color: #031c3d;
        white-space: pre-line;
    }

    &-subphrase {
        color: #37476a;
        font-family: Onest;
        font-size: 20px;
        font-style: normal;
        line-height: normal;
        font-weight: 400;
    }

    &-block{
        padding-top: 15px;
    }

    &-link {
        color: #2477F4;
        font-family: Montserrat Alternates;
        font-size: 20px;
        font-style: normal;
        font-weight: 500;
        line-height: normal;
    }
}

.\src\pages\EntryPage\-LoginRegisterChanger\index.tsx
-----------------------------------------------------
import { cn } from "@bem-react/classname";
import { useNavigate } from "react-router-dom";

import { PageType } from "../../../models/entry";

import Link from "../../../components/ui-kit/Link";

import "./style.scss";
import RoutesEnum from "../../../models/routes";

interface LoginRegisterChangerProps {
    pageType: PageType;
}

const cnLoginRegisterChanger = cn("login-register-changer");

export default function LoginRegisterChanger(props: LoginRegisterChangerProps) {
    const navigate = useNavigate();
    return (
        <div className={cnLoginRegisterChanger()}>
            {props.pageType === PageType.Register ? (
                <>
                    <span>Уже есть аккаунт?</span>
                    <Link onClick={() => navigate(RoutesEnum.LOGIN)}>Войти</Link>
                </>
            ) : (
                <>
                    <span>Еще нет аккаунта?</span>
                    <Link onClick={() => navigate(RoutesEnum.REGISTER)}>
                        Зарегистрироваться
                    </Link>
                </>
            )}
        </div>
    );
}


.\src\pages\EntryPage\-LoginRegisterChanger\style.scss
------------------------------------------------------
.login-register-changer {
    text-transform: uppercase;
    font-weight: 700;
    padding: 20px 0 16px 0;
    color: rgba(55, 71, 106, 0.5);

    & > * {
        padding-right: 16px;
    }
}


.\src\pages\EntryPage\-UserTypeSwitch\index.tsx
-----------------------------------------------
import { UserType } from "../../../models/entry";
import { setUserType } from "../../../store/slices/entry";
import { useAppDispatch, useAppSelector } from "../../../hooks/redux";
import { cn } from "@bem-react/classname";

import Tab from "../../../components/ui-kit/Tab";

import "./style.scss";

const cnUserTypeSwitch = cn("user-type-switch");

export default function UserTypeSwitch() {
    const userType = useAppSelector((state) => state.entry.userType);
    const dispatch = useAppDispatch();
    return (
        <div className={cnUserTypeSwitch()}>
            <Tab
                selected={userType === UserType.Personal}
                onClick={() => dispatch(setUserType(UserType.Personal))}
            >
                Для себя
            </Tab>
            <Tab
                selected={userType === UserType.Business}
                onClick={() => dispatch(setUserType(UserType.Business))}
            >
                Для бизнеса
            </Tab>
        </div>
    );
}


.\src\pages\EntryPage\-UserTypeSwitch\style.scss
------------------------------------------------
.user-type-switch {
    display: flex;
    gap: 24px;
}


.\src\pages\EntryPage\ActivationPage\index.tsx
----------------------------------------------
import { ReactSVG } from "react-svg";
import EntryLayout from "../../../layouts/EntryLayout";
import ActivationPageSuccess from "./-Success";
import RegisterPersonalImg from "../RegisterPage/assets/reg-image-personal.svg";
import { useNavigate, useSearchParams, Navigate } from "react-router-dom";
import { useConfirmQuery } from "../../../store/api/register";
import ActivationErrorPage from "./-Error";
import RoutesEnum from "../../../models/routes";

export default function ActivationPage() {
    const [searchParams, _] = useSearchParams();
    const token = searchParams.get("token");

    const response = useConfirmQuery(token!, { skip: !token });

    return (
        <EntryLayout image={<ReactSVG src={RegisterPersonalImg} />}>
            {token ? (
                response.data?.success ? (
                    <ActivationPageSuccess />
                ) : (
                    <ActivationErrorPage />
                )
            ) : (
                <Navigate to={RoutesEnum.LOGIN} />
            )}
        </EntryLayout>
    );
}


.\src\pages\EntryPage\ActivationPage\style.scss
-----------------------------------------------


.\src\pages\EntryPage\ActivationPage\-Error\index.tsx
-----------------------------------------------------
import { cn } from "@bem-react/classname";
import { useNavigate } from "react-router-dom";
import { useConfirmQuery } from "../../../../store/api/register";

import Link from "../../../../components/ui-kit/Link";

import "./style.scss";
import RoutesEnum from "../../../../models/routes";

const cnRegisterErrorPage = cn("register-error-page");

export default function ActivationErrorPage() {
    const navigate = useNavigate();

    return (
        <>
            <>
                <p className={cnRegisterErrorPage("title")}>
                    Во время регистрации произошла ошибка!
                </p>
                <p className={cnRegisterErrorPage("description")}>
                    Такое иногда случается. Пожалуйста, попробуйте пройти
                    регистрацию ещё раз.
                </p>
                <p className={cnRegisterErrorPage("description")}>
                    Если ошибка будет настойчиво сохраняться, сообщите об этом в
                    службу поддержки, и мы попробуем помочь вам в решении этой
                    проблемы!
                </p>
                <p className={cnRegisterErrorPage("description")}>
                    Нужна помощь? <Link>support@speechup.ru</Link>
                </p>
            </>

            <Link
                className={cnRegisterErrorPage("link")}
                arrow="right"
                onClick={() => navigate(RoutesEnum.REGISTER)}
            >
                Вернуться к началу регистрации
            </Link>
            <Link className={cnRegisterErrorPage("link")} arrow="right">
                Изучить возможности сервиса
            </Link>
        </>
    );
}


.\src\pages\EntryPage\ActivationPage\-Error\style.scss
------------------------------------------------------
.register-error-page {
    &-title {
        font-weight: 500;
        font-size: 2rem;
        color: #37476A;
    }

    &-description {
        padding: 16px 0;
        color: #37476A;
        font-size: 1.25rem;
    }

    &-link {
        display: block;
        padding: 16px 0;
        font-weight: 500;
        font-size: 1.25rem;
    }
}

.\src\pages\EntryPage\ActivationPage\-Success\index.tsx
-------------------------------------------------------
import { cn } from "@bem-react/classname";
import { useNavigate } from "react-router-dom";

import Link from "../../../../components/ui-kit/Link";

import "./style.scss";
import RoutesEnum from "../../../../models/routes";

const cnFinishPersonal = cn("finish-personal");

export default function ActivationPageSuccess() {
    const navigate = useNavigate();

    return (
        <>
            <>
                <p className={cnFinishPersonal("title")}>
                    Регистрация прошла успешно!
                </p>
                <p className={cnFinishPersonal("description")}>
                    Поздравляем! Ваш путь к успешным выступлениям начинается
                    прямо сейчас.
                </p>
            </>

            <Link
                className={cnFinishPersonal("link")}
                arrow="right"
                onClick={() => navigate(RoutesEnum.LOGIN)}
            >
                Войти в аккаунт
            </Link>
            <Link className={cnFinishPersonal("link")} arrow="right">
                Изучить возможности сервиса
            </Link>
        </>
    );
}


.\src\pages\EntryPage\ActivationPage\-Success\style.scss
--------------------------------------------------------
.finish-personal {
    &-title {
        font-weight: 500;
        font-size: 2rem;
        color: #37476A;
    }

    &-description {
        padding: 16px 0;
        color: #37476A;
        font-size: 1.25rem;
    }

    &-link {
        display: block;
        padding: 16px 0;
        font-weight: 500;
        font-size: 1.25rem;
    }
}

.\src\pages\EntryPage\LoginPage\index.tsx
-----------------------------------------
import { useEffect, useState } from "react";
import { ReactSVG } from "react-svg";
import { cn } from "@bem-react/classname";
import { useLocation, useNavigate } from "react-router-dom";
import { useAppSelector } from "../../../hooks/redux";

import { useLazyLoginQuery } from "../../../store/api/account";
import { PageType } from "../../../models/entry";

import UserTypeSwitch from "../-UserTypeSwitch";
import InfoFragment from "../-InfoFragment";
import EntryLayout from "../../../layouts/EntryLayout";
import LoginRegisterChanger from "../-LoginRegisterChanger";
import Button from "../../../components/ui-kit/Button";
import Link from "../../../components/ui-kit/Link";
import InputHeader from "../../../components/ui-kit/InputHeader";
import Input from "../../../components/ui-kit/Input";

import LoginImage from "./assets/login.svg"; // login_pic.png
import RegisterImageBusiness from "../RegisterPage/assets/reg-image-business.svg";

import "./style.scss";
import RoutesEnum from "../../../models/routes";
import PrimaryInfoBusiness from "../RegisterPage/PrimaryInfoBusiness";

enum UserType {
    Personal,
    Business,
}

const cnLoginPage = cn("login-page");

const INVALID_LOGIN_INIT_TEXT = "Поле не может быть пустым";

export default function LoginPage() {
    const userType = useAppSelector((state) => state.entry.userType);
    const navigate = useNavigate();
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");

    const [isEmailWrong, setEmailWrong] = useState(false);
    const [isPasswordWrong, setPasswordWrong] = useState(false);
    const [wrongEmailText, setWrongEmailText] = useState(
        INVALID_LOGIN_INIT_TEXT,
    );
    const [wrongPasswordText, setWrongPasswordText] = useState("");

    const [loginRequest, loginResponse] = useLazyLoginQuery();
    const { isFetching } = loginResponse;

    const location = useLocation();

    const from =
        ((location.state as any)?.from.pathname as string) || RoutesEnum.HOME;

    async function onSubmit() {
        try {
            const result = await loginRequest({ email, password });
            const { isSuccess, data } = result;
            if (isSuccess && data) {
                if (data.success) {
                    navigate(from);
                } else {
                    const error = data.error!;
                    setEmailWrong(false);
                    setPasswordWrong(false);
                    switch (error.code) {
                        case 10003:
                            setWrongPasswordText(error.msg);
                            setPasswordWrong(true);
                            break;
                        case 10015:
                            setWrongEmailText(error.msg);
                            setEmailWrong(true);
                            break;
                        default:
                            alert(error.msg);
                            break;
                    }
                }
            } else {
                alert("Ошибка сервера");
            }
        } catch (e) {
            alert(e);
        }
    }

    return (
        <EntryLayout
            image={
                // <img src={LoginImage} alt="login" className={cnLoginPage("image")}/>
                <ReactSVG
                    src={
                        userType === UserType.Personal
                            ? LoginImage
                            : RegisterImageBusiness
                    }
                    className={cnLoginPage("image")}
                />
            }
        >
            {userType === UserType.Personal ? (
                <>
                    <UserTypeSwitch />
                    <div className={cnLoginPage("padding")}><LoginRegisterChanger pageType={PageType.Login} /></div>
                    
                    <div className={cnLoginPage()}>
                        <InfoFragment
                            phrase={
                                userType === UserType.Personal
                                    ? "Готовы всех поразить?"
                                    : "Путь к лучшему коллективу"
                            }
                            subphrase={
                                userType === UserType.Personal
                                    ? "Каждое ваше выступление может быть лучшим."
                                    : "Поможем сделать правильный выбор."
                            }
                        />

                        <div className={cnLoginPage("inputs")}>
                            <label>
                                <InputHeader
                                    text="Почта"
                                    wrong={isEmailWrong}
                                    wrongText={wrongEmailText}
                                />
                                <Input
                                    placeholder="Введите электронную почту"
                                    value={email}
                                    type="email"
                                    onChange={(e) => setEmail(e.target.value)}
                                    invalid={isEmailWrong}
                                />
                            </label>
                            <label>
                                <InputHeader
                                    text="Пароль"
                                    wrong={isPasswordWrong}
                                    wrongText={wrongPasswordText}
                                />
                                <Input
                                    placeholder="Введите пароль"
                                    value={password}
                                    onChange={(e) =>
                                        setPassword(e.target.value)
                                    }
                                    type="password"
                                    invalid={isPasswordWrong}
                                />
                            </label>

                            <Button
                                className={cnLoginPage("next-button")}
                                disabled={isFetching || !(email && password)}
                                onClick={onSubmit}
                                // onClick={() => loginRequest({ email, password })}
                            >
                                Продолжить
                            </Button>
                        </div>
                        <p>
                            <span className={cnLoginPage("span")}>
                                Забыли пароль?
                            </span>
                            &nbsp;
                            <Link
                                className={cnLoginPage("link")}
                                onClick={() => navigate(RoutesEnum.RESTORE)}
                            >
                                Восстановить
                            </Link>
                        </p>
                    </div>
                </>
            ) : (
                <PrimaryInfoBusiness />
            )}
        </EntryLayout>
    );
}


.\src\pages\EntryPage\LoginPage\style.scss
------------------------------------------
.login-page {
    // padding: 16px 0;


    &-padding {
        padding-top: 20px;
    }

    &-inputs {
        padding: 48px 0 32px 0;
    }

    &-next-button {
        width: 100%;
        margin: 32px 0 0 0;

    }

    &-span {
        color: #37476A;
        font-family: Montserrat Alternates;
        font-size: 16px;
        font-style: normal;
        font-weight: 500;
        line-height: normal;
    }

    &-link {
        color: #2477F4;
        font-family: Montserrat Alternates;
        font-size: 16px;
        font-style: normal;
        font-weight: 600;
        line-height: normal;
    }

    &-image{
        width: 100%;
        height: 99%;
        display: flex;
        flex-flow: row;
        justify-content: flex-end;

        svg{
            height: 100%;
            width: 100%;
        }
    }
}

.\src\pages\EntryPage\PasswordRestorePage\index.tsx
---------------------------------------------------
import { useState } from "react";
import { ReactSVG } from "react-svg";
import { cn } from "@bem-react/classname";

import { useNavigate } from "react-router-dom";
import { useLazyPasswordRestoreQuery } from "../../../store/api/account";

import EntryLayout from "../../../layouts/EntryLayout";
import PasswordRestoreImage from "./assets/password-restore.svg";
import Link from "../../../components/ui-kit/Link";
import Button from "../../../components/ui-kit/Button";

import InputHeader from "../../../components/ui-kit/InputHeader";
import Input from "../../../components/ui-kit/Input";

import "./style.scss";
import RoutesEnum from "../../../models/routes";

const cnPasswordRestorePage = cn("password-restore-page");

export default function PasswordRestorePage() {
    const navigate = useNavigate();
    const [email, setEmail] = useState("");
    const [isProcessed, setIsProcessed] = useState(false);
    const [isError, setIsError] = useState(false);
    const [restorePasswordRequest, restorePasswordResponse] =
        useLazyPasswordRestoreQuery();

    const [errorMessage, setErrorMessage] = useState<string>();
    const { isFetching } = restorePasswordResponse;
    const onSubmit = async () => {
        try {
            const response = await restorePasswordRequest(email).unwrap();
            if (response.success) {
                setIsProcessed(true);
            } else {
                setErrorMessage(response.error?.msg);
                setIsError(true);
            }
        } catch (e) {
            alert(e);
        }
    };

    return (
        <EntryLayout image={<ReactSVG src={PasswordRestoreImage} className={cnPasswordRestorePage("image")}/>}>
            <div className={cnPasswordRestorePage()}>
                {isProcessed ? (
                    <>
                        <p className={cnPasswordRestorePage("title")}>
                            Новый пароль выслан вам на почту!
                        </p>
                        <p className={cnPasswordRestorePage("description")}>
                            Продолжайте пользоваться всеми возможностями Speech
                            Up.
                        </p>
                        <Link
                            arrow="right"
                            onClick={() => navigate(RoutesEnum.LOGIN)}
                            className={cnPasswordRestorePage("link")}
                        >
                            Войти в аккаунт
                        </Link>
                        <Link
                            arrow="right"
                            className={cnPasswordRestorePage("link")}
                        >
                            Изучить возможности сервиса
                        </Link>
                    </>
                ) : (
                    <>
                        <Link
                            onClick={() => navigate(-1)}
                            arrow="left"
                            className={cnPasswordRestorePage("link")}
                        >
                            Вернуться
                        </Link>
                        <p className={cnPasswordRestorePage("title")}>
                            Восстановление пароля
                        </p>
                        <p className={cnPasswordRestorePage("description")}>
                            Введите почту, указанную при регистрации. Туда мы
                            вышлем новый пароль. Вы всегда можете изменить его в
                            настройках.
                        </p>
                        <label>
                            <InputHeader
                                text="Почта"
                                wrongText={errorMessage}
                                wrong={isError}
                            />
                            <Input
                                type="email"
                                placeholder="Укажите почту"
                                value={email}
                                onChange={(e) => setEmail(e.target.value)}
                                invalid={isError}
                            />
                        </label>

                        <Button
                            className={cnPasswordRestorePage("next-button")}
                            onClick={onSubmit}
                            disabled={isFetching}
                        >
                            Продолжить
                        </Button>
                    </>
                )}
            </div>
        </EntryLayout>
    );
}


.\src\pages\EntryPage\PasswordRestorePage\style.scss
----------------------------------------------------
.password-restore-page {
    &-link {
        font-weight: 500;
        display: block;
        padding: 16px 0;
        font-size: 1.25rem;
    }

    &-title {
        font-size: 2rem;
        color: #37476a;
    }

    &-description {
        padding: 16px 0 32px 0;
        font-size: 1.25rem;
    }

    &-next-button {
        width: 100%;
        margin: 32px 0 0 0;
    }

    &-image {
        width: 100%;
        height: 99%;
        display: flex;
        flex-flow: row;
        justify-content: flex-end;

        svg {
            height: 100%;
            width: 100%;
        }
    }
}

.\src\pages\EntryPage\RegisterPage\index.tsx
--------------------------------------------
import { ReactSVG } from "react-svg";
import { useAppSelector } from "../../../hooks/redux";

import { RegisterStep, UserType } from "../../../models/entry";

import EntryLayout from "../../../layouts/EntryLayout";

import RegisterImagePersonal from "./assets/reg-image-personal.svg";
import RegisterImageBusiness from "./assets/reg-image-business.svg";

import PrimaryInfoBusiness from "./PrimaryInfoBusiness";
import SecondaryInfoPersonal from "./SecondaryInfoPersonal";
import SecondaryInfoBusiness from "./SecondaryInfoBusiness";
import EmailVerification from "./EmailVerification";
import PrimaryInfoPersonal from "./PrimaryInfoPersonal";
import ActivationErrorPage from "../ActivationPage/-Error";
import { cn } from "@bem-react/classname";
import "./style.scss";


export default function RegisterPage() {
    const cnRegister = cn("RegisterPage");
    const userType = useAppSelector((state) => state.entry.userType);

    const step = useAppSelector((state) => state.entry.registerStep);

    return (
        <EntryLayout
            image={
                <ReactSVG
                    src={
                        userType === UserType.Personal
                            ? RegisterImagePersonal
                            : RegisterImageBusiness
                    }
                    className={cnRegister("image")}
                />
            }
        >
            {/* {RegisterStep.PrimaryInfo === step && <PrimaryInfo />} */}
            {RegisterStep.PrimaryInfo === step &&
                (userType === UserType.Personal ? (
                    <PrimaryInfoPersonal />
                ) : (
                    <PrimaryInfoBusiness />
                ))}
            {RegisterStep.SecondaryInfo === step &&
                (userType === UserType.Personal ? (
                    <SecondaryInfoPersonal />
                ) : (
                    <SecondaryInfoBusiness />
                ))}
            {RegisterStep.EmailVerification === step && <EmailVerification />}
            {RegisterStep.Error === step && <ActivationErrorPage />}
        </EntryLayout>
    );
}


.\src\pages\EntryPage\RegisterPage\style.scss
---------------------------------------------
.RegisterPage {
    &-image {
        width: 100%;
        height: 99%;
        display: flex;
        flex-flow: row;
        justify-content: flex-end;

        svg {
            height: 100%;
            width: 100%;
        }
    }
}

.\src\pages\EntryPage\RegisterPage\EmailVerification\index.tsx
--------------------------------------------------------------
import { cn } from "@bem-react/classname";

import "./style.scss";
import { useAppDispatch, useAppSelector } from "../../../../hooks/redux";
import Link from "../../../../components/ui-kit/Link";
import { useNavigate } from "react-router-dom";
import RoutesEnum from "../../../../models/routes";
import { setStep } from "../../../../store/slices/entry";
import { RegisterStep } from "../../../../models/entry";
import { clearPersonalRegister } from "../../../../store/slices/register/personal";
import { useResendEmailMutation } from "../../../../store/api/register";

const cnEmailVerification = cn("email-verification");

export default function EmailVerification() {
    const email = useAppSelector((state) => state.register.personal.email);
    const dispatch = useAppDispatch();
    const [request, response] = useResendEmailMutation();
    return (
        <div className={cnEmailVerification()}>
            <Link
                arrow="left"
                className={cnEmailVerification("register-link")}
                onClick={() => {
                    dispatch(setStep(RegisterStep.PrimaryInfo));
                    dispatch(clearPersonalRegister());
                }}
            >
                Вернуться к началу регистрации
            </Link>
            <p className={cnEmailVerification("title")}>
                Мы отправили письмо со ссылкой для подтверждения регистрации
                аккаунта на <Link href={`mailto:${email}`}>{email}</Link>
            </p>
            <p className={cnEmailVerification("description")}>
                Пожалуйста, перейдите по ней, чтобы завершить регистрацию.
            </p>

            <p className={cnEmailVerification("resend-text")}>
                Не пришло письмо?
                <Link
                    className={cnEmailVerification("resend-link")}
                    onClick={() => request(email)}
                >
                    Отправить еще раз
                </Link>
            </p>
            <Link arrow="right" className={cnEmailVerification("info-link")}>
                Изучить возможности сервиса
            </Link>
        </div>
    );
}


.\src\pages\EntryPage\RegisterPage\EmailVerification\style.scss
---------------------------------------------------------------
.email-verification {
    
    &-register-link {
        font-weight: 600;
        margin: 0 0 28px 0;
        display: block;
        font-family: Montserrat Alternates;
    }

    &-title {
        color: #37476A;
        font-family: Onest;
        font-size: 32px;
        font-style: normal;
        font-weight: 400;
        line-height: normal;
        padding: 16px 0;
    }

    &-description {
        color: #7C8EB5;
        font-family: Onest;
        font-size: 1.25rem;
        color: #7c8eb5;
    }

    &-resend-text {
        color: #7C8EB5;
        font-family: Onest;
        font-size: 16px;
        text-transform: uppercase;
        font-weight: 700;
        padding: 32px 0;
    }

    &-resend-link {
        font-family: Onest;
        font-size: 16px;
        font-weight: 700;
        text-transform: uppercase;
        padding: 0 16px;
    }

    &-info-link {
        font-family: Montserrat Alternates;
        font-size: 20px;
        font-style: normal;
        font-weight: 500;

        display: block;
    }
}

.\src\pages\EntryPage\RegisterPage\FinishBusiness\index.tsx
-----------------------------------------------------------
import { cn } from "@bem-react/classname";
import { useNavigate } from "react-router-dom";

import { PageType } from "../../../../models/entry";

import LoginRegisterChanger from "../../-LoginRegisterChanger";
import Link from "../../../../components/ui-kit/Link";

import "./style.scss";
import RoutesEnum from "../../../../models/routes";

const cnFinishBusiness = cn("finish-business");

export default function FinishBusiness() {
    const navigate = useNavigate();
    return (
        <>
            <LoginRegisterChanger pageType={PageType.Register} />
            <p className={cnFinishBusiness("title")}>
                Спасибо за заполнение заявки!
            </p>
            <p className={cnFinishBusiness("description")}>
                Наш менеджер свяжется с Вами в ближайшее время и сориентирует по
                дальнейшим шагам сотрудничества!
            </p>
            <Link className={cnFinishBusiness("link")} arrow="right">
                Изучить возможности сервиса
            </Link>
            <Link
                className={cnFinishBusiness("link")}
                arrow="right"
                onClick={() => navigate(RoutesEnum.REGISTER)}
            >
                Вернуться к регистрации
            </Link>
        </>
    );
}


.\src\pages\EntryPage\RegisterPage\FinishBusiness\style.scss
------------------------------------------------------------
.finish-business {
    &-title {
        font-weight: 500;
        font-size: 2rem;
        color: #37476A;
        padding: 16px 0 0 0;
    }

    &-description {
        padding: 16px 0;
        color: #37476A;
        font-size: 1.25rem;
    }

    &-link {
        display: block;
        padding: 16px 0;
        font-weight: 500;
        font-size: 1.25rem;
    }
}

.\src\pages\EntryPage\RegisterPage\PrimaryInfoBusiness\index.tsx
----------------------------------------------------------------
import { cn } from "@bem-react/classname";
import { useAppDispatch, useAppSelector } from "../../../../hooks/redux";

import { UserType, PageType, RegisterStep } from "../../../../models/entry";
import {
    setEmail,
    setLastName,
    setName,
} from "../../../../store/slices/register/business";

import { setStep } from "../../../../store/slices/entry";
import { useLazyCheckEmailQuery } from "../../../../store/api/register";
import { useRef, useState } from "react";

import InfoFragment from "../../-InfoFragment";
import LoginRegisterChanger from "../../-LoginRegisterChanger";
import UserTypeSwitch from "../../-UserTypeSwitch";
import Button from "../../../../components/ui-kit/Button";
import Link from "../../../../components/ui-kit/Link";

import Input, { ForwardedInput } from "../../../../components/ui-kit/Input";
import InputHeader from "../../../../components/ui-kit/InputHeader";

import "./style.scss";

const cnPrimaryInfo = cn("primary-info");

const EMAIL_WRONG_TEXT_INIT = "Неверный формат почты";

export default function PrimaryInfoBusiness() {
    const [checkEmailRequest, checkEmailResponse] = useLazyCheckEmailQuery();

    const { data, isFetching, isSuccess } = checkEmailResponse;

    const dispatch = useAppDispatch();

    const userType = useAppSelector((state) => state.entry.userType);

    const { name, lastName, email } = useAppSelector(
        (state) => state.register.business
    );

    const [isNameValid, setNameValid] = useState(true);
    const [isEmailValid, setEmailValid] = useState(true);

    const [wrongEmailText, setWrongEmailText] = useState(EMAIL_WRONG_TEXT_INIT);
    const nameInputRef = useRef<HTMLInputElement>(null);
    const emailInputRef = useRef<HTMLInputElement>(null);

    const onSubmit = async () => {
        const isEmailValidLocal = emailInputRef.current?.checkValidity();
        const isNameValidLocal = nameInputRef.current?.checkValidity();

        if (!isNameValidLocal) {
            setNameValid(false);
            return;
        }

        if (!isEmailValidLocal) {
            setEmailValid(false);
            setWrongEmailText(EMAIL_WRONG_TEXT_INIT);
            return;
        }

        try {
            const checkEmailResponseData = await checkEmailRequest(
                email
            ).unwrap();
            if (checkEmailResponseData.success) {
                dispatch(setStep(RegisterStep.SecondaryInfo));
            } else {
                setEmailValid(false);
                setWrongEmailText(
                    checkEmailResponseData.error?.msg || "Unknown error"
                );
            }
        } catch (e) {
            alert(e);
        }
    };

    return (
        <>
            <UserTypeSwitch />
            {/* <LoginRegisterChanger pageType={PageType.Register} /> */}
            <div className={cnPrimaryInfo("padding")}>
                {userType === UserType.Personal ? (
                    <InfoFragment
                        phrase="Станьте успешнее и увереннее в себе"
                        subphrase="Совершенствуйте навыки выступлений, репетируя наедине с собой без какого-либо смущения."
                    />
                ) : (
                    <InfoFragment
                        phrase="РАЗВИВАЙТЕ ПУБЛИЧНОСТЬ"
                        subphrase="Оставьте свою заявку на присоединение вашей компании к сервису, заполнив форму ниже."
                    />
                )}
            </div>

            <div className={cnPrimaryInfo("inputs")}>
                <label>
                    <InputHeader
                        text="Имя"
                        wrong={!isNameValid}
                        wrongText="Поле не может быть пустым"
                    />
                    <ForwardedInput
                        required
                        placeholder="Введите имя"
                        maxLength={50}
                        value={name}
                        invalid={!isNameValid}
                        onChange={(e) => dispatch(setName(e.target.value))}
                        onBlur={(e) => setNameValid(e.target.checkValidity())}
                        ref={nameInputRef}
                    />
                </label>
                <label>
                    <InputHeader text="Фамилия" />
                    <Input
                        placeholder="Введите фамилию"
                        value={lastName}
                        onChange={(e) => dispatch(setLastName(e.target.value))}
                    />
                </label>
                <label>
                    <InputHeader
                        text="Почта"
                        wrong={!isEmailValid}
                        wrongText={wrongEmailText}
                    />
                    <ForwardedInput
                        type="email"
                        required
                        placeholder="Укажите почту"
                        value={email}
                        onChange={(e) => dispatch(setEmail(e.target.value))}
                        onBlur={(e) => setEmailValid(e.target.checkValidity())}
                        ref={emailInputRef}
                        invalid={!isEmailValid}
                    />
                </label>
            </div>
            <Button
                className={cnPrimaryInfo("next-button")}
                disabled={isFetching}
                onClick={onSubmit}
            >
                Продолжить
            </Button>
            <p className={cnPrimaryInfo("legal")}>
                Нажимая «Продолжить», я принимаю условия{" "}
                <Link>Пользовательского соглашения</Link> и даю своё согласие
                ООО «Точка инноваций» на обработку моей персональной информации
                на условиях, определённых{" "}
                <Link>Политикой конфиденциальности</Link>.
            </p>
        </>
    );
}


.\src\pages\EntryPage\RegisterPage\PrimaryInfoBusiness\style.scss
-----------------------------------------------------------------
.primary-info {

    &-padding{
        padding-top: 45px;
    }

    &-inputs {
        padding: 16px 0 0 0;
    }

    &-next-button {
        margin: 16px 0;
        width: 100%;
    }

    &-legal {
        font-size: 0.75rem;
        line-height: 16px;
        color: #7C8EB5;
    }
}

.\src\pages\EntryPage\RegisterPage\PrimaryInfoPersonal\index.tsx
----------------------------------------------------------------
import { cn } from "@bem-react/classname";
import { useAppDispatch, useAppSelector } from "../../../../hooks/redux";

import { UserType, PageType, RegisterStep } from "../../../../models/entry";

import {
    setName,
    setBirthday,
    setCity,
    setLastName,
} from "../../../../store/slices/register/personal";

import { setStep } from "../../../../store/slices/entry";

import { useLazyCheckEmailQuery } from "../../../../store/api/register";
import { useRef, useState } from "react";

import InfoFragment from "../../-InfoFragment";
import LoginRegisterChanger from "../../-LoginRegisterChanger";
import UserTypeSwitch from "../../-UserTypeSwitch";
import Button from "../../../../components/ui-kit/Button";
import Link from "../../../../components/ui-kit/Link";

import Input, { ForwardedInput } from "../../../../components/ui-kit/Input";
import InputHeader from "../../../../components/ui-kit/InputHeader";

import "./style.scss";

const cnPrimaryInfo = cn("primary-info");

export default function PrimaryInfo() {
    const dispatch = useAppDispatch();

    const userType = useAppSelector((state) => state.entry.userType);
    const { name, lastName, birthday, city } = useAppSelector(
        (state) => state.register.personal
    );

    const [isNameValid, setNameValid] = useState(true);
    const [isBirthdayValid, setBirthdayValid] = useState(true);

    const nameInputRef = useRef<HTMLInputElement>(null);
    const birthdayInputRef = useRef<HTMLInputElement>(null);

    const onSubmit = () => {
        const isNameValid = nameInputRef.current?.checkValidity();
        if (!isNameValid) {
            setNameValid(false);
        }
        const isBirthdayValid = birthdayInputRef.current?.checkValidity();
        if (!isBirthdayValid) {
            setBirthdayValid(false);
        }
        if (isNameValid && isBirthdayValid) {
            dispatch(setStep(RegisterStep.SecondaryInfo));
        }
    };

    return (
        <>
            <UserTypeSwitch />
            <LoginRegisterChanger pageType={PageType.Register} />
            {userType === UserType.Personal ? (
                <InfoFragment
                    phrase={"Станьте успешнее \n и увереннее в себе"}
                    subphrase="Совершенствуйте навыки выступлений, репетируя наедине с собой без какого-либо смущения."
                />
            ) : (
                <InfoFragment
                    phrase="РАЗВИВАЙТЕ ПУБЛИЧНОСТЬ"
                    subphrase="Оставьте свою заявку на присоединение вашей компании к сервису, заполнив форму ниже."
                />
            )}
            <div className={cnPrimaryInfo("inputs")}>
                <label>
                    <InputHeader
                        text="Имя"
                        wrong={!isNameValid}
                        wrongText="Поле не может быть пустым"
                    />
                    <ForwardedInput
                        required
                        placeholder="Введите имя"
                        maxLength={50}
                        value={name}
                        invalid={!isNameValid}
                        onChange={(e) => dispatch(setName(e.target.value))}
                        onBlur={(e) => setNameValid(e.target.checkValidity())}
                        ref={nameInputRef}
                    />
                </label>
                <label>
                    <InputHeader text="Фамилия" />
                    <Input
                        placeholder="Введите фамилию"
                        value={lastName}
                        onChange={(e) => dispatch(setLastName(e.target.value))}
                    />
                </label>

                <label>
                    <InputHeader
                        text="Дата рождения"
                        wrong={!isBirthdayValid}
                        wrongText="Некорректная дата"
                    />
                    <ForwardedInput
                        type="date"
                        min="1900-01-01"
                        required
                        value={birthday}
                        onChange={(e) => dispatch(setBirthday(e.target.value))}
                        max={new Date().toLocaleDateString("fr-ca")}
                        ref={birthdayInputRef}
                        invalid={!isBirthdayValid}
                    />
                </label>

                <label>
                    <InputHeader text="Город" />
                    <Input
                        placeholder="Введите свой город"
                        value={city}
                        onChange={(e) => dispatch(setCity(e.target.value))}
                    />
                </label>
            </div>
            <Button className={cnPrimaryInfo("next-button")} onClick={onSubmit}>
                Продолжить
            </Button>

        </>
    );
}


.\src\pages\EntryPage\RegisterPage\PrimaryInfoPersonal\style.scss
-----------------------------------------------------------------
.primary-info {

    &-inputs {
        padding: 16px 0 0 0;
    }

    &-next-button {
        margin: 16px 0;
        width: 100%;
    }


}

.\src\pages\EntryPage\RegisterPage\SecondaryInfoBusiness\index.tsx
------------------------------------------------------------------
import { cn } from "@bem-react/classname";
import { RegisterStep } from "../../../../models/entry";

import { useAppDispatch, useAppSelector } from "../../../../hooks/redux";
import {
    setCompanyName,
    setTIN,
    setWorkPosition,
} from "../../../../store/slices/register/business";
import { setStep } from "../../../../store/slices/entry";

import Button from "../../../../components/ui-kit/Button";
import Link from "../../../../components/ui-kit/Link";
import InputHeader from "../../../../components/ui-kit/InputHeader";
import Input from "../../../../components/ui-kit/Input";

import "./style.scss";

const cnSecondaryInfoBusiness = cn("secondary-info-business");

export default function SecondaryInfoBusiness() {
    const { name, companyName, TIN, workPosition } = useAppSelector(
        (state) => state.register.business
    );
    const dispatch = useAppDispatch();

    return (
        <>
            <Link
                className={cnSecondaryInfoBusiness("back-link")}
                arrow="left"
                onClick={() => dispatch(setStep(RegisterStep.PrimaryInfo))}
            >
                Вернуться
            </Link>
            <p className={cnSecondaryInfoBusiness("title")}>
                Приветствуем,{" "}
                <span
                    className={cnSecondaryInfoBusiness("title", { name: true })}
                >
                    {name}
                </span>
                !
            </p>
            <p className={cnSecondaryInfoBusiness("subtitle")}>
                Завяка на корпоративное использование
            </p>
            <p className={cnSecondaryInfoBusiness("description")}>
                Пожалуйста, добавьте информацию о вашей компании. Не
                переживайте, мы запрашиваем её исключительно в целях
                безопасности.
            </p>
            <div className={cnSecondaryInfoBusiness("inputs")}>
                <label>
                    <InputHeader text="Название компании" />
                    <Input
                        placeholder="Введите название"
                        value={companyName}
                        onChange={(e) =>
                            dispatch(setCompanyName(e.target.value))
                        }
                    />
                </label>
                <label>
                    <InputHeader text="ИНН" />
                    <Input
                        placeholder="Введите ИНН"
                        value={TIN}
                        onChange={(e) => dispatch(setTIN(e.target.value))}
                    />
                </label>
                <label>
                    <InputHeader text="Ваша должность" />
                    <Input
                        placeholder="Укажите вашу должность"
                        value={workPosition}
                        onChange={(e) =>
                            dispatch(setWorkPosition(e.target.value))
                        }
                    />
                </label>
            </div>
            <Button
                className={cnSecondaryInfoBusiness("next-button")}
                // onClick={() => {
                //     setStep(RegisterStep.FinishRegister);
                // }}
            >
                Отправить заявку
            </Button>
        </>
    );
}


.\src\pages\EntryPage\RegisterPage\SecondaryInfoBusiness\style.scss
-------------------------------------------------------------------
.secondary-info-business {
    &-back-link {
        display: block;
        font-weight: 600;
        padding: 14px 0;
    }

    &-title {
        color: #37476a;
        font-size: 32px;

        padding: 16px 0;

        &_name {
            color: #2477f4;
            font-weight: 600;
        }
    }

    &-subtitle {
        font-weight: 500;
        font-size: 1.375rem;
        color: #2477f4;
        padding: 0 0 8px 0;
    }

    &-description {
        color: #37476a;
        font-size: 1.25rem;
    }

    &-inputs {
        padding: 32px 0;
    }

    &-next-button {
        width: 100%;
    }
}


.\src\pages\EntryPage\RegisterPage\SecondaryInfoPersonal\index.tsx
------------------------------------------------------------------
import { cn } from "@bem-react/classname";
import Button from "../../../../components/ui-kit/Button";
import Link from "../../../../components/ui-kit/Link";
import { RegisterStep } from "../../../../models/entry";

import { useEffect, useRef, useState } from "react";
import checkPasswordRegex from "../../../../tools/validations/passwordValidation";
import { useAppDispatch, useAppSelector } from "../../../../hooks/redux";

import { setStep } from "../../../../store/slices/entry";
import { setEmail, setTel } from "../../../../store/slices/register/personal";

import "./style.scss";
import {
    useLazyCheckEmailQuery,
    useRegisterMutation,
} from "../../../../store/api/register";
import InputHeader from "../../../../components/ui-kit/InputHeader";
import Input, { ForwardedInput } from "../../../../components/ui-kit/Input";

const cnSecondaryInfoPersonal = cn("secondary-info-personal");

const PASSWORD_ERROR_TEXT_INIT = "Пароли не совпадают";
const EMAIL_WRONG_TEXT_INIT = "Неверный формат почты";

export default function SecondaryInfoPersonal() {
    const dispatch = useAppDispatch();

    const { name, lastName, birthday, city, email, tel } = useAppSelector(
        (state) => state.register.personal
    );
    const [checkEmailRequest, checkEmailResponse] = useLazyCheckEmailQuery();
    const [wrongEmailText, setWrongEmailText] = useState(EMAIL_WRONG_TEXT_INIT);
    const [isEmailValid, setEmailValid] = useState(true);
    const [isTelValid, setTelValid] = useState(true);

    const [password, setPassword] = useState("");
    const [passwordRepeat, setPasswordRepeat] = useState("");

    const [isPasswordValid, setPasswordValid] = useState(true);
    const [passwordErrorText, setPasswordErrorText] = useState(
        PASSWORD_ERROR_TEXT_INIT
    );

    const [registerRequest, registerResponse] = useRegisterMutation();
    const { isLoading, isSuccess, isError } = registerResponse;

    const emailInputRef = useRef<HTMLInputElement>(null);
    const telInputRef = useRef<HTMLInputElement>(null);

    const onSubmit = async () => {
        setWrongEmailText(EMAIL_WRONG_TEXT_INIT);
        setPasswordErrorText(PASSWORD_ERROR_TEXT_INIT);
        const isTelValid = !!telInputRef.current?.checkValidity();
        let isEmailValid = !!emailInputRef.current?.checkValidity();
        const isPasswordsEquals = password === passwordRepeat;
        const _isPasswordValid =
            password.length !== 0 && checkPasswordRegex(password);

        setTelValid(isTelValid);
        setEmailValid(isEmailValid);
        setPasswordValid(isPasswordsEquals && _isPasswordValid);

        if (!_isPasswordValid) {
            setPasswordErrorText("Неверный пароль (см. подсказку)");
        }
        if (isEmailValid) {
            const checkEmailResponse = await checkEmailRequest(email);
            if (!checkEmailResponse.isSuccess) {
                setWrongEmailText(
                    "Ошибка при проверке почты, попробуйте позднее"
                );
                isEmailValid = false;
            } else if (!checkEmailResponse.data?.success) {
                setWrongEmailText(
                    "Пользователь с такой почтой уже зарегистрирован"
                );
                isEmailValid = false;
            } else {
                isEmailValid = true;
            }
            setEmailValid(isEmailValid);
        }

        if (
            isTelValid &&
            isEmailValid &&
            isPasswordsEquals &&
            _isPasswordValid
        ) {
            await registerRequest({
                firstname: name,
                lastname: lastName,
                birthday: birthday,
                email: email,
                phone: tel,
                avatar: null,
                password: password,
                city: city,
            });
        }
    };

    useEffect(() => {
        if (isSuccess) {
            const data = registerResponse.data;
            if (data.success) {
                dispatch(setStep(RegisterStep.EmailVerification));
            } else {
                alert(data.error?.msg);
            }
        }
    }, [isSuccess]);

    useEffect(() => {
        if (isLoading) {
            /// some loading action
        }
    }, [isLoading]);

    useEffect(() => {
        if (isError) {
            const error = registerResponse.error as Response;
            alert(`Error with status code ${error.status}`);
            console.log(registerResponse.error);
        }
    }, [isError]);

    return (
        <>
            <Link
                className={cnSecondaryInfoPersonal("back-link")}
                onClick={() => dispatch(setStep(RegisterStep.PrimaryInfo))}
                arrow="left"
            >
                Вернуться
            </Link>
            <p className={cnSecondaryInfoPersonal("title")}>
                Приветствуем,{" "}
                <span
                    className={cnSecondaryInfoPersonal("title", { name: true })}
                >
                    {name}
                </span>
                !
            </p>
            <div className={cnSecondaryInfoPersonal("inputs")}>
                <label>
                    <InputHeader
                        text="Почта"
                        wrong={!isEmailValid}
                        wrongText={wrongEmailText}
                    />
                    <ForwardedInput
                        type="email"
                        required
                        placeholder="Укажите почту"
                        value={email}
                        onChange={(e) => dispatch(setEmail(e.target.value))}
                        onBlur={(e) => setEmailValid(e.target.checkValidity())}
                        ref={emailInputRef}
                        invalid={!isEmailValid}
                    />
                </label>
                <label>
                    <InputHeader
                        text="Телефон"
                        wrongText="Неверный формат номера"
                        wrong={!isTelValid}
                    />
                    <ForwardedInput
                        type="tel"
                        placeholder="Укажите телефон"
                        onChange={(e) => dispatch(setTel(e.target.value))}
                        value={tel}
                        pattern="^[\+\d](?:\d\s?){6,14}\d$"
                        ref={telInputRef}
                        invalid={!isTelValid}
                    />
                </label>
                <label>
                    <InputHeader
                        text="Пароль"
                        wrong={!isPasswordValid}
                        wrongText={passwordErrorText}
                        helpText={`Не менее 8 символов.
                            Минимум 1 латинская буква верхнего и нижнего регистра.
                            Минимум 1 цифра или символ (~!@#$%^&*_-+=\`|\(){}[]:;"'<>,.?/)`}
                    />
                    <Input
                        placeholder="Придумайте пароль"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        type="password"
                        invalid={!isPasswordValid}
                    />
                </label>
                <label>
                    <InputHeader
                        text="Подтверждение пароля"
                        wrong={!isPasswordValid}
                    />
                    <Input
                        placeholder="Повторите пароль"
                        value={passwordRepeat}
                        onChange={(e) => setPasswordRepeat(e.target.value)}
                        type="password"
                        invalid={!isPasswordValid}
                    />
                </label>
            </div>
            <Button
                className={cnSecondaryInfoPersonal("next-button")}
                disabled={isLoading}
                onClick={onSubmit}
            >
                Завершить регистрацию
            </Button>
            <p className={cnSecondaryInfoPersonal("legal")}>
                Нажимая «Завершить регистрацию», я подтверждаю корректность
                введённых данных, принимаю условия{" "}
                <Link>Пользовательского соглашения</Link> и даю своё согласие
                ООО «Точка инноваций» на обработку моей персональной информации
                на условиях, определённых{" "}
                <Link>Политикой конфиденциальности</Link>.
            </p>
        </>
    );
}


.\src\pages\EntryPage\RegisterPage\SecondaryInfoPersonal\style.scss
-------------------------------------------------------------------
.secondary-info-personal {
    &-back-link {
        display: block;
        margin: 14px 0;
        font-weight: 600;
    }

    &-title {
        color: #37476a;
        font-size: 32px;

        padding: 16px 0;

        &_name {
            color: #2477f4;
            font-weight: 600;
        }
    }

    &-inputs {
        padding: 16px 0;
    }

    &-next-button {
        width: 100%;
        margin: 16px 0 8px 0;
    }

    &-legal {
        font-size: 0.75rem;
        line-height: 16px;
        color: #7c8eb5;
    }
}


.\src\pages\HomePage\index.tsx
------------------------------
import Carousel from "../../components/Сarousel";
import { cn } from "@bem-react/classname";

import MainLayout from "../../layouts/MainLayout";
import Chat from "../../components/Chat";

import ElementEqual from "./icons/element-equal.svg";
import "./style.scss";
import { ReactSVG } from "react-svg";
import VideoBlock from "../../components/VideoBlock";


const cnHome = cn("home");

export default function HomePage() {
    return (
        <MainLayout>
            <div className={cnHome()}>
                <div className={cnHome("chat")}>
                    <Chat/>
                </div>
                <div className={cnHome("header")}>
                    <ReactSVG src={ElementEqual} />
                    <div>Лучшие выступления</div>
                </div>
                <div className={cnHome("content")}>
                </div>

                <VideoBlock></VideoBlock>
                <Carousel/>
            </div>
        </MainLayout>
    );
}


.\src\pages\HomePage\style.scss
-------------------------------
.home {
    width: 100%;
    height: 100%;
    position: relative;

    &-content {
        padding: 16px 0;
    }

    &-header {
        display: flex;
        width: fit-content;
        height: 60px;
        position: relative;
        align-items: center;
        font-weight: 600;

        & svg {
            padding: 5px;
        }
    }

    &-chat {
        position: absolute;
        width: 400px;
        
        right: 0px;
    }
}


.\src\pages\ImprovisationPage\index.tsx
---------------------------------------
import MainLayout from "../../layouts/MainLayout";

export default function ImprovisationPage() {
    return (
        <MainLayout>
            <div>ImprovisationPage</div>
        </MainLayout>
    );
}


.\src\pages\LandingPage\index.tsx
---------------------------------
import { ReactSVG } from "react-svg";
import EntryLayout from "../../layouts/EntryLayout";
import RegisterImagePersonal from "../EntryPage/RegisterPage/assets/reg-image-personal.svg";
import EmailVerification from "../EntryPage/RegisterPage/EmailVerification";

export default function LandingPage() {
    return (
        <EntryLayout image={<ReactSVG src={RegisterImagePersonal} />}>
            <EmailVerification />
            {/* {RegisterStep.Error === step && <ActivationErrorPage />} */}
        </EntryLayout>
    );
}


.\src\pages\LearningPage\index.tsx
----------------------------------
import { useEffect, useMemo, useRef, useState } from "react";
import AnalysisReport from "../../components/Report";
import MainLayout from "../../layouts/MainLayout";

import { useAppSelector } from "../../hooks/redux";

import "./style.scss";
import { cn } from "@bem-react/classname";

export default function LearningPage() {
    const cnLearning = cn("LearningPage");

    return (
        <MainLayout>
        </MainLayout>
    );
}


.\src\pages\LearningPage\style.scss
-----------------------------------
.LearningPage{

}


.animated-background {
    animation-duration: 3s;
    animation-fill-mode: forwards;
    animation-iteration-count: infinite;
    animation-name: placeHolderShimmer;
    animation-timing-function: linear;
    background: linear-gradient(to right, #2477f4 8%, #fff 18%, #2477f4 33%);
    background-size: 800px 104px;
    height: 60px;
  }

  @keyframes placeHolderShimmer {
    0% {
      background-position: -800px 0
    }
    100% {
      background-position: 800px 0
    }
  }
  

.\src\pages\RecodingPage\index.tsx
----------------------------------
import EmptyLayout from "../../layouts/EmptyLayout";
import { cn } from "@bem-react/classname";
import Webcam from "react-webcam";
import {
    useCallback,
    useEffect,
    useLayoutEffect,
    useRef,
    useState,
} from "react";

import { Link, useLocation, useNavigate } from "react-router-dom";

import Timer from "../../components/Timer";
import BasicTextPlan from "../../components/BasicTextPlan";
import ModalWindow from "../../components/ModalWindow/ModalWindow";
import {
    IInfoVideo,
    VideoUploadContext,
    initialInfoVideo,
} from "../../components/RepetitionComponents/RepetitionStart";
import PreviewBlock from "../../components/PreviewBlock";
import { useSendVideoMutation } from "../../store/api/userVideo";
import RoutesEnum from "../../models/routes";

import backIcon from "./assets/Vector.svg";
import startRecordIcon from "./assets/video-play.svg";
import dangerIcon from "./assets/danger.svg";

import { ReactSVG } from "react-svg";

import "./style.scss";
import { MAX_MINUTES_FOR_VIDEO, MIN_MINUTES_FOR_VIDEO } from "../../constants";
import Stopwatch from "../../components/Stopwatch";

export const TIMER_STATUS = {
    START: true,
    STOP: false,
};

export default function RecodingPage() {
    /* ----------------------------------- CONST BLOCK ----------------------------------- */
    const cnRecoding = cn("RecodingPage");
    const loadingPicture = "/images/loading.svg"; //path to public

    const navigate = useNavigate();
    const { state } = useLocation();

    const videoConstraints = {
        width: 1280,
        height: 720,
        facingMode: "user",
    };

    /* ----------------------------------- PLAN  ----------------------------------- */
    const { basicPlan, timerSeconds } = state;

    const isShowBasicPlan =
        basicPlan && basicPlan.length > 0 && basicPlan[0] !== "" ? true : false;

    /* ----------------------------------- TIMER  ----------------------------------- */
    const secondsForTimer = timerSeconds
        ? timerSeconds
        : MAX_MINUTES_FOR_VIDEO * 60;
    

    const timerHidden = timerSeconds && timerSeconds > 0 ? false : true;

    const [isTimerStart, setIsTimerStart] = useState(false);

    const updateIsTimerStart = (value: boolean) => {
        setIsTimerStart(value);
    };

    const [resultDuration, setResultDuration] = useState(0);

    /* ----------------------------------- MODAL PARAMS BLOCK ----------------------------------- */
    const [isModal, setModal] = useState(false);
    const [currentFile, setCurrentFile] = useState<File>(new File([], "empty"));

    const closeModal = () => {
        setCurrentFile(new File([], "empty"));
        setModal(false);
    };

    const [isWarning, setIsWarning] = useState(false);

    const closeWarningModal = () => {
        setIsWarning(false);
    };

    /* ----------------------------------- WEBCAM PARAMS BLOCK ----------------------------------- */

    const [canStart, setCanStart] = useState(true);

    const webcamRef = useRef<Webcam>(null);
    const mediaRecorderRef = useRef<MediaRecorder | null>(null);
    const [capturing, setCapturing] = useState(false);
    const [recordedChunks, setRecordedChunks] = useState([]);

    const handleDataAvailable = useCallback(
        ({ data }: any) => {
            if (data.size > 0) {
                setRecordedChunks((prev) => prev.concat(data));
            }
        },
        [setRecordedChunks],
    );

    const handleStartCaptureClick = useCallback(() => {
        if (canStart) {
            setResultSeconds(0);
            updateIsTimerStart(TIMER_STATUS.START);
            setCapturing(true);
            mediaRecorderRef.current = new MediaRecorder(
                webcamRef?.current?.stream as MediaStream,
                {
                    mimeType: `video/webm`,
                },
            );
            mediaRecorderRef.current.addEventListener(
                "dataavailable",
                handleDataAvailable,
            );
            mediaRecorderRef.current.start();
        }
    }, [webcamRef, setCapturing, mediaRecorderRef, handleDataAvailable]);

    const handleStopCaptureClick = useCallback(() => {
        updateIsTimerStart(TIMER_STATUS.STOP);
        if (mediaRecorderRef.current) mediaRecorderRef.current.stop();
        setCapturing(false);
    }, [mediaRecorderRef, setCapturing]);

    useEffect(() => {
        if (recordedChunks.length > 0) {
            const tempType = `video/webm`;
            const file = new Blob(recordedChunks, {
                type: tempType,
            });
            setCurrentFile(
                new File([file], "Recoding Repetition", {
                    type: tempType,
                }),
            );
            setRecordedChunks([]);
        }
    }, [recordedChunks]);

    useLayoutEffect(() => {
        if (currentFile.size !== 0) {
            setModal(true);
        } else {
            setModal(false);
        }
    }, [currentFile]);


    /* ----------------------------------- DEVICES BLOCK ----------------------------------- */
    const [devices, setDevices] = useState([]);

    const handleDevices = useCallback(
        (mediaDevices: any) =>
            setDevices(
                mediaDevices.filter(({ kind }: any) => kind === "videoinput"),
            ),
        [setDevices],
    );

    useEffect(() => {
        if (devices) {
            if (devices.length >= 1) setCanStart(true);
            else setCanStart(false);
        }
    }, [devices]);

    useEffect(() => {
        navigator.mediaDevices.enumerateDevices().then(handleDevices);
    }, [handleDevices]);

    /* ----------------------------------- LOADING MODAL PARAMS BLOCK ----------------------------------- */
    const [isLoadingModal, setIsLoadingModal] = useState(false);
    const [currentInfoData, setCurrentInfoData] =
        useState<IInfoVideo>(initialInfoVideo);
    const [isErrorWithSuccess, setIsErrorWithSuccess] = useState(false);

    useEffect(() => {
        if (currentInfoData && currentInfoData.title.length > 0) {
            sendVideoData();
            closeModal();
            showLoadingModal();
        }
    }, [currentInfoData]);

    const [videoSendRequest, videoSendResponse] = useSendVideoMutation();
    const { isLoading, isSuccess, isError } = videoSendResponse;

    const sendVideoData = async () => {
        if (currentInfoData) {
            await videoSendRequest(currentInfoData);
        }
    };

    const showLoadingModal = async () => {
        setIsLoadingModal(true);
    };

    const closeLoadingModal = () => {
        setIsLoadingModal(false);
    };

    // answers from back
    useEffect(() => {
        if (isSuccess) {
            console.log("isSuccess", videoSendResponse);
            const data = videoSendResponse.data;
            if (data.success) {
                setCurrentFile(new File([], "empty"));
                setCurrentInfoData(initialInfoVideo);
            } else {
                setIsErrorWithSuccess(true);
            }
        }
    }, [isSuccess]);

    useEffect(() => {
        if (isError) {
            const error = videoSendResponse.error as Response;
            console.log("isError", videoSendResponse.error);
            setCurrentFile(new File([], "empty"));
            setCurrentInfoData(initialInfoVideo);
        }
    }, [isError]);

    const setResultSeconds = (seconds: number) => {
        setResultDuration(seconds);
        setCurrentInfoData((prev) => {
            return { ...prev, duration: `${seconds}` };
        });
    };

    return (
        <EmptyLayout>
            <div className={cnRecoding()}>
                <div className={cnRecoding("container")}>
                    <div className={cnRecoding("video-block")}>
                        <Webcam
                            className={cnRecoding("video")}
                            audio={true}
                            mirrored={true}
                            ref={webcamRef}
                            muted={true}
                            videoConstraints={videoConstraints}
                            onUserMediaError={(e) => {
                                setCanStart(false);
                                setIsWarning(true);
                                console.log("onUserMediaError", e);
                            }}
                            onUserMedia={(e) => console.log("onUserMedia", e)}
                        />

                        <div className={cnRecoding("button-block")}>
                            {capturing ? (
                                <button
                                    className={cnRecoding("button")}
                                    onClick={handleStopCaptureClick}
                                >
                                    Завершить
                                </button>
                            ) : (
                                <>
                                    <button
                                        className={cnRecoding("button", {
                                            disable: !canStart,
                                        })}
                                        onClick={handleStartCaptureClick}
                                    >
                                        <ReactSVG
                                            src={startRecordIcon}
                                            className={cnRecoding("icon")}
                                        />
                                        Начать репетицию
                                    </button>
                                    <div
                                        className={cnRecoding(
                                            "button-block-back",
                                            "button-block-back",
                                        )}
                                        onClick={() => navigate(-1)}
                                    >
                                        <ReactSVG
                                            src={backIcon}
                                            className={cnRecoding("icon")}
                                        />
                                        Вернуться к настройкам
                                    </div>
                                </>
                            )}
                        </div>

                        <div className={cnRecoding("right-block")}>
                            {timerHidden ? (
                                <Stopwatch
                                    seconds={secondsForTimer}
                                    isStart={isTimerStart}
                                    setResultSeconds={setResultSeconds}
                                    timerOver={handleStopCaptureClick}
                                />
                            ) : (
                                <Timer
                                    seconds={secondsForTimer}
                                    isStart={isTimerStart}
                                    setResultSeconds={setResultSeconds}
                                    timerOver={handleStopCaptureClick}
                                />
                            )}
                        </div>

                        {isShowBasicPlan && (
                            <div className={cnRecoding("bottom-block")}>
                                <BasicTextPlan textPlan={basicPlan} />
                            </div>
                        )}
                    </div>

                    <ModalWindow
                        isVisible={isModal}
                        onClose={closeModal}
                        title={"Предпросмотр завершенной репетиции"}
                    >
                        <VideoUploadContext.Provider
                            value={{
                                currentFile,
                                setCurrentFile,
                                currentInfoData,
                                setCurrentInfoData,
                            }}
                        >
                            {currentFile.size !== 0 && (
                                <PreviewBlock
                                    titleRerecordBtn={"Перезаписать репетицию"}
                                    titleContinueBtn={"Отправить на анализ"}
                                    titleHelpForInput={
                                        "Задайте название репетиции"
                                    }
                                    onClickRerecordBtn={closeModal}
                                />
                            )}
                        </VideoUploadContext.Provider>
                    </ModalWindow>

                    <ModalWindow
                        isVisible={isLoadingModal}
                        onClose={closeLoadingModal}
                        closeOnClickOutside={!isLoading}
                    >
                        {(isLoading || isErrorWithSuccess || isError) && (
                            <div className={cnRecoding("loading")}>
                                <ReactSVG
                                    src={
                                        process.env.PUBLIC_URL + loadingPicture
                                    }
                                    className={cnRecoding("loading-img")}
                                />
                                {isLoading &&
                                    !(isErrorWithSuccess || isError) && (
                                        <>
                                            <div
                                                className={cnRecoding(
                                                    "loading-title",
                                                )}
                                            >
                                                Идет загрузка видео...
                                            </div>
                                            <div
                                                className={cnRecoding(
                                                    "loading-description",
                                                )}
                                            >
                                                Пожалуйста, не закрывайте
                                                вкладку до окончания загрузки.
                                            </div>
                                        </>
                                    )}
                                {(isErrorWithSuccess || isError) && (
                                    <>
                                        <div
                                            className={cnRecoding(
                                                "loading-title-error",
                                                "loading-title-error",
                                            )}
                                        >
                                            Произошла ошибка, попробуйте еще раз
                                        </div>
                                    </>
                                )}
                            </div>
                        )}
                        {isSuccess && !isErrorWithSuccess && (
                            <div className={cnRecoding("loading")}>
                                <ReactSVG
                                    src={
                                        process.env.PUBLIC_URL + loadingPicture
                                    }
                                    className={cnRecoding("loading-img")}
                                />
                                <>
                                    <div
                                        className={cnRecoding("loading-title")}
                                    >
                                        Загрузка видео успешно завершена и
                                        отправлена на анализ
                                    </div>
                                    <div
                                        className={cnRecoding(
                                            "loading-description",
                                            "loading-description",
                                        )}
                                    >
                                        По его окончании вы сможете ознакомиться
                                        с результатами в разделе{" "}
                                        <span
                                            className={cnRecoding(
                                                "loading-title-link",
                                                "loading-title-link",
                                            )}
                                            onClick={() =>
                                                navigate(RoutesEnum.DIARY)
                                            }
                                        >
                                            Дневник
                                        </span>
                                    </div>
                                </>
                            </div>
                        )}
                    </ModalWindow>

                    <ModalWindow
                        isVisible={isWarning}
                        onClose={closeWarningModal}
                        title={"Предупреждение"}
                    >
                        <div className={cnRecoding("warning-message")}>
                            Камера не найдена, включите камеру и повторите
                            попытку или{" "}
                            <Link to={RoutesEnum.REPETITION}>загрузите</Link>{" "}
                            уже готовую репетицию.
                        </div>
                    </ModalWindow>
                </div>
            </div>
        </EmptyLayout>
    );
}


.\src\pages\RecodingPage\style.scss
-----------------------------------
.RecodingPage {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100vw;
    height: 100vh;
    background-color: #020913;


    &-video-blocfk {
        position: relative;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;

        border-radius: 24px;
        overflow: hidden;
    }

    &-video {
        height: 80vh;
    }

    img {
        height: 100%;
        width: 100%;
        object-fit: cover;
        padding: 16px;
        gap: 10px;
        border-radius: 40px;
    }

    &-button-block {

        position: absolute;
        top: 10px;
        left: 10px;
        display: flex;
        justify-content: start;
        align-items: center;
        flex-flow: column nowrap;
        gap: 10px;

        width: 300px;
        min-height: 90px;
        background: rgba(0, 0, 0, 0.3);
        border-radius: 24px;


        &-back {
            // margin-top: 10px;
            text-align: center;
            cursor: pointer;
            display: flex;
            flex-flow: row nowrap;
            gap:5px;

            font-family: 'Montserrat Alternates';
            font-style: normal;
            
            font-weight: 500;
            font-size: 16px;
            line-height: 20px;
            color: rgba(255, 255, 255, 0.7);
        }
    }

    &-right-block{
        position: absolute;
        top: 10px;
        right: 10px;
        
        display: flex;
        justify-content: start;
        align-items: center;
        flex-flow: column nowrap;
        gap: 10px;

        width: 300px;
        min-height: 90px;
        background: rgba(0, 0, 0, 0.3);
        border-radius: 24px;

        &_hidden{
            display: none;
        }
    }

    &-bottom-block{
        position: absolute;
        bottom: 20px;
        width: 90%;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-flow: column nowrap;
        gap: 10px;
        min-height: 90px;
        background: rgba(0, 0, 0, 0.3);
        border-radius: 24px;
        color: #FFFFFF;
    }

    &-button {

        display: flex;
        flex-flow: row nowrap;
        justify-content: center;
        align-content: center;
        align-items: center;
        gap: 8px;
        

        width: 80%;
        margin-top: 10px;
        font-family: 'Montserrat Alternates';
        background: #2477F4;
        color: #fff;
        text-align: center;
        padding: 10px;
        border: none;
        border-radius: 16px;
        cursor: pointer;

        &_disable{
            cursor: not-allowed;
        }
    }

    &-icon{
        width: 28px;
        height: 28px;
    }

    &-loading {
        display: flex;
        flex-flow: column nowrap;
        justify-content: center;
        align-items: center;
        padding: 15px;
        // width: 100%;
        gap: 10px;

        &-img {
            padding-bottom: 10px;
        }

        &-title {
            color: #37476A;
            font-size: 24px;
            font-family: Montserrat Alternates;
            font-weight: 600;

            &-error {
                color: #FF4E78;
                font-size: 24px;
                font-family: Montserrat Alternates;
                font-weight: 600;
            }

            &-link {
                color: #2477F4;
                font-size: 16px;
                font-family: Montserrat Alternates;
                font-weight: 500;
                cursor: pointer;
            }
        }

        &-description {
            color: #7C8EB5;
            font-size: 16px;
            font-family: Montserrat Alternates;
            font-weight: 500;
        }
    }

    &-warning-message{
        padding: 16px 20px;
        color: #37476A;
        font-size: 16px;
        font-family: Montserrat Alternates;
        font-weight: 500;
    }

}




.\src\pages\RepetitionPage\index.tsx
------------------------------------

import { Outlet } from "react-router-dom";

import MainLayout from "../../layouts/MainLayout";

export default function RepetitionPage() {

    return (
        <MainLayout>
            <Outlet />
        </MainLayout>
    );
}


.\src\pages\SettingsPage\index.tsx
----------------------------------
import MainLayout from "../../layouts/MainLayout";
import { Outlet } from "react-router-dom";

export default function SettingsPage() {

    return (
        <MainLayout>
            
            <Outlet />
        </MainLayout>
    );
}


.\src\pages\SurveyPage\index.tsx
--------------------------------
import { Fragment, useEffect, useState } from "react";
import CheckboxQuestion from "../../components/CheckboxQuestion";
import RadioBtnQuestion from "../../components/RadioBtnQuestion";
import SurveyLayout from "../../layouts/SurveyLayout";
import "./style.scss";
import { cn } from "@bem-react/classname";
import { useAppDispatch, useAppSelector } from "../../hooks/redux";

import {
    LocalAnswer,
    setStepAnswers,
    updateChoiceAnswers,
} from "../../store/slices/survey";

import TarifPage from "./TarifPage";
import { useNavigate } from "react-router-dom";
import {
    useGetSurveyQuery,
    useSendAnswersMutation,
} from "../../store/api/survey";
import { IAnswer, IQuestion, typeQuestion } from "../../models/survey";




export default function SurveyPage() {
    const [sendAnswersRequest, sendAnswersResponse] = useSendAnswersMutation();
    const { isLoading, isSuccess, isError } = sendAnswersResponse;

    const dispatch = useAppDispatch();
    const navigate = useNavigate();
    const TITLE_ANKETA = "anketa";

    /* --------------------------------- STEPS BLOCK --------------------------------- */

    const ALL_STEP = 2;
    const QUESTIONS_FOR_STEP = [2, 3, 2];
    const step = useAppSelector((state) => state.survey.step);
    const [canMoved, setCanMoved] = useState(false);

    /* --------------------------------- QUESTION BLOCK --------------------------------- */

    const { data } = useGetSurveyQuery(TITLE_ANKETA);
    const questions = data?.data?.questions as IQuestion[];
    const [currentQuestions, setCurrentQuestions] = useState<IQuestion[]>();

    const [firstIndex, setFirstIndex] = useState(0);

    useEffect(() => {
        if (questions) {
            let lastIndex = QUESTIONS_FOR_STEP.slice(0, step + 1).reduce(
                (sum, elem) => sum + elem,
                0,
            );
            setCurrentQuestions(questions.slice(firstIndex, lastIndex));
        }
    }, [firstIndex, questions, step]);

    /* --------------------------------- ANSWER BLOCK --------------------------------- */

    const [answers, setAnswers] = useState<LocalAnswer[]>([]);
    const storeChoiceAnswers = useAppSelector((state) => state.survey.answers);

    useEffect(() => {
        if (questions) {
            setAnswers(
                questions.map((el) => {
                    return {
                        id_question: el.id,
                        type_question: el.type,
                        id_choices: [],
                        another_choices: "",
                    };
                }),
            );
        }
    }, [questions]);

    const addAnswers = (newAnswer: LocalAnswer) => {
        // взять из стора и проверить есть ли там уже ответы

        let currentAnswers = answers.map((el) => {
            if (el.id_question === newAnswer.id_question) {
                return {
                    ...el,
                    id_choices: newAnswer.id_choices,
                    another_choices: newAnswer.another_choices,
                };
            }
            return el;
        });

        setAnswers(currentAnswers);
        dispatch(updateChoiceAnswers(answers));
    };

    useEffect(() => {
        if (answers && answers[0]) {
            let lastIndex = QUESTIONS_FOR_STEP.slice(0, step + 1).reduce(
                (sum, elem) => sum + elem,
                0,
            );
            let flag = 0;
            for (let i = firstIndex; i < lastIndex; i++) {
                if (answers[i].id_choices.length > 0) flag++;
            }
            setCanMoved(lastIndex - firstIndex === flag ? true : false);
        }
    }, [answers]);

    const changeStep = async () => {
        if (canMoved) {
            setFirstIndex(
                QUESTIONS_FOR_STEP.slice(0, step + 1).reduce(
                    (sum, elem) => sum + elem,
                    0,
                ),
            );
            dispatch(setStepAnswers(step + 1));

            if (step + 1 > ALL_STEP) {
                let body: Array<IAnswer> =
                    convertAnswersForServerFormat(answers);
                console.log("ended", body);
                if (body)
                    await sendAnswersRequest({
                        questionnaire_title: TITLE_ANKETA,
                        answers: body,
                    });
            }
        }
    };

    useEffect(() => {
        if (isSuccess) console.log(sendAnswersResponse);
    }, [isSuccess]);

    useEffect(() => {
        if (isError) console.log(sendAnswersResponse.error);
    }, [isError]);

    // id
    // "63cdf876-01ae-482d-bc98-2de6b541246b"

    const convertAnswersForServerFormat = (currentAnswers: LocalAnswer[]) => {
        if (questions) {
            let finalArray = currentAnswers.map((el) => {
                let current_question = questions.filter(
                    (q) => q.id === el.id_question,
                )[0];
                let current_another = current_question.choices.filter(
                    (ch) => ch.another,
                )[0];
                return el.id_choices.map((choice) => {
                    return {
                        question_id: current_question.id,
                        choice_id: choice,
                        text:
                            current_another && current_another.id === choice
                                ? el.another_choices
                                : "",
                    };
                });
            });
            return finalArray.flat(1);
        } else return [];
    };

    const cnMain = cn("survey");

    return (
        <SurveyLayout>
            {step <= ALL_STEP && (
                <div className={cnMain()}>
                    <div className={cnMain("title")}>
                        Speech Up - один сервис для многих целей
                    </div>
                    <div className={cnMain("description")}>
                        Пожалуйста, поделитесь своими ожиданиями по
                        использованию сервиса. Это позволит предлагать вам
                        персонализированные возможности среди обновлений.
                    </div>
                    <div className={cnMain("questions")}>
                        {currentQuestions &&
                            currentQuestions.map((el, idx) => (
                                <Fragment key={idx}>
                                    {el.type === typeQuestion.checkbox && (
                                        <CheckboxQuestion
                                            key={el.id}
                                            question={{
                                                ...el,
                                                title: `${
                                                    idx +
                                                    1 +
                                                    (step > 0
                                                        ? QUESTIONS_FOR_STEP.slice(
                                                              0,
                                                              step,
                                                          ).reduce(
                                                              (sum, el) =>
                                                                  sum + el,
                                                              0,
                                                          )
                                                        : 0)
                                                }. ${el.title}`,
                                            }}
                                            addAnswers={addAnswers}
                                        />
                                    )}
                                    {el.type === typeQuestion.radio && (
                                        <RadioBtnQuestion
                                            key={el.id}
                                            question={{
                                                ...el,
                                                title: `${
                                                    idx +
                                                    1 +
                                                    (step > 0
                                                        ? QUESTIONS_FOR_STEP.slice(
                                                              0,
                                                              step,
                                                          ).reduce(
                                                              (sum, el) =>
                                                                  sum + el,
                                                              0,
                                                          )
                                                        : 0)
                                                }. ${el.title}`,
                                            }}
                                            addAnswers={addAnswers}
                                        />
                                    )}
                                </Fragment>
                            ))}
                    </div>
                    <div className={cnMain("footer")}>
                        <div className={cnMain("footer-block-btn")}>
                            <button
                                disabled={!canMoved}
                                onClick={changeStep}
                                className={cnMain("btn", {
                                    disabled: !canMoved,
                                })}
                            >
                                {step === ALL_STEP && <>Завершить</>}
                                {step !== ALL_STEP && <>Далее</>}
                            </button>
                        </div>

                        <div>
                            <b className={cnMain("footer-current-step")}>
                                {step + 1}
                            </b>{" "}
                            <b className={cnMain("footer-all-step")}>
                                / {ALL_STEP + 1}
                            </b>
                        </div>
                    </div>
                </div>
            )}
            {step > ALL_STEP && <TarifPage></TarifPage>}
            {/* <TarifPage></TarifPage> */}
        </SurveyLayout>
    );
}


.\src\pages\SurveyPage\style.scss
---------------------------------
.survey{
    display: flex;
    flex-flow: column nowrap;
    margin: 50px;
    padding: 32px;
    border-radius: 48px;
    gap: 10px;
    background-color: #FFFFFF;
    

    &-title{
        font-family: 'Onest';
        font-style: normal;
        font-weight: 700;
        font-size: 24px;
        line-height: 26px;
        text-transform: uppercase;
        color: #031C3D;

    }

    &-description{
        font-family: 'Onest';
        font-style: normal;
        font-weight: 400;
        font-size: 20px;
        color: #37476A;
        line-height: 22px;
    }

    &-questions{
        padding-top: 10px;
        display: flex;
        flex-flow: column nowrap;
        gap:20px;
    }

    &-footer{
        padding-top: 10px;
        display: flex;
        flex-flow: row nowrap;
        justify-content: space-between;
        align-items: center;

        &-block-btn{
            display: flex;
            flex-flow: column nowrap;
            justify-content: space-between;
            align-items: flex-start;
        }

        &-current-step{
            font-family: 'Montserrat Alternates';
            font-style: normal;
            font-weight: 600;
            font-size: 24px;
            line-height: 29px;

            letter-spacing: 0.02em;
            color: #031C3D;
        }

        &-all-step{

            font-family: 'Montserrat Alternates';
            font-style: normal;
            font-weight: 600;
            font-size: 24px;
            line-height: 29px;
            letter-spacing: 0.02em;
            color: #D4DFF4;

        }
    }

    &-btn{
        justify-content: center;

        width: 300px;
        height: 61px;
        background: #2477F4;
        
        border-radius: 14px;
        border: none;

        font-family: 'Montserrat Alternates';
        font-style: normal;
        font-weight: 700;
        font-size: 24px;
        line-height: 29px;
        color: #FFFFFF;

        &_disabled{
            background: #2477F4;
            opacity: 0.5;
        }

    }
}

.\src\pages\SurveyPage\TarifPage\index.tsx
------------------------------------------
import { useEffect, useMemo, useRef, useState } from "react";
import { cn } from "@bem-react/classname";

import { useAppDispatch, useAppSelector } from "../../../hooks/redux";

import { useNavigate } from "react-router-dom";
import RoutesEnum from "../../../models/routes";

import "./style.scss";

import Link from "../../../components/ui-kit/Link";

import Button from "../../../components/ui-kit/Button";
import {
    useGetTraiffsQuery,
    useSendTariffMutation,
} from "../../../store/api/tariff";
import { ITariff } from "../../../models/tariff";

import { UUID } from "crypto";
import TarifCard from "../../../components/TarifCard";




export default function TarifPage() {
    const dispatch = useAppDispatch();
    const navigate = useNavigate();
    const cnTarif = cn("TarifPage");

    //* -------------------------------- GETTING TARIFFS --------------------------------  */

    const tariffs = useGetTraiffsQuery();
    const [basicTariffs, setBasicTariffs] = useState<ITariff[]>();

    useEffect(() => {
        if (tariffs.data && tariffs.data.data && tariffs.isSuccess) {
            setBasicTariffs(
                [...tariffs.data!.data].sort((x, y) => x.price - y.price),
            );
        }
    }, [tariffs]);

    //* -------------------------------- TARIFF SELECTION --------------------------------  */

    const [checkedTarif, setCheckedTarif] = useState("");

    const trialTariff = useMemo(() => {
        if (basicTariffs && basicTariffs.length > 0) {
            let trialElem = basicTariffs.filter((x) => x.price === 0);
            return trialElem.length > 0 ? trialElem[0].id : "";
        } else return "";
    }, [basicTariffs]);

    const clickOnCard = (id: string) => {
        setCheckedTarif(id);
    };

    //* -------------------------------- PROMO CODE --------------------------------  */

    const promocodeRef = useRef<HTMLInputElement>(null);
    const [isPromocodeValid, setPromocodeValid] = useState(true);

    //* -------------------------------- SENDING TARIFF --------------------------------  */

    const userId: UUID = useAppSelector((state) => state.profile.user.id);

    const [sendTariffRequest, sendTariffResponse] = useSendTariffMutation();
    const { isSuccess, isError } = sendTariffResponse;

    const clickOnButton = async () => {
        if (checkedTarif !== "") {
            await sendTariffRequest({
                tarif_id: checkedTarif,
                user_id: userId,
            });
        }
    };

    useEffect(() => {
        if (isSuccess) {
            if (checkedTarif === trialTariff && trialTariff !== "") {
                navigate(RoutesEnum.HOME);
            } else {
                // window.location.replace(...)
                // переход на сторонние сервисы и переход на главную страницу после оплаты
            }
        }
    }, [isSuccess]);

    useEffect(() => {
        if (isError) {
            alert("Что-то пошло не так, попробуйте еще раз.");
        }
    }, [isError]);

    //* -------------------------------- CODE --------------------------------  */

    return (
        <div className={cnTarif()}>
            <div className={cnTarif("header")}>
                <div className={cnTarif("header-thanks")}>
                    Спасибо за ваши ответы!
                </div>
                Пора начинать подготовку!
                <div className={cnTarif("header-bold")}>
                    Выберите подходящий тариф и используйте все возможности
                    подготовки к выступлениям со Speech Up.
                </div>
                <Link arrow="right" className={cnTarif("header-link")}>
                    Узнать подробнее о сервисе
                </Link>
            </div>
            <div className={cnTarif("cards")}>
                {basicTariffs &&
                    basicTariffs.map((el, index) => (
                        <TarifCard
                            key={index}
                            {...el}
                            checked={checkedTarif === el.id}
                            onClick={() => clickOnCard(el.id)}
                        />
                    ))}
            </div>
            <div className={cnTarif("row")}>
                <div className={cnTarif("row-text")}>Промокод :</div>
                <div className={cnTarif("row-block")}>
                    <div className={cnTarif("row-block-content")}>
                        <input
                            type="text"
                            placeholder={"Введите промокод"}
                            className={cnTarif("row-block-input")}
                            maxLength={50}
                            onBlur={(e) =>
                                setPromocodeValid(e.target.checkValidity())
                            }
                            ref={promocodeRef}
                        />
                        {!isPromocodeValid && (
                            <span className={cnTarif("row-block-warning")}>
                                Такого промокода нет. Проверьте, всё ли верно,
                                или введите другой.
                            </span>
                        )}
                    </div>
                </div>

                <Button className={cnTarif("row-btn")}>Применить</Button>
            </div>
            <div className={cnTarif("footer")}>
                <button
                    className={cnTarif("footer-btn", {
                        canClicked: checkedTarif !== "",
                    })}
                    onClick={clickOnButton}
                >
                    {checkedTarif === trialTariff && checkedTarif !== ""
                        ? "Начать"
                        : "Оплатить"}
                </button>
                <span>
                    Обратите внимание, что при оплате выбранного тарифа, вы не
                    сможете прекратить его действие до использования всех
                    оплаченных попыток либо окончания указанного периода.
                </span>
            </div>
        </div>
    );
}


.\src\pages\SurveyPage\TarifPage\style.scss
-------------------------------------------
.TarifPage {
    font-size: 20px;

    display: flex;
    flex-flow: column nowrap;
    margin-left: 50px;
    margin-top: 50px;
    padding: 32px;
    border-radius: 48px;
    gap: 10px;
    background-color: #FFFFFF;

    &-header {
        display: flex;
        flex-flow: column nowrap;
        gap: 10px;
        width: 100%;

        font-family: 'Onest';
        font-style: normal;
        font-weight: 400;
        font-size: 20px;
        line-height: 25px;
        color: #37476A;

        &-thanks {
            font-weight: 700;
            font-size: 40px;
            line-height: 49px;
            text-transform: uppercase;
            color: #031C3D;
        }

        &-bold {
            font-family: 'Onest';
            font-weight: 700;
        }

        &-link {
            font-family: 'Montserrat Alternates';
            font-weight: 500;
            font-size: 20px;
            line-height: 24px;
            color: #2477F4;
        }

    }

    &-cards {
        width: 100%;
        height: 100%;
        min-height: 350px;
        overflow-x: auto;
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        grid-template-rows: 1fr;
        gap: 15px;
        padding: 20px 0;
    }

    &-row {
        width: 100%;
        display: flex;
        flex-flow: row nowrap;
        align-items: flex-start;
        gap: 16px;

        &-text {
            height: 100%;
            padding-top: 8px;
            align-self: flex-start;
            color: #7C8EB5;
            font-family: Montserrat Alternates;
            font-size: 18px;
            font-weight: 600;
            line-height: normal;
        }

        &-block {
            flex-grow: 1;

            &-content {
                display: flex;
                flex-flow: column nowrap;
                // align-items: flex-start;
            }

            &-input {
                border-radius: 12px;
                border: 2px solid #B2C2E4;
                padding: 6px 16px;
                &::placeholder {
                    color: #B2C2E4;
                    font-family: Montserrat Alternates;
                    font-size: 16px;
                    font-style: normal;
                    font-weight: 500;
                    line-height: 18px;
                }
            }

            &-warning {
                color: #F35B60;
                font-family: Montserrat Alternates;
                font-size: 12px;
                font-style: normal;
                font-weight: 500;
                line-height: normal;
            }
        }

        &-btn {
            padding: 10px 16px;

            color: #FFF;
            font-family: Montserrat Alternates;
            font-size: 16px;
            font-style: normal;
            font-weight: 600;
            line-height: normal;
            border-radius: 9px;
            background: #FFB800;
        }
    }

    &-footer {

        display: flex;
        flex-flow: column nowrap;
        justify-content: flex-start;
        align-items: flex-start;
        gap: 10px;
        padding-top: 20px;

        font-family: 'Onest';
        font-style: normal;
        font-weight: 400;
        font-size: 12px;
        line-height: 15px;
        color: #7C8EB5;

        &-btn {

            font-family: 'Montserrat Alternates';
            font-style: normal;
            font-weight: 700;
            font-size: 24px;
            line-height: 29px;
            letter-spacing: 0.02em;
            color: #FFFFFF;

            display: flex;
            flex-direction: row;
            justify-content: center;
            align-items: center;
            padding: 16px 32px;
            gap: 8px;

            width: 300px;
            height: 61px;

            background: #2477F4;
            opacity: 0.5;
            border-radius: 14px;
            border: none;

            &_canClicked {
                opacity: 1;
            }
        }
    }
}

.\src\pages\TestPage\index.tsx
------------------------------
import MainLayout from "../../layouts/MainLayout";
export default function TestPage() {
    return <MainLayout> </MainLayout>;
}


.\src\store\index.ts
--------------------
import { combineReducers, configureStore } from "@reduxjs/toolkit";
import { registerApi } from "./api/register";
import { accountApi } from "./api/account";

import testSlice from "./slices/testSlice";
import profileSlice from "./slices/profileSlice";
import diarySlice from "./slices/diary";
import entryReducer from "./slices/entry";
import userReducer from "./slices/user";
import registerReducer from "./slices/register";
import surveyReducer from "./slices/survey";
import { userApi } from "./api/user";

import { reportApi } from "./api/report";
import { reportTestApi } from "./api/reportTest";

import { surveyApi } from "./api/survey";
import { videoApi } from "./api/userVideo";
import { diaryApi } from "./api/diary";
import { apiWithDifAnswers } from "./api/apiWithDifAnswers";
import { chatApi } from "./api/chat";
import { notificationApi } from "./api/notification";
import { tariffApi } from "./api/tariff";

export const store = configureStore({
    reducer: {
        [registerApi.reducerPath]: registerApi.reducer,
        [accountApi.reducerPath]: accountApi.reducer,
        [userApi.reducerPath]: userApi.reducer,

        [reportApi.reducerPath]: reportApi.reducer,
        [apiWithDifAnswers.reducerPath]: apiWithDifAnswers.reducer,

        [surveyApi.reducerPath]: surveyApi.reducer,
        [videoApi.reducerPath]: videoApi.reducer,
        [diaryApi.reducerPath]: diaryApi.reducer,
        [chatApi.reducerPath]: chatApi.reducer,
        [notificationApi.reducerPath]: notificationApi.reducer,
        [reportTestApi.reducerPath]: reportTestApi.reducer,
        [tariffApi.reducerPath]: tariffApi.reducer,

        register: registerReducer,
        test: testSlice,
        profile: profileSlice,
        entry: entryReducer,
        user: userReducer,
        survey: surveyReducer,
        diary: diarySlice,
    },
    middleware: (getDefaultMiddleware) =>
        getDefaultMiddleware().concat(
            registerApi.middleware,
            accountApi.middleware,
            userApi.middleware,
            apiWithDifAnswers.middleware,
            reportApi.middleware,
            diaryApi.middleware,
            surveyApi.middleware,
            videoApi.middleware,
            chatApi.middleware,
            notificationApi.middleware,
            reportTestApi.middleware,
            tariffApi.middleware,
        ),
    devTools: process.env.NODE_ENV !== "production",
});


export type RootState = ReturnType<typeof store.getState>;

export type AppDispatch = typeof store.dispatch;


.\src\store\api\account\index.ts
--------------------------------
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/dist/query/react";

import { IResponse } from "../../../models/api";

import { ILoginRequest, ILoginResponse } from "../../../models/entry/login";
import { setAccessToken } from "../../slices/user";
import { IUser } from "../../../models/entry/user";

import { userApi } from "../user";

export const accountApi = createApi({
    reducerPath: "api/login",
    baseQuery: fetchBaseQuery({
        baseUrl: "api/users/account",
    }),
    endpoints: (build) => ({
        login: build.query<IResponse<ILoginResponse>, ILoginRequest>({
            query: (loginRequest) => ({
                url: "login",
                method: "POST",
                params: { email: loginRequest.email },
                body: { password: loginRequest.password },
            }),
            async onQueryStarted(args, { dispatch, queryFulfilled }) {
                try {
                    const { data } = await queryFulfilled;
                    if (data.success) {
                        await dispatch(setAccessToken(data.data!.access_token));
                        await dispatch(userApi.endpoints.getMe.initiate(null));
                    }
                } catch (error) {}
            },
        }),
        logout: build.mutation<null, any>({
            query: () => ({
                url: "/logout",
                method: "POST",
                credentials: "include",
            }),
        }),
        passwordRestore: build.query<IResponse<void>, string>({
            query: (email) => ({
                url: "password/restore",
                method: "POST",
                params: { email },
            }),
        }),
        getMe: build.query<IUser, null>({
            query: () => ({
                url: "me",
                method: "GET",
                credentials: "include",
            }),
            transformResponse: (result: IResponse<IUser>) => result.data!,
        }),
    }),
});

export const {
    useLazyLoginQuery,
    useLazyPasswordRestoreQuery,
    useGetMeQuery,
    useLogoutMutation,
} = accountApi;

export const { endpoints, reducerPath, reducer, middleware } = accountApi;


.\src\store\api\apiWithDifAnswers\index.ts
------------------------------------------
import { BaseQueryFn, FetchArgs, FetchBaseQueryError, createApi, fetchBaseQuery } from "@reduxjs/toolkit/dist/query/react";
import { RootState } from "../..";
import { Mutex } from "async-mutex";
import { logout, setAccessToken } from "../../slices/user";
import { IResponse } from "../../../models/api";
import { ILoginResponse } from "../../../models/entry/login";

const mutex = new Mutex();

const baseQ = fetchBaseQuery({
    prepareHeaders: (headers, { getState }) => {
        const token = (getState() as RootState).user.accessToken;
        if (token) {
            headers.set("Authorization", `Bearer ${token}`);
        }
    },
});

const myFetchBase: BaseQueryFn<
    string | FetchArgs,
    unknown,
    FetchBaseQueryError
> = async (args, api, extraOptions) => {
    await mutex.waitForUnlock();
    let result = await baseQ(args, api, extraOptions);

    // condition for token refreshing
    if ((result.error?.data as any)?.message === 'You are not logged in'){
        if (!mutex.isLocked()) {
            const release = await mutex.acquire();

            try {
                const refreshResult = await baseQ(
                    {
                        credentials: "include",
                        url: "/api/users/account/refresh",
                        method: "POST",
                    },
                    api,
                    extraOptions
                );
                const refreshResultData =
                    refreshResult.data as IResponse<ILoginResponse>;
                if (refreshResultData.success) {
                    api.dispatch(
                        setAccessToken(refreshResultData.data!.access_token)
                    );
                    result = await baseQ(args, api, extraOptions);
                } else {
                    api.dispatch(logout());
                    window.location.href = "/"; /// to login page
                }
            } catch (e) {
                api.dispatch(logout());
                window.location.href = "/"; /// to login page
            } finally {
                release();
            }
        } else {
            await mutex.waitForUnlock();
            result = await baseQ(args, api, extraOptions);
        }
    }
    return result;
};


export const apiWithDifAnswers = createApi({
    reducerPath: "api/apiWithDifAnswers",
    baseQuery: myFetchBase,
    endpoints: (build) => ({
        getVideoById: build.query<string, string>({
            query: (id) => ({
                url: `/api/video/test/${id}`,
                method: "GET",
                responseHandler: async (response) => {
                    let temp = response.blob();
                    const res = await temp;
                    return URL.createObjectURL(res);
                },
            }),
        }),
        getImageById: build.query<string, string>({
            query: (id) => ({
                url: `/api/users/account/avatar/${id}`,
                method: "GET",
                responseHandler: async (response) => {
                    let temp = response.blob();
                    const res = await temp;
                    return URL.createObjectURL(res);
                },
            }),
            keepUnusedDataFor: 1,
        }),
    }),
});

export const {
    useGetVideoByIdQuery,
    useGetImageByIdQuery,
    useLazyGetImageByIdQuery
} = apiWithDifAnswers;

export const { endpoints, reducerPath, reducer, middleware } = apiWithDifAnswers;


.\src\store\api\chat\index.ts
-----------------------------
import { createApi } from "@reduxjs/toolkit/dist/query/react";

import { IResponse } from "../../../models/api";
import customFetchBase from "../utils/customFetchBase";
import { IMessageItem } from "../../../models/chat";

export const chatApi = createApi({
    reducerPath: "/api/chat",
    baseQuery: customFetchBase,
    endpoints: (build) => ({
        getMessages: build.query<IResponse<Array<IMessageItem>>, null>({
            query: () => ({
                url: "/api/support/messages",
                method: "GET",
            }),
        }),
        sendMessage: build.mutation<IResponse<any>, string>({
            query: (message) => ({
                url: "/api/support/send-message",
                method: "POST",
                params: {message},
            }),
        }),
        getSSEConnection: build.query<any, void>({
            query: () => ({
                url: "/api/support/sse-connection",
                method: "GET",
            }),
        }),
    }),
});

export const {
    useGetMessagesQuery,
    useLazyGetMessagesQuery,
    useGetSSEConnectionQuery,
    useSendMessageMutation
} = chatApi;

export const { endpoints, reducerPath, reducer, middleware } = chatApi;


.\src\store\api\diary\index.ts
------------------------------
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/dist/query/react";
import { IResponse } from "../../../models/api";
import { IAimFromBack, IAimParameters, ISendUserPurpose } from "../../../models/aim";
import customFetchBase from "../utils/customFetchBase";
import { IAchievement, IStatisticJSON, TYPE_DIARY } from "../../../models/diary";

export const diaryApi = createApi({
    reducerPath: "api/diary",
    baseQuery: customFetchBase,
    endpoints: (build) => ({
        getParams: build.query<IResponse<IAimParameters>, null>({
            query: () => ({
                url: "/api/video/purposes/parameters",
                method: "GET",
            }),
        }),
        getUserPurposes: build.query<IResponse<IAimFromBack>, void>({
            query: () => ({
                url: "/api/video/purposes/",
                method: "GET",
            }),
        }),
        sendUserPurpose: build.mutation<IResponse<void>, ISendUserPurpose>({
            query: ({title, params}) => ({
                url: "/api/video/purposes/purpose",
                params: {title},
                method: "POST",
                body:params,
            }),
        }),
        deleteUserPurpose: build.mutation<IResponse<void>, string>({
            query: (id) => ({
                url: "/api/video/purposes/purpose",
                params: {id},
                method: "DELETE",
            }),
        }),
        getStatisticData: build.query<IResponse<IStatisticJSON>, TYPE_DIARY>({
            query: (type:TYPE_DIARY) => ({
                url: `/api/video/diary/${type}`,
                method: "GET",
            }),
        }),
        getAchievements: build.query<IResponse<IAchievement>, void>({
            query: () => ({
                url: `/api/video/user/achievements`,
                method: "GET",
            }),
        })
    }),
});

export const {
    useGetParamsQuery,
    useLazyGetParamsQuery,
    useGetUserPurposesQuery,
    useLazyGetUserPurposesQuery,
    useSendUserPurposeMutation,
    useGetStatisticDataQuery,
    useLazyGetStatisticDataQuery,
    useGetAchievementsQuery,
    useLazyGetAchievementsQuery,
    useDeleteUserPurposeMutation
} = diaryApi;

export const { endpoints, reducerPath, reducer, middleware } = diaryApi;


.\src\store\api\notification\index.ts
-------------------------------------
import { createApi } from "@reduxjs/toolkit/dist/query/react";

import { IResponse } from "../../../models/api";
import customFetchBase from "../utils/customFetchBase";

export const notificationApi = createApi({
    reducerPath: "/api/notification",
    baseQuery: customFetchBase,
    endpoints: (build) => ({
        getNotifications: build.query<IResponse<any>, void>({
            query: () => ({
                url: "/api/support/notifications",
                method: "GET",
            }),
        }),
        readNotifications: build.mutation<IResponse<any>, string[]>({
            query: (idNotifications) => ({
                url: "/api/support/read-notifications",
                method: "POST",
                body: idNotifications,
            }),
        }),
    }),
});

export const {
    useGetNotificationsQuery,
    useLazyGetNotificationsQuery,
    useReadNotificationsMutation,
} = notificationApi;

export const { endpoints, reducerPath, reducer, middleware } = notificationApi;


.\src\store\api\register\index.ts
---------------------------------
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/dist/query/react";

import { IResponse } from "../../../models/api";
import { IRegister, IRegisterResponse } from "../../../models/entry/register";

export const registerApi = createApi({
    reducerPath: "api/register",
    baseQuery: fetchBaseQuery({ baseUrl: "api/users/register" }),
    endpoints: (build) => ({
        register: build.mutation<IResponse<IRegisterResponse>, IRegister>({
            query: (body) => ({
                url: "",
                method: "POST",
                body,
            }),
        }),
        checkEmail: build.query<IResponse<void>, string>({
            query: (email) => ({
                url: "validation",
                method: "POST",
                body: { email },
            }),
        }),
        confirm: build.query<IResponse<void>, string>({
            query: (token) => ({
                url: `confirm/${token}`,
                method: "GET",
            }),
        }),
        resendEmail: build.mutation<IResponse<void>, string>({
            query: (email) => ({
                url: "resend-email",
                params: { email },
                method: "POST",
            }),
        }),
    }),
});

export const {
    useRegisterMutation,
    useLazyCheckEmailQuery,
    useConfirmQuery,
    useResendEmailMutation,
} = registerApi;
export const { endpoints, reducerPath, reducer, middleware } = registerApi;


.\src\store\api\report\index.ts
-------------------------------
import { createApi } from "@reduxjs/toolkit/dist/query/react";
import customFetchBase from "../utils/customFetchBase";

import { IResponse } from "../../../models/api";
import { TYPE_REPORT } from "../../../models/report/_types";

import { ConnectivityJSON } from "../../../models/graph/connectivity";
import { ConfidenceJSON } from "../../../models/graph/confidence";
import { ClarityJSON } from "../../../models/graph/clarity";
import { ArgumentativenessJSON } from "../../../models/graph/argumentativeness";
import { CommunicativeJSON } from "../../../models/graph/communicative";
import { EmotionalityJSON } from "../../../models/graph/emotionality";
import { UnityOfStyleJSON } from "../../../models/graph/unity_of_style";
import { NonMonotonyJSON } from "../../../models/graph/monotony";
import { InformativeJSON } from "../../../models/graph/informative";
import { EnergyJSON } from "../../../models/graph/energy";
import { EloquenceJSON } from "../../../models/graph/eloquence";
import { EmotionalArousalJSON } from "../../../models/graph/emotional_arousal";
import { TotalGraphJSON } from "../../../models/graph/total";
import { ExpressivenessJSON } from "../../../models/graph/expressiveness";
import { CongruenceJSON } from "../../../models/graph/congruence";
import { TranscriptionJSON } from "../../../models/report/transcription";

export const reportApi = createApi({
    reducerPath: "/api/video/",
    baseQuery: customFetchBase,
    endpoints: (build) => ({
        getArgumentativenessById: build.query<
            IResponse<ArgumentativenessJSON>,
            string
        >({
            query: (id) => ({
                url: `/api/video/${id}/report/${TYPE_REPORT.argumentativeness}`,
                params: { id },
                method: "GET",
            }),
        }),
        getClarityById: build.query<IResponse<ClarityJSON>, string>({
            query: (id) => ({
                url: `/api/video/${id}/report/${TYPE_REPORT.clarity}`,
                params: { id },
                method: "GET",
            }),
        }),
        getCommunicativeById: build.query<IResponse<CommunicativeJSON>, string>(
            {
                query: (id) => ({
                    url: `/api/video/${id}/report/${TYPE_REPORT.communicative}`,
                    params: { id },
                    method: "GET",
                }),
            }
        ),
        getConfidenceById: build.query<IResponse<ConfidenceJSON>, string>({
            query: (id) => ({
                url: `/api/video/${id}/report/${TYPE_REPORT.confidence}`,
                params: { id },
                method: "GET",
            }),
        }),
        getCongruenceById: build.query<IResponse<CongruenceJSON>, string>({
            query: (id) => ({
                url: `/api/video/${id}/report/${TYPE_REPORT.congruence}`,
                params: { id },
                method: "GET",
            }),
        }),
        getConnectivityById: build.query<IResponse<ConnectivityJSON>, string>({
            query: (id) => ({
                url: `/api/video/${id}/report/${TYPE_REPORT.connectivity}`,
                params: { id },
                method: "GET",
            }),
        }),
        getEloquenceById: build.query<IResponse<EloquenceJSON>, string>({
            query: (id) => ({
                url: `/api/video/${id}/report/${TYPE_REPORT.eloquence}`,
                params: { id },
                method: "GET",
            }),
        }),
        getEmotionalArousalById: build.query<
            IResponse<EmotionalArousalJSON>,
            string
        >({
            query: (id) => ({
                url: `/api/video/${id}/report/${TYPE_REPORT.emotional_arousal}`,
                params: { id },
                method: "GET",
            }),
        }),
        getEmotionalityById: build.query<IResponse<EmotionalityJSON>, string>({
            query: (id) => ({
                url: `/api/video/${id}/report/${TYPE_REPORT.emotionality}`,
                params: { id },
                method: "GET",
            }),
        }),
        getEnergyById: build.query<IResponse<EnergyJSON>, string>({
            query: (id) => ({
                url: `/api/video/${id}/report/${TYPE_REPORT.energy}`,
                params: { id },
                method: "GET",
            }),
        }),
        getExpressivenessById: build.query<
            IResponse<ExpressivenessJSON>,
            string
        >({
            query: (id) => ({
                url: `/api/video/${id}/report/${TYPE_REPORT.expressiveness}`,
                params: { id },
                method: "GET",
            }),
        }),
        getInformativeById: build.query<IResponse<InformativeJSON>, string>({
            query: (id) => ({
                url: `/api/video/${id}/report/${TYPE_REPORT.informative}`,
                params: { id },
                method: "GET",
            }),
        }),
        getNonMonotonyById: build.query<IResponse<NonMonotonyJSON>, string>({
            query: (id) => ({
                url: `/api/video/${id}/report/${TYPE_REPORT.non_monotony}`,
                params: { id },
                method: "GET",
            }),
        }),
        getTotalById: build.query<IResponse<TotalGraphJSON>, string>({
            query: (id) => ({
                url: `/api/video/${id}/report/${TYPE_REPORT.total}`,
                params: { id },
                method: "GET",
            }),
        }),
        getTranscriptionById: build.query<IResponse<TranscriptionJSON>, string>(
            {
                query: (id) => ({
                    url: `/api/video/${id}/report/${TYPE_REPORT.text}`,
                    params: { id },
                    method: "GET",
                }),
            }
        ),
        getUnityOfStyleById: build.query<IResponse<UnityOfStyleJSON>, string>({
            query: (id) => ({
                url: `/api/video/${id}/report/${TYPE_REPORT.unity_of_style}`,
                params: { id },
                method: "GET",
            }),
        }),
    }),
});

export const {
    useGetConnectivityByIdQuery,
    useGetConfidenceByIdQuery,
    useGetArgumentativenessByIdQuery,
    useGetClarityByIdQuery,
    useGetCommunicativeByIdQuery,
    useGetEmotionalityByIdQuery,
    useGetUnityOfStyleByIdQuery,
    useGetNonMonotonyByIdQuery,
    useGetInformativeByIdQuery,
    useGetEnergyByIdQuery,
    useGetEloquenceByIdQuery,
    useGetEmotionalArousalByIdQuery,
    useGetTotalByIdQuery,
    useGetTranscriptionByIdQuery,
    useGetCongruenceByIdQuery,
    useGetExpressivenessByIdQuery,
    useLazyGetConnectivityByIdQuery,
    useLazyGetConfidenceByIdQuery,
    useLazyGetArgumentativenessByIdQuery,
    useLazyGetClarityByIdQuery,
    useLazyGetCommunicativeByIdQuery,
    useLazyGetEmotionalityByIdQuery,
    useLazyGetUnityOfStyleByIdQuery,
    useLazyGetInformativeByIdQuery,
    useLazyGetEnergyByIdQuery,
    useLazyGetEloquenceByIdQuery,
    useLazyGetNonMonotonyByIdQuery,
    useLazyGetEmotionalArousalByIdQuery,
    useLazyGetTotalByIdQuery,
} = reportApi;

export const { endpoints, reducerPath, reducer, middleware } = reportApi;


.\src\store\api\reportTest\index.ts
-----------------------------------
import { createApi } from "@reduxjs/toolkit/dist/query/react";
import customFetchBase from "../utils/customFetchBase";

import { IResponse } from "../../../models/api";
import { TYPE_REPORT } from "../../../models/report/_types";

import { ConnectivityJSON } from "../../../models/graph/connectivity";
import { ConfidenceJSON } from "../../../models/graph/confidence";
import { ClarityJSON } from "../../../models/graph/clarity";
import { ArgumentativenessJSON } from "../../../models/graph/argumentativeness";
import { CommunicativeJSON } from "../../../models/graph/communicative";
import { EmotionalityJSON } from "../../../models/graph/emotionality";
import { UnityOfStyleJSON } from "../../../models/graph/unity_of_style";
import { NonMonotonyJSON } from "../../../models/graph/monotony";
import { InformativeJSON } from "../../../models/graph/informative";
import { EnergyJSON } from "../../../models/graph/energy";
import { EloquenceJSON } from "../../../models/graph/eloquence";
import { EmotionalArousalJSON } from "../../../models/graph/emotional_arousal";
import { TotalGraphJSON } from "../../../models/graph/total";
import { ExpressivenessJSON } from "../../../models/graph/expressiveness";
import { CongruenceJSON } from "../../../models/graph/congruence";
import { TranscriptionJSON } from "../../../models/report/transcription";

export const reportTestApi = createApi({
    reducerPath: "/api/reportTest/",
    baseQuery: customFetchBase,
    endpoints: (build) => ({
        getArgumentativenessByIdTest: build.query<
            IResponse<ArgumentativenessJSON>,
            string
        >({
            query: (id) => ({
                url: `/api/video/${id}/test-report/${TYPE_REPORT.argumentativeness}`,
                params: { id },
                method: "GET",
            }),
        }),
        getClarityByIdTest: build.query<IResponse<ClarityJSON>, string>({
            query: (id) => ({
                url: `/api/video/${id}/test-report/${TYPE_REPORT.clarity}`,
                params: { id },
                method: "GET",
            }),
        }),
        getCommunicativeByIdTest: build.query<
            IResponse<CommunicativeJSON>,
            string
        >({
            query: (id) => ({
                url: `/api/video/${id}/test-report/${TYPE_REPORT.communicative}`,
                params: { id },
                method: "GET",
            }),
        }),
        getConfidenceByIdTest: build.query<IResponse<ConfidenceJSON>, string>({
            query: (id) => ({
                url: `/api/video/${id}/test-report/${TYPE_REPORT.confidence}`,
                params: { id },
                method: "GET",
            }),
        }),
        getCongruenceByIdTest: build.query<IResponse<CongruenceJSON>, string>({
            query: (id) => ({
                url: `/api/video/${id}/test-report/${TYPE_REPORT.congruence}`,
                params: { id },
                method: "GET",
            }),
        }),
        getConnectivityByIdTest: build.query<
            IResponse<ConnectivityJSON>,
            string
        >({
            query: (id) => ({
                url: `/api/video/${id}/test-report/${TYPE_REPORT.connectivity}`,
                params: { id },
                method: "GET",
            }),
        }),
        getEloquenceByIdTest: build.query<IResponse<EloquenceJSON>, string>({
            query: (id) => ({
                url: `/api/video/${id}/test-report/${TYPE_REPORT.eloquence}`,
                params: { id },
                method: "GET",
            }),
        }),
        getEmotionalArousalByIdTest: build.query<
            IResponse<EmotionalArousalJSON>,
            string
        >({
            query: (id) => ({
                url: `/api/video/${id}/test-report/${TYPE_REPORT.emotional_arousal}`,
                params: { id },
                method: "GET",
            }),
        }),
        getEmotionalityByIdTest: build.query<
            IResponse<EmotionalityJSON>,
            string
        >({
            query: (id) => ({
                url: `/api/video/${id}/test-report/${TYPE_REPORT.emotionality}`,
                params: { id },
                method: "GET",
            }),
        }),
        getEnergyByIdTest: build.query<IResponse<EnergyJSON>, string>({
            query: (id) => ({
                url: `/api/video/${id}/test-report/${TYPE_REPORT.energy}`,
                params: { id },
                method: "GET",
            }),
        }),
        getExpressivenessByIdTest: build.query<
            IResponse<ExpressivenessJSON>,
            string
        >({
            query: (id) => ({
                url: `/api/video/${id}/test-report/${TYPE_REPORT.expressiveness}`,
                params: { id },
                method: "GET",
            }),
        }),
        getInformativeByIdTest: build.query<IResponse<InformativeJSON>, string>(
            {
                query: (id) => ({
                    url: `/api/video/${id}/test-report/${TYPE_REPORT.informative}`,
                    params: { id },
                    method: "GET",
                }),
            }
        ),
        getNonMonotonyByIdTest: build.query<IResponse<NonMonotonyJSON>, string>(
            {
                query: (id) => ({
                    url: `/api/video/${id}/test-report/${TYPE_REPORT.non_monotony}`,
                    params: { id },
                    method: "GET",
                }),
            }
        ),
        getTotalByIdTest: build.query<IResponse<TotalGraphJSON>, string>({
            query: (id) => ({
                url: `/api/video/${id}/test-report/${TYPE_REPORT.total}`,
                params: { id },
                method: "GET",
            }),
        }),
        // getTotalByIdTest: build.query<IResponse<TotalGraphJSON>, string>({
        //     query: (id, type = TYPE_REPORT.total) => ({
        //         url: `/api/video/${id}/test-report/${TYPE_REPORT.total}`,
        //         params: { id, type },
        //         method: "GET",
        //     }),
        // }),
        getTranscriptionByIdTest: build.query<
            IResponse<TranscriptionJSON>,
            string
        >({
            query: (id) => ({
                url: `/api/video/${id}/test-report/${TYPE_REPORT.text}`,
                params: { id },
                method: "GET",
            }),
        }),
        getUnityOfStyleByIdTest: build.query<
            IResponse<UnityOfStyleJSON>,
            string
        >({
            query: (id) => ({
                url: `/api/video/${id}/test-report/${TYPE_REPORT.unity_of_style}`,
                params: { id },
                method: "GET",
            }),
        }),
    }),
});

export const {
    useGetConnectivityByIdTestQuery,
    useGetConfidenceByIdTestQuery,
    useGetArgumentativenessByIdTestQuery,
    useGetClarityByIdTestQuery,
    useGetCommunicativeByIdTestQuery,
    useGetEmotionalityByIdTestQuery,
    useGetUnityOfStyleByIdTestQuery,
    useGetNonMonotonyByIdTestQuery,
    useGetInformativeByIdTestQuery,
    useGetEnergyByIdTestQuery,
    useGetEloquenceByIdTestQuery,
    useGetEmotionalArousalByIdTestQuery,
    useGetTotalByIdTestQuery,
    useGetTranscriptionByIdTestQuery,
    useGetCongruenceByIdTestQuery,
    useGetExpressivenessByIdTestQuery,
    // useLazyGetConnectivityByIdTestQuery,
    // useLazyGetConfidenceByIdTestQuery,
    // useLazyGetArgumentativenessByIdTestQuery,
    // useLazyGetClarityByIdTestQuery,
    // useLazyGetCommunicativeByIdTestQuery,
    // useLazyGetEmotionalityByIdTestQuery,
    // useLazyGetUnityOfStyleByIdTestQuery,
    // useLazyGetInformativeByIdTestQuery,
    // useLazyGetEnergyByIdTestQuery,
    // useLazyGetEloquenceByIdTestQuery,
    // useLazyGetNonMonotonyByIdTestQuery,
    // useLazyGetEmotionalArousalByIdTestQuery,
    // useLazyGetTotalByIdTestQuery,
} = reportTestApi;

export const { endpoints, reducerPath, reducer, middleware } = reportTestApi;


.\src\store\api\survey\index.tsx
--------------------------------
import { createApi } from "@reduxjs/toolkit/dist/query/react";

import { IResponse } from "../../../models/api";
import { IAnswer, IAnswerBack, ISurvey } from "../../../models/survey";
import customFetchBase from "../utils/customFetchBase";

export const surveyApi = createApi({
    reducerPath: "/api/survey",
    baseQuery: customFetchBase,
    endpoints: (build) => ({
        getSurvey: build.query<IResponse<ISurvey>, string>({
            query: (title) => ({
                url: "/api/users/questionnaire",
                method: "GET",
                params: {title},
            }),
        }),
        sendAnswers: build.mutation<IResponse<void>, IAnswerBack>({
            query: ({answers, questionnaire_title}) => ({
                url: "/api/users/register/complete",
                method: "POST",
                params: {questionnaire_title},
                body: answers,
            }),
        }),
    }),
});

export const {
    useGetSurveyQuery,
    useSendAnswersMutation,
} = surveyApi;

export const { endpoints, reducerPath, reducer, middleware } = surveyApi;


.\src\store\api\tariff\index.ts
-------------------------------
import { createApi } from "@reduxjs/toolkit/dist/query/react";

import { IResponse } from "../../../models/api";
import { ISetTariff, ITariff } from "../../../models/tariff";
import customFetchBase from "../utils/customFetchBase";

export const tariffApi = createApi({
    reducerPath: "/api/tariff",
    baseQuery: customFetchBase,
    endpoints: (build) => ({
        getTraiffs: build.query<IResponse<ITariff[]>, void>({
            query: () => ({
                url: "/api/users/tarifs",
                method: "GET",
            }),
        }),
        getUserTraiff: build.query<IResponse<ITariff>, void>({
            query: () => ({
                url: "/api/users/tarifs/info",
                method: "GET"
            }),
        }),
        sendTariff: build.mutation<IResponse<void>, ISetTariff>({
            query: ({tarif_id, user_id}) => ({
                url: "/api/users/tarifs/set",
                method: "POST",
                params: {tarif_id, user_id}
            }),
        }),
    }),
});

export const {
    useGetTraiffsQuery,
    useGetUserTraiffQuery,
    useSendTariffMutation
} = tariffApi;

export const { endpoints, reducerPath, reducer, middleware } = tariffApi;


.\src\store\api\user\index.ts
-----------------------------
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/dist/query/react";

import { IResponse } from "../../../models/api";

import { IUser } from "../../../models/entry/user";
import customFetchBase from "../utils/customFetchBase";
import { logout, setUser } from "../../slices/user";
import { setProfile } from "../../slices/profileSlice";

export const userApi = createApi({
    reducerPath: "api/user",
    baseQuery: customFetchBase,
    endpoints: (build) => ({
        getMe: build.query<IResponse<IUser>, null>({
            query: () => ({
                url: "/api/users/account/me",
                method: "GET",
                credentials: "include",
            }),
            async onQueryStarted(args, { dispatch, queryFulfilled }) {
                try {
                    const { data } = await queryFulfilled;
                    if (data.success) {
                        await dispatch(setUser(data.data!));
                        await dispatch(setProfile(data.data!));
                    }
                } catch (error) {
                    await dispatch(logout());
                }
            },
        }),
        getUserAvatar: build.query<IResponse<void>, void>({
            query: () => {
                return {
                    url: `/api/users/account/avatar`,
                    method: "GET",
                };
            },
        }),
        sendUserAvatar: build.mutation<IResponse<void>, Blob>({
            query: (file) => {
                let bodyFormData = new FormData();
                bodyFormData.append("avatar", file);
                return {
                    url:  `/api/users/account/avatar`,
                    // headers: { 'Content-Type': 'multipart/form-data' },
                    method: "POST",
                    body: bodyFormData,
                    formData: true,
                };
            },
            // transformResponse:(response:File )=>{
            //     console.log(response)
            //     return {
            //         data: {img:response},
            //         error: {code: 500, msg:""},
            //         success: true,
            //     } as IResponse<any>
            // },
        }),
    }),
});

export const { useGetMeQuery, useLazyGetMeQuery, useSendUserAvatarMutation, useGetUserAvatarQuery, useLazyGetUserAvatarQuery } = userApi;
export const { endpoints, reducerPath, reducer, middleware } = userApi;


.\src\store\api\userVideo\index.tsx
-----------------------------------
import { createApi } from "@reduxjs/toolkit/dist/query/react";

import { IResponse } from "../../../models/api";
import {
    IParamsForQueryUserVideo,
    IVideoApiReq,
    IVideoInfo,
    IVideoStatus,
    IVideoUploadItem,
    IVideoUser,
    IVideoUserStatus,
} from "../../../models/video";
import customFetchBase from "../utils/customFetchBase";

export const videoApi = createApi({
    reducerPath: "api/video",
    baseQuery: customFetchBase,
    endpoints: (build) => ({
        sendVideo: build.mutation<IResponse<void>, IVideoApiReq>({
            query: ({ title, duration, description, file }) => {
                var bodyFormData = new FormData();
                bodyFormData.append("file", file);
               
                return {
                    url: "/api/video/upload",
                    method: "POST",
                    params: { title, duration, description },
                    body: bodyFormData,
                    formData: true,
                };
            },
        }),
        getMainVideo: build.query<
            IResponse<IVideoUser>,
            IParamsForQueryUserVideo
        >({
            query: ({ page = 0, limit = 6, tutorial = false }) => {
                return {
                    url: "/api/video/main-page",
                    params: { page, limit, tutorial },
                    method: "GET",
                };
            },
        }),
        getVideoById: build.query<IResponse<void>, string>({
            query: (videoId) => {
                return {
                    url: `/api/video/${videoId}`,
                    method: "GET",
                };
            },
        }),
        // заменить интерфейсы
        getVideoStatusByUser: build.query<
            // IResponse<IVideoStatus>,
            IResponse<IVideoUserStatus>,
            IParamsForQueryUserVideo
        >({
            query: ({ page = 0, limit = 6 }) => {
                return {
                    url: `/api/video/status`,
                    params: { page, limit },
                    method: "GET",
                };
            },
        }),
        getVideoByUser: build.query<
            IResponse<IVideoUser>,
            IParamsForQueryUserVideo
        >({
            query: ({ page = 0, limit = 6 }) => {
                return {
                    url: `/api/video/user`,
                    params: { page, limit },
                    method: "GET",
                };
            },
        }),

        getVideoByUserSearch: build.query<
            IResponse<IVideoUser>,
            IParamsForQueryUserVideo
        >({
            query: ({ page = 0, limit = 6, search = "" }) => {
                return {
                    url: `/api/video/user`,
                    params: { page, limit, search },
                    method: "GET",
                };
            },
        }),
        getVideoInfoById: build.query<IResponse<IVideoInfo>, string>({
            query: (id) => {
                return {
                    url: `/api/video/`,
                    params: { id },
                    method: "GET",
                };
            },
        }),

        updateVideoInfoById: build.mutation<IResponse<void>, IVideoUploadItem>({
            query: ({ id, title, description }) => {
                return {
                    url: `/api/video/`,
                    body: { id, title, description },
                    method: "PUT",
                };
            },
        }),
        deleteVideoById: build.mutation<IResponse<void>, string>({
            query: (id) => {
                return {
                    url: `/api/video/`,
                    params: { id },
                    method: "DELETE",
                };
            },
        }),
        getTestVideoById: build.query<any, string>({
            query: (id) => ({
                url: `/api/video/test/${id}`,
                method: "GET",
            }),
            transformResponse: async (response: any) => {
                console.log("response", response);
                return {
                    data: await response.blob(),
                    error: { code: response.status, msg: response.statusText },
                    success: response.ok,
                };
            },
        }),
    }),
});

export const {
    useSendVideoMutation,
    useGetMainVideoQuery,
    useLazyGetMainVideoQuery,
    useGetVideoByIdQuery,
    useLazyGetVideoByIdQuery,
    useGetVideoStatusByUserQuery,
    useLazyGetVideoStatusByUserQuery,
    useGetVideoByUserQuery,
    useGetVideoByUserSearchQuery,
    useLazyGetVideoByUserQuery,
    useLazyGetVideoByUserSearchQuery,
    useGetVideoInfoByIdQuery,
    useUpdateVideoInfoByIdMutation,
    useDeleteVideoByIdMutation,
    useGetTestVideoByIdQuery,
} = videoApi;

export const { endpoints, reducerPath, reducer, middleware } = videoApi;


.\src\store\api\utils\customFetchBase.ts
----------------------------------------
import {
    BaseQueryFn,
    FetchArgs,
    fetchBaseQuery,
    FetchBaseQueryError,
} from "@reduxjs/toolkit/query";
import { Mutex } from "async-mutex";

import { IResponse } from "../../../models/api";
import { ILoginResponse } from "../../../models/entry/login";
import { logout, setAccessToken } from "../../slices/user";
import { RootState } from "../..";

const mutex = new Mutex();

const baseQuery = fetchBaseQuery({
    prepareHeaders: (headers, { getState }) => {
        const token = (getState() as RootState).user.accessToken;
        if (token) {
            headers.set("Authorization", `Bearer ${token}`);
        }
    },
});

const customFetchBase: BaseQueryFn<
    string | FetchArgs,
    unknown,
    FetchBaseQueryError
> = async (args, api, extraOptions) => {
    await mutex.waitForUnlock();
    let result = await baseQuery(args, api, extraOptions);
    // console.log("customFetchBase result",result)
    const data = result.data as IResponse<any>;

    // condition for token refreshing
    if (
        data &&
        !data.success &&
        (data.error?.code === 10009 || data.error?.code === 403)
        // || [4, 5].includes(+(result.meta!.response!.status / 100).toFixed(0)) // check if status code starts with 4 or 5
    ) {
        if (!mutex.isLocked()) {
            const release = await mutex.acquire();

            try {
                const refreshResult = await baseQuery(
                    {
                        credentials: "include",
                        url: "/api/users/account/refresh",
                        method: "POST",
                    },
                    api,
                    extraOptions
                );
                const refreshResultData =
                    refreshResult.data as IResponse<ILoginResponse>;
                if (refreshResultData.success) {
                    api.dispatch(
                        setAccessToken(refreshResultData.data!.access_token)
                    );
                    result = await baseQuery(args, api, extraOptions);
                } else {
                    api.dispatch(logout());
                    window.location.href = "/"; /// to login page
                }
            } catch (e) {
                api.dispatch(logout());
                window.location.href = "/"; /// to login page
            } finally {
                release();
            }
        } else {
            await mutex.waitForUnlock();
            result = await baseQuery(args, api, extraOptions);
        }
    }
    return result;
};

export default customFetchBase;


.\src\store\slices\profileSlice.ts
----------------------------------
import { PayloadAction, createSlice } from "@reduxjs/toolkit";
import { IUser } from "../../models/entry/user";


const initialStateForProfile:IUser = {
    id: "dudud-dudud-dudud-dudud-dudud",
    firstname: "Виктор",
    lastname: "Петрович",
    birthday: "09.09.2009",
    phone: "89998887766",
    city: "Москва",
    email: "example@mail.ru",
    registration_data: "2023-06-09",
    status: "no_active",
    tarif_active: false,
    loads_count: 0,
    loads_limit: 0,
    tarif_duration: 0,
    trial_used: false,
}

export const initialProfileState = {
    name: "Виктор",
    lastName: "Петрович",
};

const profileSlice = createSlice({
    name: "profile",
    initialState: {user: initialStateForProfile, avatar:`/api/users/account/avatar/${initialStateForProfile.id}`},
    reducers: {
        setProfile:(state, action: PayloadAction<IUser>)=>{
            
            state.user = action.payload;
            state.avatar = `/api/users/account/avatar/${action.payload.id}`;
        },
        setProfileAvatar:(state, action: PayloadAction<string>)=>{
            state.avatar = action.payload;
        }
    },
});

export default profileSlice.reducer;

export const { setProfile, setProfileAvatar } = profileSlice.actions;


.\src\store\slices\testSlice.ts
-------------------------------
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
    value1: 0,
    value2: "thisIsStringValue",
};

const testSlice = createSlice({
    name: "test",
    initialState,
    reducers: {
        addToValue1(state, action) {
            state.value1 += action.payload;
        },
        changeValue2(state, action) {
            state.value2 = action.payload;
        },
    },
});

export const { addToValue1, changeValue2 } = testSlice.actions;
export default testSlice.reducer;


.\src\store\slices\diary\index.ts
---------------------------------
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

import { IAimItem } from "../../../models/aim";



const initialState: IAimItem = {
    title: "",
    is_done: false,
    progress: 0,
    created_at: "",
    tasks: [],
    parameters: []
}
  

const diarySlice = createSlice({
    name: "diary",
    initialState:{userAims:[initialState]},
    reducers: {
        updateUserAims: (state, action: PayloadAction<IAimItem[]>) => {
            state.userAims = action.payload;
        },
        // decrement: (state) => {
        //     state.value -= 1
        // },
        //  // Use the PayloadAction type to declare the contents of `action.payload`
        // incrementByAmount: (state, action: PayloadAction<number>) => {
        //     state.value += action.payload
        // },
    },
});

export default diarySlice.reducer;

export const { updateUserAims } = diarySlice.actions;


.\src\store\slices\entry\index.ts
---------------------------------
import { createSlice } from "@reduxjs/toolkit";
import { PageType, RegisterStep, UserType } from "../../../models/entry";

const initialState = {
    userType: UserType.Personal,
    registerStep: RegisterStep.PrimaryInfo,
};

const entrySlice = createSlice({
    name: "entry",
    initialState,
    reducers: {
        setUserType(state, action) {
            state.userType = action.payload;
        },
        setStep(state, action) {
            state.registerStep = action.payload;
        },
    },
});

export default entrySlice.reducer;

export const { setUserType, setStep } = entrySlice.actions;


.\src\store\slices\register\index.ts
------------------------------------
import personalRegisterReducer from "./personal";
import businessRegisterReducer from "./business";
import { combineReducers } from "@reduxjs/toolkit";

const registerReducer = combineReducers({
    personal: personalRegisterReducer,
    business: businessRegisterReducer,
});

export default registerReducer

.\src\store\slices\register\business\index.ts
---------------------------------------------
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
    name: "",
    lastName: "",
    email: "",
    companyName: "",
    TIN: "",
    workPosition: "",
};

const businessRegisterSlice = createSlice({
    name: "register/business",
    initialState,
    reducers: {
        resetBusinessInfo: () => initialState,
        setName(state, action) {
            state.name = action.payload;
        },
        setLastName(state, action) {
            state.lastName = action.payload;
        },
        setEmail(state, action) {
            state.email = action.payload;
        },
        setCompanyName(state, action) {
            state.companyName = action.payload;
        },
        setTIN(state, action) {
            state.TIN = action.payload;
        },
        setWorkPosition(state, action) {
            state.workPosition = action.payload;
        },
    },
});

export const {
    setName,
    setLastName,
    setEmail,
    setCompanyName,
    setTIN,
    setWorkPosition,
    resetBusinessInfo,
} = businessRegisterSlice.actions;

export default businessRegisterSlice.reducer;


.\src\store\slices\register\personal\index.ts
---------------------------------------------
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

interface IRegisterPersonal {
    name: string;
    lastName: string;
    birthday: string;
    city: string;
    email: string;
    tel: string;
}

const initialState: IRegisterPersonal = {
    name: "",
    lastName: "",
    birthday: "",
    city: "",
    email: "",
    tel: "",
};

const personalRegisterSlice = createSlice({
    name: "register/personal",
    initialState,
    reducers: {
        clearPersonalRegister: () => initialState,
        setName(state, action: PayloadAction<string>) {
            state.name = action.payload;
        },
        setLastName(state, action: PayloadAction<string>) {
            state.lastName = action.payload;
        },
        setBirthday(state, action: PayloadAction<string>) {
            state.birthday = action.payload;
        },
        setCity(state, action: PayloadAction<string>) {
            state.city = action.payload;
        },
        setEmail(state, action: PayloadAction<string>) {
            state.email = action.payload;
        },
        setTel(state, action: PayloadAction<string>) {
            state.tel = action.payload;
        },
    },
});

export default personalRegisterSlice.reducer;

export const {
    clearPersonalRegister,
    setName,
    setLastName,
    setBirthday,
    setCity,
    setEmail,
    setTel,
} = personalRegisterSlice.actions;


.\src\store\slices\survey\index.tsx
-----------------------------------
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { typeQuestion } from "../../../models/survey";

  

export type LocalAnswer = {
    id_question: string;
    type_question: typeQuestion;
    id_choices: Array<string>;
    another_choices: string;
}


const initialState: LocalAnswer = {
    id_question: "",
    type_question: typeQuestion.radio,
    id_choices: [],
    another_choices: "",
}
  

const surveySlice = createSlice({
    name: "survey",
    initialState:{answers:[initialState], step:0},
    reducers: {
        updateChoiceAnswers: (state, action: PayloadAction<LocalAnswer[]>) => {
            state.answers = action.payload;
        },
        setStepAnswers: (state, action: PayloadAction<number>) => {
            state.step = action.payload;
        },
    },
});

export default surveySlice.reducer;

export const { updateChoiceAnswers, setStepAnswers  } = surveySlice.actions;


.\src\store\slices\user\index.ts
--------------------------------
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

import { IUser } from "../../../models/entry/user";

const TOKEN_STORAGE_ID = "AT";

interface IUserState {
    user: IUser | null;
    accessToken: string | null;
}

const initialState: IUserState = {
    user: null,
    accessToken: null,
};

const userSlice = createSlice({
    name: "user",
    initialState: {
        ...initialState,
        accessToken: localStorage.getItem(TOKEN_STORAGE_ID),
    },
    reducers: {
        logout: () => {
            localStorage.removeItem(TOKEN_STORAGE_ID);
            return initialState;
        },
        setUser: (state, action: PayloadAction<IUser>) => {
            state.user = action.payload;
        },
        setAccessToken: (state, action: PayloadAction<string>) => {
            state.accessToken = action.payload;
            localStorage.setItem(TOKEN_STORAGE_ID, action.payload);
        },
    },
});

export default userSlice.reducer;

export const { logout, setUser, setAccessToken } = userSlice.actions;


.\src\styles\index.scss
-----------------------
@import "./_reset.scss";

input,
button,
textarea,
select {
    font: inherit;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

html {
    font-family: "Onest", Helvetica, sans-serif !important;
    font-size: 16px;
}

html,
body {
    width: 100%;
    height: 100%;
    background-color: #f3f5f9;
}

#root {
    width: 100%;
    height: 100%;
}

.wrapper {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    margin: 0 auto;
    position: relative;
}

.\src\styles\_reset.scss
------------------------
/* http://meyerweb.com/eric/tools/css/reset/
   v2.0-modified | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}

/* make sure to set some focus styles for accessibility */
:focus {
    outline: 0;
}

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
	display: block;
}

body {
	line-height: 1;
}

ol, ul {
	list-style: none;
}

blockquote, q {
	quotes: none;
}

blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}

table {
	border-collapse: collapse;
	border-spacing: 0;
}

input[type=search]::-webkit-search-cancel-button,
input[type=search]::-webkit-search-decoration,
input[type=search]::-webkit-search-results-button,
input[type=search]::-webkit-search-results-decoration {
    -webkit-appearance: none;
    -moz-appearance: none;
}

input[type=search] {
    -webkit-appearance: none;
    -moz-appearance: none;
    -webkit-box-sizing: content-box;
    -moz-box-sizing: content-box;
    box-sizing: content-box;
}

textarea {
    overflow: auto;
    vertical-align: top;
    resize: vertical;
}

/**
 * Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.
 */

audio,
canvas,
video {
    display: inline-block;
    *display: inline;
    *zoom: 1;
    max-width: 100%;
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */

audio:not([controls]) {
    display: none;
    height: 0;
}

/**
 * Address styling not present in IE 7/8/9, Firefox 3, and Safari 4.
 * Known issue: no IE 6 support.
 */

[hidden] {
    display: none;
}

/**
 * 1. Correct text resizing oddly in IE 6/7 when body `font-size` is set using
 *    `em` units.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */

html {
    font-size: 100%; /* 1 */
    -webkit-text-size-adjust: 100%; /* 2 */
    -ms-text-size-adjust: 100%; /* 2 */
}

/**
 * Address `outline` inconsistency between Chrome and other browsers.
 */

a:focus {
    outline: thin dotted;
}

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */

a:active,
a:hover {
    outline: 0;
}

/**
 * 1. Remove border when inside `a` element in IE 6/7/8/9 and Firefox 3.
 * 2. Improve image quality when scaled in IE 7.
 */

img {
    border: 0; /* 1 */
    -ms-interpolation-mode: bicubic; /* 2 */
}

/**
 * Address margin not present in IE 6/7/8/9, Safari 5, and Opera 11.
 */

figure {
    margin: 0;
}

/**
 * Correct margin displayed oddly in IE 6/7.
 */

form {
    margin: 0;
}

/**
 * Define consistent border, margin, and padding.
 */

fieldset {
    border: 1px solid #c0c0c0;
    margin: 0 2px;
    padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct color not being inherited in IE 6/7/8/9.
 * 2. Correct text not wrapping in Firefox 3.
 * 3. Correct alignment displayed oddly in IE 6/7.
 */

legend {
    border: 0; /* 1 */
    padding: 0;
    white-space: normal; /* 2 */
    *margin-left: -7px; /* 3 */
}

/**
 * 1. Correct font size not being inherited in all browsers.
 * 2. Address margins set differently in IE 6/7, Firefox 3+, Safari 5,
 *    and Chrome.
 * 3. Improve appearance and consistency in all browsers.
 */

button,
input,
select,
textarea {
    font-size: 100%; /* 1 */
    margin: 0; /* 2 */
    vertical-align: baseline; /* 3 */
    *vertical-align: middle; /* 3 */
}

/**
 * Address Firefox 3+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */

button,
input {
    line-height: normal;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 6+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */

button,
select {
    text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 * 4. Remove inner spacing in IE 7 without affecting normal text inputs.
 *    Known issue: inner spacing remains in IE 6.
 */

button,
html input[type="button"], /* 1 */
input[type="reset"],
input[type="submit"] {
    -webkit-appearance: button; /* 2 */
    cursor: pointer; /* 3 */
    *overflow: visible;  /* 4 */
}

/**
 * Re-set default cursor for disabled elements.
 */

button[disabled],
html input[disabled] {
    cursor: default;
}

/**
 * 1. Address box sizing set to content-box in IE 8/9.
 * 2. Remove excess padding in IE 8/9.
 * 3. Remove excess padding in IE 7.
 *    Known issue: excess padding remains in IE 6.
 */

input[type="checkbox"],
input[type="radio"] {
    box-sizing: border-box; /* 1 */
    padding: 0; /* 2 */
    *height: 13px; /* 3 */
    *width: 13px; /* 3 */
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */

input[type="search"] {
    -webkit-appearance: textfield; /* 1 */
    -moz-box-sizing: content-box;
    -webkit-box-sizing: content-box; /* 2 */
    box-sizing: content-box;
}

/**
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
    -webkit-appearance: none;
}

/**
 * Remove inner padding and border in Firefox 3+.
 */

button::-moz-focus-inner,
input::-moz-focus-inner {
    border: 0;
    padding: 0;
}

/**
 * 1. Remove default vertical scrollbar in IE 6/7/8/9.
 * 2. Improve readability and alignment in all browsers.
 */

textarea {
    overflow: auto; /* 1 */
    vertical-align: top; /* 2 */
}

/**
 * Remove most spacing between table cells.
 */

table {
    border-collapse: collapse;
    border-spacing: 0;
}

html,
button,
input,
select,
textarea {
    color: #222;
}


::-moz-selection {
    background: #b3d4fc;
    text-shadow: none;
}

::selection {
    background: #b3d4fc;
    text-shadow: none;
}

img {
    vertical-align: middle;
}

fieldset {
    border: 0;
    margin: 0;
    padding: 0;
}

textarea {
    resize: vertical;
}

.chromeframe {
    margin: 0.2em 0;
    background: #ccc;
    color: #000;
    padding: 0.2em 0;
}

.\src\tools\ScrollToTop.ts
--------------------------
import { useEffect } from "react";
import { useLocation } from "react-router-dom";

export default function ScrollToTop() {
    const { pathname } = useLocation();

    useEffect(() => {
        window.scrollTo(0, 0);
    }, [pathname]);

    return null;
}

.\src\tools\window.ts
---------------------
export const getWindowWidth = () =>
    window.innerWidth ||
    document.documentElement.clientWidth ||
    document.body.clientWidth;


.\src\tools\validations\dateValidation.ts
-----------------------------------------
const daysMap = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

const isBissextile = (year: number) =>
    (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;

export default function isValidDate(year: number, month: number, day: number) {
    if (day > 31 || day < 1 || month > 12 || month < 1 || year < 1869) {
        return false;
    }

    const monthDays =
        month === 2 && isBissextile(year) ? 29 : daysMap[month - 1];
    if (day > monthDays) {
        return false;
    }

    return true;
}


.\src\tools\validations\emailValidation.ts
------------------------------------------
export default function isEmailValid(email: string): boolean {
    return !!email.match(/^\S+@\S+\.\S+$/);
}


.\src\tools\validations\passwordValidation.ts
---------------------------------------------
export default function isPasswordValid(password: string): boolean {
    return !password.match(
        /^(.{0,7}|[^A-Z]*|[^a-z]*|[^0-9~!@#$%^&*_\-+=`|\\(){}[\]:;'"<>,.?/]*)$/
    );
}
